!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){(function(){var GameComponent,ViewController;GameComponent=require("./components/GameComponent.coffee"),ViewController=React.createElement(GameComponent,null),React.render(ViewController,document.getElementById("minesweeper"))}).call(this)},{"./components/GameComponent.coffee":10}],2:[function(require,module,exports){module.exports.Dispatcher=require("./lib/Dispatcher")},{"./lib/Dispatcher":24}],3:[function(require,module,exports){(function(){var AppDispatcher,Dispatcher,ModalStore,TileStore,changeModal,onTilesChange;Dispatcher=require("Flux").Dispatcher,AppDispatcher=new Dispatcher,TileStore=require("./stores/TileStore.coffee"),ModalStore=require("./stores/ModalStore.coffee"),changeModal=function(name){return name?ModalStore.toggle(name):ModalStore.reset(),ModalStore.emitChange()},onTilesChange=function(){var info;return info=TileStore.getInfo(),(info.win||info.loss)&&ModalActions.toggle("newGame"),TileStore.emitChange()},AppDispatcher.register(function(event){var tile;switch(event.type){case"TILE_FLAG_TOGGLE":return tile=TileStore.get({uid:event.uid}),tile.toggleFlag(),onTilesChange();case"TILE_CLEAR":return tile=TileStore.get({uid:event.uid}),tile.clear(),onTilesChange();case"TILES_CLEAR_SAFE_RANDOM":if(tile=TileStore.randomSafeTile())return tile.clear(),onTilesChange();break;case"TILES_NEW_GAME":return TileStore.newGame(8,4,10),onTilesChange(),changeModal("newGame");case"MODAL_TOGGLE":return ModalStore.toggle(event.name),ModalStore.emitChange();case"MODAL_RESET":return changeModal()}}),module.exports=AppDispatcher}).call(this)},{"./stores/ModalStore.coffee":18,"./stores/TileStore.coffee":19,Flux:20}],4:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={toggle:function(name){return Dispatcher.dispatch({type:"MODAL_TOGGLE",name:name})},reset:function(){return Dispatcher.dispatch({type:"MODAL_RESET"})}}}).call(this)},{"../Dispatcher.coffee":3}],5:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={toggleFlag:function(uid){return Dispatcher.dispatch({type:"TILE_FLAG_TOGGLE",uid:uid})},clear:function(uid){return Dispatcher.dispatch({type:"TILE_CLEAR",uid:uid})}}}).call(this)},{"../Dispatcher.coffee":3}],6:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={clearSafeRandomTile:function(){return Dispatcher.dispatch({type:"TILES_CLEAR_SAFE_RANDOM"})},newGame:function(){return Dispatcher.dispatch({type:"TILES_NEW_GAME"})}}}).call(this)},{"../Dispatcher.coffee":3}],7:[function(require,module,exports){(function(){var ModalsCollection;ModalsCollection=function(){function ModalsCollection(){this.show={}}return ModalsCollection.prototype.set=function(fileName){return this.show[fileName]=!1,this},ModalsCollection.prototype.toggle=function(name){var isBeingShown,modalName,ref,results;ref=this.show,results=[];for(modalName in ref)isBeingShown=ref[modalName],results.push(modalName===name?this.show[modalName]=!isBeingShown:isBeingShown=!1);return results},ModalsCollection.prototype.reset=function(){var key,ref,showModal;ref=this.show;for(key in ref)showModal=ref[key],this.show[key]=!1;return this},ModalsCollection}(),module.exports=ModalsCollection}).call(this)},{}],8:[function(require,module,exports){(function(){var TileModel,TilesCollection,extend=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child},hasProp={}.hasOwnProperty;TileModel=require("../models/TileModel.coffee"),TilesCollection=function(){function TilesCollection(){var Model,collection;this.all=[],collection=this,this.model=Model=function(superClass){function Model(){return Model.__super__.constructor.apply(this,arguments)}return extend(Model,superClass),Model.prototype.clear=function(){return Model.__super__.clear.call(this),collection.clearNeighbors(this),collection.moveUpdate()},Model.prototype.toggleFlag=function(){return Model.__super__.toggleFlag.call(this),collection.moveUpdate()},Model}(TileModel)}return TilesCollection.prototype.newGame=function(x,y,mines){var attrs,i,j,k,mineNum,ref,ref1,ref2,tile;for(this.reset(),this.sizeX=x,this.sizeY=y,this.numOfMines=mines,y=i=0,ref=this.sizeY-1;ref>=0?ref>=i:i>=ref;y=ref>=0?++i:--i)for(x=j=0,ref1=this.sizeX-1;ref1>=0?ref1>=j:j>=ref1;x=ref1>=0?++j:--j)attrs={x:x,y:y},this.add(attrs);for(mineNum=k=1,ref2=this.numOfMines;ref2>=1?ref2>=k:k>=ref2;mineNum=ref2>=1?++k:--k)tile=this.randomSafeTile(),tile.model.isMine=!0;return this.tallyMines(),this.gameUpdate()},TilesCollection.prototype.noMineFirstClick=function(tile){return 0===this.numOfClears&&tile.model.isMine===!0&&(tile.model.isMine=!1,this.randomSafeTile().model.isMine=!0,this.tallyMines()),tile},TilesCollection.prototype.add=function(model){var tile;return tile=new this.model(model),this.all.push(tile),tile},TilesCollection.prototype.reset=function(){return this.all=[],this},TilesCollection.prototype.randomSafeTile=function(){var findAttrs,randomIndex,safeTiles;return findAttrs={isClear:!1,isMine:!1},safeTiles=this.getAll(findAttrs),randomIndex=Math.floor(Math.random()*safeTiles.length),safeTiles[randomIndex]},TilesCollection.prototype.tallyMines=function(){var adjacentTile,i,j,len,len1,neighborAttrs,neighborMine,neighborMines,neighborX,neighborY,ref,ref1,results,tile;for(ref=this.all,results=[],i=0,len=ref.length;len>i;i++){for(tile=ref[i],neighborMines=0,ref1=tile.adjacentTiles,j=0,len1=ref1.length;len1>j;j++)adjacentTile=ref1[j],neighborX=tile.model.x+adjacentTile[0],neighborY=tile.model.y+adjacentTile[1],neighborAttrs={isMine:!0,x:neighborX,y:neighborY},neighborMine=this.get(neighborAttrs),void 0!==neighborMine&&neighborMines++;results.push(tile.model.adjacentMines=neighborMines)}return results},TilesCollection.prototype.gameUpdate=function(){var i,len,ref,tile;for(this.x=Math.max.apply(this,this.all.map(function(tile){return tile.model.x})),this.y=Math.max.apply(this,this.all.map(function(tile){return tile.model.y})),this.x=this.x--,this.y=this.y--,this.numOfMines=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isMine===!0&&this.numOfMines++;return this.moveUpdate()},TilesCollection.prototype.moveUpdate=function(){var i,len,ref,tile;for(this.loss=!1,this.win=!1,this.numOfClears=0,this.numOfFlags=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isClear===!0&&this.numOfClears++,tile.model.isFlagged===!0&&this.numOfFlags++,tile.model.isMine===!0&&tile.model.isClear===!0&&(this.loss=!0);return this.loss===!1&&this.all.length-this.numOfMines-this.numOfClears===0?this.win=!0:void 0},TilesCollection.prototype.clearNeighbors=function(tile){var adjacentTile,i,len,neighbor,ref,results,shouldClearNeighbor,shouldClearNeighbors;if(shouldClearNeighbors=0===tile.model.adjacentMines&&tile.model.isMine===!1){for(ref=tile.adjacentTiles,results=[],i=0,len=ref.length;len>i;i++)adjacentTile=ref[i],neighbor=this.get({x:tile.model.x+adjacentTile[0],y:tile.model.y+adjacentTile[1]}),shouldClearNeighbor=neighbor&&neighbor.model.isClear===!1&&neighbor.model.isMine===!1,results.push(shouldClearNeighbor?neighbor.clear():void 0);return results}},TilesCollection.prototype.get=function(attrs){return this.getAll(attrs)[0]},TilesCollection.prototype.getAll=function(attrs){var i,key,len,matches,numOfAttrs,numOfMatchedAttrs,ref,tile,val;if(matches=[],!attrs)return this.all;for(ref=this.all,i=0,len=ref.length;len>i;i++){tile=ref[i],numOfAttrs=0,numOfMatchedAttrs=0;for(key in attrs)val=attrs[key],numOfAttrs++,tile.model[key]===val&&numOfMatchedAttrs++;numOfMatchedAttrs===numOfAttrs&&matches.push(tile)}return matches},TilesCollection}(),module.exports=TilesCollection}).call(this)},{"../models/TileModel.coffee":17}],9:[function(require,module,exports){(function(){var Dashboard,ModalActions,R,TilesActions;ModalActions=require("../actions/ModalActions.coffee"),TilesActions=require("../actions/TilesActions.coffee"),R=React.DOM,Dashboard=React.createClass({displayName:"Dashboard",render:function(){return R.div({id:"dashboard"},[R.div({key:"new-game",className:"new-game button",onClick:function(){return ModalActions.toggle("newGame")}},"new game"),R.div({key:"select-tile",className:"select-tile button",onClick:TilesActions.clearSafeRandomTile},"clear a safe tile"),R.div({key:"instructions",className:"instructions button",onClick:function(){return ModalActions.toggle("instructions")}},"instructions")])}}),module.exports=Dashboard}).call(this)},{"../actions/ModalActions.coffee":4,"../actions/TilesActions.coffee":6}],10:[function(require,module,exports){(function(){var DashboardComponent,Dispatcher,Game,InfoComponent,ModalActions,ModalOverlayComponent,ModalStore,R,TileStore,TilesComponent,assign,getModalStoreState,getState,getTileStoreState;Dispatcher=require("../Dispatcher.coffee"),TileStore=require("../stores/TileStore.coffee"),ModalStore=require("../stores/ModalStore.coffee"),ModalActions=require("../actions/ModalActions.coffee"),TilesComponent=require("./TilesComponent.coffee"),InfoComponent=require("./InfoComponent.coffee"),DashboardComponent=require("./DashboardComponent.coffee"),ModalOverlayComponent=require("./modals/ModalOverlayComponent.coffee"),assign=require("object-assign"),R=React.DOM,getState=function(){return assign({},getTileStoreState(),getModalStoreState())},getTileStoreState=function(){return{all:TileStore.getAll(),info:TileStore.getInfo()}},getModalStoreState=function(){return{modals:ModalStore.getAll()}},Game=React.createClass({displayName:"Game",getInitialState:function(){return getState()},componentDidMount:function(){return TileStore.addChangeListener(this._onTileStoreChange),ModalStore.addChangeListener(this._onModalStoreChange)},componentWillUnmount:function(){return TileStore.removeChangeListener(this._onTileStoreChange),ModalStore.removeChangeListener(this._onModalStoreChange)},_onTileStoreChange:function(){var tilesState;return tilesState=getTileStoreState(),this.setState(tilesState)},_onModalStoreChange:function(){return this.setState(getModalStoreState())},render:function(){var boardWrappper,dashboard,info,overlays,tiles;return info=React.createElement(InfoComponent,{key:"info",info:this.state.info}),tiles=React.createElement(TilesComponent,{key:"tiles",tiles:this.state.all}),boardWrappper=R.div({id:"board-wrappper",key:"board-wrappper"},[info,tiles]),dashboard=React.createElement(DashboardComponent,{key:"dashboard"}),overlays=React.createElement(ModalOverlayComponent,{key:"modal-overlay",info:this.state.info,modals:this.state.modals}),R.div(null,[overlays,boardWrappper,dashboard])}}),module.exports=Game}).call(this)},{"../Dispatcher.coffee":3,"../actions/ModalActions.coffee":4,"../stores/ModalStore.coffee":18,"../stores/TileStore.coffee":19,"./DashboardComponent.coffee":9,"./InfoComponent.coffee":11,"./TilesComponent.coffee":13,"./modals/ModalOverlayComponent.coffee":16,"object-assign":26}],11:[function(require,module,exports){(function(){var Info,R;R=React.DOM,Info=React.createClass({displayName:"Info",render:function(){return R.ul({id:"stats"},[R.li({key:"tiles"},this.props.info.numOfTiles+" tiles"),R.li({key:"mines"},this.props.info.numOfMines+" mines"),R.li({key:"flagged"},this.props.info.numOfFlags+" flagged tiles"),R.li({key:"cleared"},this.props.info.numOfUncleared+" left to clear")])}}),module.exports=Info}).call(this)},{}],12:[function(require,module,exports){(function(){var R,Tile,TileActions;TileActions=require("../actions/TileActions.coffee"),R=React.DOM,Tile=React.createClass({displayName:"Tile",render:function(){return R.li({className:this.getClass(),onClick:this.clickHandler},R.span(null,this.getText()))},clickHandler:function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?TileActions.toggleFlag(this.props.tile.model.uid):TileActions.clear(this.props.tile.model.uid)):TileActions.clear(this.props.tile.model.uid)},isFirstColumn:function(){return 0===this.props.tile.model.x},hasBeenFlagged:function(){return this.props.tile.model.isClear!==!0&&this.props.tile.model.isFlagged===!0},hasBeenCleared:function(){return this.props.tile.model.isClear===!0},hasMine:function(){return this.props.tile.model.isMine===!0},shouldDisplayMine:function(){return this.hasMine()&&this.hasBeenCleared()},hasZeroAdjacentMines:function(){return 0===this.props.tile.model.adjacentMines&&!this.hasMine()},getText:function(){return this.props.tile.model.x+""+this.props.tile.model.y},getClass:function(){return["tile",this.isFirstColumn()?"nth":void 0,this.hasBeenCleared()?"clear":void 0,this.hasBeenFlagged()?"flagged":void 0,this.shouldDisplayMine()?"mine":void 0,this.hasZeroAdjacentMines()?"clear zero":void 0].join(" ")}}),module.exports=Tile}).call(this)},{"../actions/TileActions.coffee":5}],13:[function(require,module,exports){(function(){var R,TileComponent,Tiles;TileComponent=require("./TileComponent.coffee"),R=React.DOM,Tiles=React.createClass({displayName:"Tiles",render:function(){var tiles;return tiles=this.props.tiles.map(function(_this){return function(item,index){return React.createElement(TileComponent,{key:index,ref:item.model.uid,tile:item})}}(this)),R.ul({id:"board"},tiles)}}),module.exports=Tiles}).call(this)},{"./TileComponent.coffee":12}],14:[function(require,module,exports){(function(){var ModalActions,ModalOverlay,R;ModalActions=require("../../actions/ModalActions.coffee"),R=React.DOM,ModalOverlay=React.createClass({displayName:"ModalInstructions",getClass:function(){var classes;return classes=["message"],this.props.show||classes.push("hide"),classes.join(" ")},clickHandler:function(){return ModalActions.toggle("instructions")},render:function(){var button,controls,description;return description=R.div({key:"instructions-description"},[R.div({key:"instructions-header",className:"border-bottom"},"how to play"),R.div({key:"instructions-details",className:"border-bottom"},["the game is played by revealing tiles of the grid.","if a selected tile contains a mine, the player loses the game.","otherwise, a digit is revealed in the tile, indicating the number","of mines located in the eight adjacent tiles."].join(" ")),R.div({key:"instructions-click"},R.span({key:"instructions-click-code",className:"code"},"click"),R.span({key:"instructions-click-text"}," to reveal the squares of the grid.")),R.div({key:"instructions-click-hint",className:"border-bottom"},"(your first click will never land on a mine)")]),controls=R.div({key:"instructions-controls"},[R.span({key:"instructions-controls-code1",className:"code"},"shift + click"),R.span({key:"instructions-controls-text1"}," or "),R.span({key:"instructions-controls-code2",className:"code"},"alt + click"),R.span({key:"instructions-controls-text2"},' will "flag" a tile, helping you to remember where you think a mine is hidden')]),button=R.div({key:"instructions-button"},R.div({className:"button",onClick:this.clickHandler},"got it!")),R.div({key:"instructions-modal",className:this.getClass()},[description,controls,button])}}),module.exports=ModalOverlay}).call(this)},{"../../actions/ModalActions.coffee":4}],15:[function(require,module,exports){(function(){var ModalActions,ModalOverlay,R,TilesActions;ModalActions=require("../../actions/ModalActions.coffee"),TilesActions=require("../../actions/TilesActions.coffee"),R=React.DOM,ModalOverlay=React.createClass({displayName:"ModalNewGame",getClass:function(){var classes;return classes=["message"],this.props.show||classes.push("hide"),classes.join(" ")},getTitleText:function(){return!this.props.show||this.props.win||this.props.loss?this.props.win&&!this.props.loss?"you won!":this.props.win||this.props.win?void 0:"you lost...":"new game?"},clickHandlerNewGame:function(){return TilesActions.newGame()},clickHandlerExitModal:function(){return ModalActions.reset()},renderButtons:function(){var buttons;return buttons=[R.div({key:"new-game-start",className:"button",onClick:this.clickHandlerNewGame},"start!")],this.props.loss||buttons.push(R.div({key:"new-game-resume",className:"button",onClick:this.clickHandlerExitModal},"resume!")),R.div({key:"new-game-buttons"},buttons)},render:function(){var title;return title=R.div({key:"new-game-title-wrapper",className:"border-bottom"},R.div({key:"new-game-title",className:"title"},this.getTitleText())),R.div({key:"new-game-modal",className:this.getClass()},[title,this.renderButtons()])}}),module.exports=ModalOverlay}).call(this)},{"../../actions/ModalActions.coffee":4,"../../actions/TilesActions.coffee":6}],16:[function(require,module,exports){(function(){var InstructionsComponent,ModalActions,ModalOverlay,NewGameComponent,R;ModalActions=require("../../actions/ModalActions.coffee"),InstructionsComponent=require("./ModalInstructionsComponent.coffee"),NewGameComponent=require("./ModalNewGameComponent.coffee"),R=React.DOM,ModalOverlay=React.createClass({displayName:"ModalOverlay",getClass:function(){return this.props.modals.newGame?"":this.props.modals.instructions?"":"hide"},resetHandler:function(){return this.props.info.loss||this.props.info.win?void 0:ModalActions.reset()},instructionsHandler:function(){return ModalActions.toggle("instructions")},render:function(){var overlay;return overlay=R.div({id:"overlay",key:"overlay",className:this.getClass(),onClick:this.resetHandler},null),R.div(null,[overlay,React.createElement(InstructionsComponent,{key:"modal-instructions",show:this.props.modals.instructions}),React.createElement(NewGameComponent,{key:"modal-new-game",show:this.props.modals.newGame,win:this.props.info.win,loss:this.props.info.loss})])}}),module.exports=ModalOverlay}).call(this)},{"../../actions/ModalActions.coffee":4,"./ModalInstructionsComponent.coffee":14,"./ModalNewGameComponent.coffee":15}],17:[function(require,module,exports){(function(){var TileModel;Number.isInteger=Number.isInteger||function(value){return"number"==typeof value&&isFinite(value)&&Math.floor(value)===value},module.exports=TileModel=function(){function TileModel(attrs){if(!Number.isInteger(attrs.x)||!Number.isInteger(attrs.y))throw"`x` and `y` are required Integer attributes to instantiate Tile";this.model={x:void 0,y:void 0,uid:void 0,isMine:!1,isClear:!1,isFlagged:!1,adjacentMines:0},this.adjacentTiles=[[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]],this.set(attrs)}return TileModel.prototype.set=function(attrs){var attr,key;for(key in attrs)attr=attrs[key],this.model[key]=attr,this.model.uid=String(attrs.x)+"-"+String(attrs.y);return this},TileModel.prototype.toggleFlag=function(){return this.model.isFlagged=!this.model.isFlagged,this},TileModel.prototype.clear=function(){return this.model.isClear=!0,this.model.isFlagged=!1,this},TileModel}()}).call(this)},{}],18:[function(require,module,exports){(function(){var EventEmitter,ModalStore,Modals,ModalsCollection,assign;ModalsCollection=require("../collections/ModalsCollection.coffee"),EventEmitter=require("events").EventEmitter,assign=require("object-assign"),Modals=new ModalsCollection,Modals.set("newGame"),Modals.set("instructions"),ModalStore=assign({},EventEmitter.prototype,{event:"event",getAll:function(){return Modals.show},reset:function(){return Modals.reset()},toggle:function(modalName){return Modals.toggle(modalName)},emitChange:function(){return this.emit(this.event)},addChangeListener:function(callback){return this.on(this.event,callback)},removeChangeListener:function(callback){return this.removeListener(this.event,callback)}}),module.exports=ModalStore}).call(this)},{"../collections/ModalsCollection.coffee":7,events:23,"object-assign":26}],19:[function(require,module,exports){(function(){var EventEmitter,TileStore,Tiles,TilesCollection,assign;TilesCollection=require("../collections/TilesCollection.coffee"),EventEmitter=require("events").EventEmitter,assign=require("object-assign"),Tiles=new TilesCollection,Tiles.newGame(4,7,5),window.foo=Tiles,TileStore=assign({},EventEmitter.prototype,{event:"change",get:function(attrs){return Tiles.get(attrs)},getAll:function(){return Tiles.getAll()},getInfo:function(){return{win:Tiles.win,loss:Tiles.loss,numOfTiles:Tiles.all.length,numOfMines:Tiles.numOfMines,numOfFlags:Tiles.numOfFlags,numOfUncleared:Tiles.all.length-Tiles.numOfMines-Tiles.numOfClears}},randomSafeTile:function(){return Tiles.randomSafeTile()},newGame:function(x,y,mines){return Tiles.newGame(x,y,mines)},emitChange:function(){return this.emit(this.event)},addChangeListener:function(callback){return this.on(this.event,callback)},removeChangeListener:function(callback){return this.removeListener(this.event,callback)}}),module.exports=TileStore}).call(this)},{"../collections/TilesCollection.coffee":8,events:23,"object-assign":26}],20:[function(require,module,exports){arguments[4][2][0].apply(exports,arguments)},{"./lib/Dispatcher":21,dup:2}],21:[function(require,module,exports){"use strict";function Dispatcher(){this.$Dispatcher_callbacks={},this.$Dispatcher_isPending={},this.$Dispatcher_isHandled={},this.$Dispatcher_isDispatching=!1,this.$Dispatcher_pendingPayload=null}var invariant=require("./invariant"),_lastID=1,_prefix="ID_";Dispatcher.prototype.register=function(callback){var id=_prefix+_lastID++;return this.$Dispatcher_callbacks[id]=callback,id},Dispatcher.prototype.unregister=function(id){invariant(this.$Dispatcher_callbacks[id],"Dispatcher.unregister(...): `%s` does not map to a registered callback.",id),delete this.$Dispatcher_callbacks[id]},Dispatcher.prototype.waitFor=function(ids){invariant(this.$Dispatcher_isDispatching,"Dispatcher.waitFor(...): Must be invoked while dispatching.");for(var ii=0;ii<ids.length;ii++){var id=ids[ii];this.$Dispatcher_isPending[id]?invariant(this.$Dispatcher_isHandled[id],"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",id):(invariant(this.$Dispatcher_callbacks[id],"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",id),this.$Dispatcher_invokeCallback(id))}},Dispatcher.prototype.dispatch=function(payload){invariant(!this.$Dispatcher_isDispatching,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."),this.$Dispatcher_startDispatching(payload);try{for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]||this.$Dispatcher_invokeCallback(id)}finally{this.$Dispatcher_stopDispatching()}},Dispatcher.prototype.isDispatching=function(){return this.$Dispatcher_isDispatching},Dispatcher.prototype.$Dispatcher_invokeCallback=function(id){this.$Dispatcher_isPending[id]=!0,this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload),this.$Dispatcher_isHandled[id]=!0},Dispatcher.prototype.$Dispatcher_startDispatching=function(payload){for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]=!1,this.$Dispatcher_isHandled[id]=!1;this.$Dispatcher_pendingPayload=payload,this.$Dispatcher_isDispatching=!0},Dispatcher.prototype.$Dispatcher_stopDispatching=function(){this.$Dispatcher_pendingPayload=null,this.$Dispatcher_isDispatching=!1},module.exports=Dispatcher},{"./invariant":22}],22:[function(require,module,exports){"use strict";var invariant=function(condition,format,a,b,c,d,e,f){if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;error=new Error("Invariant Violation: "+format.replace(/%s/g,function(){return args[argIndex++]}))}throw error.framesToPop=1,error}};module.exports=invariant},{}],23:[function(require,module,exports){function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(arg){return"function"==typeof arg}function isNumber(arg){return"number"==typeof arg}function isObject(arg){return"object"==typeof arg&&null!==arg}function isUndefined(arg){return void 0===arg}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||0>n||isNaN(n))throw TypeError("n must be a positive number");return this._maxListeners=n,this},EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(this._events||(this._events={}),"error"===type&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if(er=arguments[1],er instanceof Error)throw er;throw TypeError('Uncaught, unspecified "error" event.')}if(handler=this._events[type],isUndefined(handler))return!1;if(isFunction(handler))switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];handler.apply(this,args)}else if(isObject(handler)){for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];for(listeners=handler.slice(),len=listeners.length,i=0;len>i;i++)listeners[i].apply(this,args)}return!0},EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",type,isFunction(listener.listener)?listener.listener:listener),this._events[type]?isObject(this._events[type])?this._events[type].push(listener):this._events[type]=[this._events[type],listener]:this._events[type]=listener,isObject(this._events[type])&&!this._events[type].warned){var m;m=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners,m&&m>0&&this._events[type].length>m&&(this._events[type].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[type].length),"function"==typeof console.trace&&console.trace())}return this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(type,listener){function g(){this.removeListener(type,g),fired||(fired=!0,listener.apply(this,arguments))}if(!isFunction(listener))throw TypeError("listener must be a function");var fired=!1;return g.listener=listener,this.on(type,g),this},EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError("listener must be a function");if(!this._events||!this._events[type])return this;if(list=this._events[type],length=list.length,position=-1,list===listener||isFunction(list.listener)&&list.listener===listener)delete this._events[type],this._events.removeListener&&this.emit("removeListener",type,listener);else if(isObject(list)){for(i=length;i-->0;)if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break}if(0>position)return this;1===list.length?(list.length=0,delete this._events[type]):list.splice(position,1),this._events.removeListener&&this.emit("removeListener",type,listener)}return this},EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[type]&&delete this._events[type],this;if(0===arguments.length){for(key in this._events)"removeListener"!==key&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events={},this}if(listeners=this._events[type],isFunction(listeners))this.removeListener(type,listeners);else for(;listeners.length;)this.removeListener(type,listeners[listeners.length-1]);return delete this._events[type],this},EventEmitter.prototype.listeners=function(type){var ret;return ret=this._events&&this._events[type]?isFunction(this._events[type])?[this._events[type]]:this._events[type].slice():[]},EventEmitter.listenerCount=function(emitter,type){var ret;return ret=emitter._events&&emitter._events[type]?isFunction(emitter._events[type])?1:emitter._events[type].length:0}},{}],24:[function(require,module,exports){arguments[4][21][0].apply(exports,arguments)},{"./invariant":25,dup:21}],25:[function(require,module,exports){arguments[4][22][0].apply(exports,arguments)},{dup:22}],26:[function(require,module,exports){"use strict";function ToObject(val){if(null==val)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(val)}module.exports=Object.assign||function(target,source){for(var from,keys,to=ToObject(target),s=1;s<arguments.length;s++){from=arguments[s],keys=Object.keys(Object(from));for(var i=0;i<keys.length;i++)to[keys[i]]=from[keys[i]]}return to}},{}]},{},[1,2]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJSZXNvdXJjZXMvY29mZmVlL0FwcC5jb2ZmZWUiLCJidWlsZC5qcyIsIm5vZGVfbW9kdWxlcy9mbHV4L2luZGV4LmpzIiwiUmVzb3VyY2VzL2NvZmZlZS9EaXNwYXRjaGVyLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvYWN0aW9ucy9Nb2RhbEFjdGlvbnMuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9hY3Rpb25zL1RpbGVBY3Rpb25zLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvYWN0aW9ucy9UaWxlc0FjdGlvbnMuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb2xsZWN0aW9ucy9Nb2RhbHNDb2xsZWN0aW9uLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29sbGVjdGlvbnMvVGlsZXNDb2xsZWN0aW9uLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29tcG9uZW50cy9EYXNoYm9hcmRDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL0dhbWVDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL0luZm9Db21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL1RpbGVDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL1RpbGVzQ29tcG9uZW50LmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29tcG9uZW50cy9tb2RhbHMvTW9kYWxJbnN0cnVjdGlvbnNDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL21vZGFscy9Nb2RhbE5ld0dhbWVDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL21vZGFscy9Nb2RhbE92ZXJsYXlDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9tb2RlbHMvVGlsZU1vZGVsLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvc3RvcmVzL01vZGFsU3RvcmUuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9zdG9yZXMvVGlsZVN0b3JlLmNvZmZlZSIsIm5vZGVfbW9kdWxlcy9GbHV4L2xpYi9EaXNwYXRjaGVyLmpzIiwibm9kZV9tb2R1bGVzL0ZsdXgvbGliL2ludmFyaWFudC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsIkdhbWVDb21wb25lbnQiLCJWaWV3Q29udHJvbGxlciIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsInJlbmRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0aGlzIiwiLi9jb21wb25lbnRzL0dhbWVDb21wb25lbnQuY29mZmVlIiwyLCJEaXNwYXRjaGVyIiwiLi9saWIvRGlzcGF0Y2hlciIsMywiQXBwRGlzcGF0Y2hlciIsIk1vZGFsU3RvcmUiLCJUaWxlU3RvcmUiLCJjaGFuZ2VNb2RhbCIsIm9uVGlsZXNDaGFuZ2UiLCJuYW1lIiwidG9nZ2xlIiwicmVzZXQiLCJlbWl0Q2hhbmdlIiwiaW5mbyIsImdldEluZm8iLCJ3aW4iLCJsb3NzIiwiTW9kYWxBY3Rpb25zIiwicmVnaXN0ZXIiLCJldmVudCIsInRpbGUiLCJ0eXBlIiwiZ2V0IiwidWlkIiwidG9nZ2xlRmxhZyIsImNsZWFyIiwicmFuZG9tU2FmZVRpbGUiLCJuZXdHYW1lIiwiLi9zdG9yZXMvTW9kYWxTdG9yZS5jb2ZmZWUiLCIuL3N0b3Jlcy9UaWxlU3RvcmUuY29mZmVlIiwiRmx1eCIsNCwiZGlzcGF0Y2giLCIuLi9EaXNwYXRjaGVyLmNvZmZlZSIsNSw2LCJjbGVhclNhZmVSYW5kb21UaWxlIiw3LCJNb2RhbHNDb2xsZWN0aW9uIiwic2hvdyIsInByb3RvdHlwZSIsInNldCIsImZpbGVOYW1lIiwiaXNCZWluZ1Nob3duIiwibW9kYWxOYW1lIiwicmVmIiwicmVzdWx0cyIsInB1c2giLCJrZXkiLCJzaG93TW9kYWwiLDgsIlRpbGVNb2RlbCIsIlRpbGVzQ29sbGVjdGlvbiIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50IiwiY3RvciIsImNvbnN0cnVjdG9yIiwiaGFzUHJvcCIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwiTW9kZWwiLCJjb2xsZWN0aW9uIiwiYWxsIiwibW9kZWwiLCJzdXBlckNsYXNzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjbGVhck5laWdoYm9ycyIsIm1vdmVVcGRhdGUiLCJ4IiwieSIsIm1pbmVzIiwiYXR0cnMiLCJqIiwiayIsIm1pbmVOdW0iLCJyZWYxIiwicmVmMiIsInNpemVYIiwic2l6ZVkiLCJudW1PZk1pbmVzIiwiYWRkIiwiaXNNaW5lIiwidGFsbHlNaW5lcyIsImdhbWVVcGRhdGUiLCJub01pbmVGaXJzdENsaWNrIiwibnVtT2ZDbGVhcnMiLCJmaW5kQXR0cnMiLCJyYW5kb21JbmRleCIsInNhZmVUaWxlcyIsImlzQ2xlYXIiLCJnZXRBbGwiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhZGphY2VudFRpbGUiLCJsZW4iLCJsZW4xIiwibmVpZ2hib3JBdHRycyIsIm5laWdoYm9yTWluZSIsIm5laWdoYm9yTWluZXMiLCJuZWlnaGJvclgiLCJuZWlnaGJvclkiLCJhZGphY2VudFRpbGVzIiwiYWRqYWNlbnRNaW5lcyIsIm1heCIsIm1hcCIsIm51bU9mRmxhZ3MiLCJpc0ZsYWdnZWQiLCJuZWlnaGJvciIsInNob3VsZENsZWFyTmVpZ2hib3IiLCJzaG91bGRDbGVhck5laWdoYm9ycyIsIm1hdGNoZXMiLCJudW1PZkF0dHJzIiwibnVtT2ZNYXRjaGVkQXR0cnMiLCJ2YWwiLCIuLi9tb2RlbHMvVGlsZU1vZGVsLmNvZmZlZSIsOSwiRGFzaGJvYXJkIiwiUiIsIlRpbGVzQWN0aW9ucyIsIkRPTSIsImNyZWF0ZUNsYXNzIiwiZGlzcGxheU5hbWUiLCJkaXYiLCJpZCIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCIuLi9hY3Rpb25zL01vZGFsQWN0aW9ucy5jb2ZmZWUiLCIuLi9hY3Rpb25zL1RpbGVzQWN0aW9ucy5jb2ZmZWUiLDEwLCJEYXNoYm9hcmRDb21wb25lbnQiLCJHYW1lIiwiSW5mb0NvbXBvbmVudCIsIk1vZGFsT3ZlcmxheUNvbXBvbmVudCIsIlRpbGVzQ29tcG9uZW50IiwiYXNzaWduIiwiZ2V0TW9kYWxTdG9yZVN0YXRlIiwiZ2V0U3RhdGUiLCJnZXRUaWxlU3RvcmVTdGF0ZSIsIm1vZGFscyIsImdldEluaXRpYWxTdGF0ZSIsImNvbXBvbmVudERpZE1vdW50IiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJfb25UaWxlU3RvcmVDaGFuZ2UiLCJfb25Nb2RhbFN0b3JlQ2hhbmdlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVDaGFuZ2VMaXN0ZW5lciIsInRpbGVzU3RhdGUiLCJzZXRTdGF0ZSIsImJvYXJkV3JhcHBwZXIiLCJkYXNoYm9hcmQiLCJvdmVybGF5cyIsInRpbGVzIiwic3RhdGUiLCIuLi9zdG9yZXMvTW9kYWxTdG9yZS5jb2ZmZWUiLCIuLi9zdG9yZXMvVGlsZVN0b3JlLmNvZmZlZSIsIi4vRGFzaGJvYXJkQ29tcG9uZW50LmNvZmZlZSIsIi4vSW5mb0NvbXBvbmVudC5jb2ZmZWUiLCIuL1RpbGVzQ29tcG9uZW50LmNvZmZlZSIsIi4vbW9kYWxzL01vZGFsT3ZlcmxheUNvbXBvbmVudC5jb2ZmZWUiLCJvYmplY3QtYXNzaWduIiwxMSwiSW5mbyIsInVsIiwibGkiLCJwcm9wcyIsIm51bU9mVGlsZXMiLCJudW1PZlVuY2xlYXJlZCIsMTIsIlRpbGUiLCJUaWxlQWN0aW9ucyIsImdldENsYXNzIiwiY2xpY2tIYW5kbGVyIiwic3BhbiIsImdldFRleHQiLCIkZXZlbnQiLCJmbGFnS2V5V2FzUHJlc3NlZCIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiaXNGaXJzdENvbHVtbiIsImhhc0JlZW5GbGFnZ2VkIiwiaGFzQmVlbkNsZWFyZWQiLCJoYXNNaW5lIiwic2hvdWxkRGlzcGxheU1pbmUiLCJoYXNaZXJvQWRqYWNlbnRNaW5lcyIsImpvaW4iLCIuLi9hY3Rpb25zL1RpbGVBY3Rpb25zLmNvZmZlZSIsMTMsIlRpbGVDb21wb25lbnQiLCJUaWxlcyIsIl90aGlzIiwiaXRlbSIsImluZGV4IiwiLi9UaWxlQ29tcG9uZW50LmNvZmZlZSIsMTQsIk1vZGFsT3ZlcmxheSIsImNsYXNzZXMiLCJidXR0b24iLCJjb250cm9scyIsImRlc2NyaXB0aW9uIiwiLi4vLi4vYWN0aW9ucy9Nb2RhbEFjdGlvbnMuY29mZmVlIiwxNSwiZ2V0VGl0bGVUZXh0IiwiY2xpY2tIYW5kbGVyTmV3R2FtZSIsImNsaWNrSGFuZGxlckV4aXRNb2RhbCIsInJlbmRlckJ1dHRvbnMiLCJidXR0b25zIiwidGl0bGUiLCIuLi8uLi9hY3Rpb25zL1RpbGVzQWN0aW9ucy5jb2ZmZWUiLDE2LCJJbnN0cnVjdGlvbnNDb21wb25lbnQiLCJOZXdHYW1lQ29tcG9uZW50IiwiaW5zdHJ1Y3Rpb25zIiwicmVzZXRIYW5kbGVyIiwiaW5zdHJ1Y3Rpb25zSGFuZGxlciIsIm92ZXJsYXkiLCIuL01vZGFsSW5zdHJ1Y3Rpb25zQ29tcG9uZW50LmNvZmZlZSIsIi4vTW9kYWxOZXdHYW1lQ29tcG9uZW50LmNvZmZlZSIsMTcsIk51bWJlciIsImlzSW50ZWdlciIsInZhbHVlIiwiaXNGaW5pdGUiLCJhdHRyIiwiU3RyaW5nIiwxOCwiRXZlbnRFbWl0dGVyIiwiTW9kYWxzIiwiZW1pdCIsImNhbGxiYWNrIiwib24iLCJyZW1vdmVMaXN0ZW5lciIsIi4uL2NvbGxlY3Rpb25zL01vZGFsc0NvbGxlY3Rpb24uY29mZmVlIiwiZXZlbnRzIiwxOSwid2luZG93IiwiZm9vIiwiLi4vY29sbGVjdGlvbnMvVGlsZXNDb2xsZWN0aW9uLmNvZmZlZSIsMjAsImR1cCIsMjEsIiREaXNwYXRjaGVyX2NhbGxiYWNrcyIsIiREaXNwYXRjaGVyX2lzUGVuZGluZyIsIiREaXNwYXRjaGVyX2lzSGFuZGxlZCIsIiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmciLCIkRGlzcGF0Y2hlcl9wZW5kaW5nUGF5bG9hZCIsImludmFyaWFudCIsIl9sYXN0SUQiLCJfcHJlZml4IiwidW5yZWdpc3RlciIsIndhaXRGb3IiLCJpZHMiLCJpaSIsIiREaXNwYXRjaGVyX2ludm9rZUNhbGxiYWNrIiwicGF5bG9hZCIsIiREaXNwYXRjaGVyX3N0YXJ0RGlzcGF0Y2hpbmciLCIkRGlzcGF0Y2hlcl9zdG9wRGlzcGF0Y2hpbmciLCJpc0Rpc3BhdGNoaW5nIiwiLi9pbnZhcmlhbnQiLDIyLCJjb25kaXRpb24iLCJmb3JtYXQiLCJiIiwiYyIsImQiLCJlcnJvciIsInVuZGVmaW5lZCIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsMjMsIl9ldmVudHMiLCJfbWF4TGlzdGVuZXJzIiwiaXNGdW5jdGlvbiIsImFyZyIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc1VuZGVmaW5lZCIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJzZXRNYXhMaXN0ZW5lcnMiLCJpc05hTiIsIlR5cGVFcnJvciIsImVyIiwiaGFuZGxlciIsImxpc3RlbmVycyIsIkFycmF5Iiwic2xpY2UiLCJhZGRMaXN0ZW5lciIsImxpc3RlbmVyIiwibSIsIm5ld0xpc3RlbmVyIiwid2FybmVkIiwiY29uc29sZSIsInRyYWNlIiwib25jZSIsImciLCJmaXJlZCIsImxpc3QiLCJwb3NpdGlvbiIsInNwbGljZSIsInJlbW92ZUFsbExpc3RlbmVycyIsInJldCIsImxpc3RlbmVyQ291bnQiLCJlbWl0dGVyIiwyNCwyNSwyNiwiVG9PYmplY3QiLCJPYmplY3QiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9tIiwia2V5cyIsInRvIl0sIm1hcHBpbmdz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UCxNQUFBakMsT0FKQSxRckJrMkNNK1QsSUFBSSxTQUFTdlUsUUFBUVUsT0FBT0osU0FDbENpRixVQUFVLEdBQUcsSUFBSSxHQUFHRCxNQUFNaEYsUUFBUWlGLGFBQy9CaU0sY0FBYyxHQUFHbkIsSUFBTSxLQUFLbUUsSUFBSSxTQUFTeFUsUUFBUVUsT0FBT0osU0FDM0RpRixVQUFVLEdBQUcsSUFBSSxHQUFHRCxNQUFNaEYsUUFBUWlGLGFBQy9COEssSUFBTSxLQUFLb0UsSUFBSSxTQUFTelUsUUFBUVUsT0FBT0osU3NCNW5EMUMsWUFFQSxTQUFBb1UsVUFBQWxNLEtBQ0EsR0FBQSxNQUFBQSxJQUNBLEtBQUEsSUFBQXdLLFdBQUEsd0RBR0EsT0FBQTJCLFFBQUFuTSxLQUdBOUgsT0FBQUosUUFBQXFVLE9BQUE5SyxRQUFBLFNBQUErSyxPQUFBQyxRQUtBLElBQUEsR0FKQUMsTUFDQUMsS0FDQUMsR0FBQU4sU0FBQUUsUUFFQWhWLEVBQUEsRUFBQUEsRUFBQTJGLFVBQUEvRSxPQUFBWixJQUFBLENBQ0FrVixLQUFBdlAsVUFBQTNGLEdBQ0FtVixLQUFBSixPQUFBSSxLQUFBSixPQUFBRyxNQUVBLEtBQUEsR0FBQTdVLEdBQUEsRUFBQUEsRUFBQThVLEtBQUF2VSxPQUFBUCxJQUNBK1UsR0FBQUQsS0FBQTlVLElBQUE2VSxLQUFBQyxLQUFBOVUsSUFJQSxNQUFBK1UsZXRCZ29EVyxFQUFFIiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBHYW1lQ29tcG9uZW50LCBWaWV3Q29udHJvbGxlcjtcblxuICBHYW1lQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL0dhbWVDb21wb25lbnQuY29mZmVlJyk7XG5cbiAgVmlld0NvbnRyb2xsZXIgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEdhbWVDb21wb25lbnQsIG51bGwpO1xuXG4gIFJlYWN0LnJlbmRlcihWaWV3Q29udHJvbGxlciwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pbmVzd2VlcGVyJykpO1xuXG59KS5jYWxsKHRoaXMpO1xuIixudWxsLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMuRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vbGliL0Rpc3BhdGNoZXInKVxuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgQXBwRGlzcGF0Y2hlciwgRGlzcGF0Y2hlciwgTW9kYWxTdG9yZSwgVGlsZVN0b3JlLCBjaGFuZ2VNb2RhbCwgb25UaWxlc0NoYW5nZTtcblxuICBEaXNwYXRjaGVyID0gcmVxdWlyZSgnRmx1eCcpLkRpc3BhdGNoZXI7XG5cbiAgQXBwRGlzcGF0Y2hlciA9IG5ldyBEaXNwYXRjaGVyKCk7XG5cbiAgVGlsZVN0b3JlID0gcmVxdWlyZSgnLi9zdG9yZXMvVGlsZVN0b3JlLmNvZmZlZScpO1xuXG4gIE1vZGFsU3RvcmUgPSByZXF1aXJlKCcuL3N0b3Jlcy9Nb2RhbFN0b3JlLmNvZmZlZScpO1xuXG4gIGNoYW5nZU1vZGFsID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgTW9kYWxTdG9yZS5yZXNldCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBNb2RhbFN0b3JlLnRvZ2dsZShuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIE1vZGFsU3RvcmUuZW1pdENoYW5nZSgpO1xuICB9O1xuXG4gIG9uVGlsZXNDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5mbztcbiAgICBpbmZvID0gVGlsZVN0b3JlLmdldEluZm8oKTtcbiAgICBpZiAoaW5mby53aW4gfHwgaW5mby5sb3NzKSB7XG4gICAgICBNb2RhbEFjdGlvbnMudG9nZ2xlKCduZXdHYW1lJyk7XG4gICAgfVxuICAgIHJldHVybiBUaWxlU3RvcmUuZW1pdENoYW5nZSgpO1xuICB9O1xuXG4gIEFwcERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgdGlsZTtcbiAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgIGNhc2UgJ1RJTEVfRkxBR19UT0dHTEUnOlxuICAgICAgICB0aWxlID0gVGlsZVN0b3JlLmdldCh7XG4gICAgICAgICAgdWlkOiBldmVudC51aWRcbiAgICAgICAgfSk7XG4gICAgICAgIHRpbGUudG9nZ2xlRmxhZygpO1xuICAgICAgICByZXR1cm4gb25UaWxlc0NoYW5nZSgpO1xuICAgICAgY2FzZSAnVElMRV9DTEVBUic6XG4gICAgICAgIHRpbGUgPSBUaWxlU3RvcmUuZ2V0KHtcbiAgICAgICAgICB1aWQ6IGV2ZW50LnVpZFxuICAgICAgICB9KTtcbiAgICAgICAgdGlsZS5jbGVhcigpO1xuICAgICAgICByZXR1cm4gb25UaWxlc0NoYW5nZSgpO1xuICAgICAgY2FzZSAnVElMRVNfQ0xFQVJfU0FGRV9SQU5ET00nOlxuICAgICAgICB0aWxlID0gVGlsZVN0b3JlLnJhbmRvbVNhZmVUaWxlKCk7XG4gICAgICAgIGlmICh0aWxlKSB7XG4gICAgICAgICAgdGlsZS5jbGVhcigpO1xuICAgICAgICAgIHJldHVybiBvblRpbGVzQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdUSUxFU19ORVdfR0FNRSc6XG4gICAgICAgIFRpbGVTdG9yZS5uZXdHYW1lKDgsIDQsIDEwKTtcbiAgICAgICAgb25UaWxlc0NoYW5nZSgpO1xuICAgICAgICByZXR1cm4gY2hhbmdlTW9kYWwoJ25ld0dhbWUnKTtcbiAgICAgIGNhc2UgJ01PREFMX1RPR0dMRSc6XG4gICAgICAgIE1vZGFsU3RvcmUudG9nZ2xlKGV2ZW50Lm5hbWUpO1xuICAgICAgICByZXR1cm4gTW9kYWxTdG9yZS5lbWl0Q2hhbmdlKCk7XG4gICAgICBjYXNlICdNT0RBTF9SRVNFVCc6XG4gICAgICAgIHJldHVybiBjaGFuZ2VNb2RhbCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBBcHBEaXNwYXRjaGVyO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGlzcGF0Y2hlcjtcblxuICBEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vRGlzcGF0Y2hlci5jb2ZmZWUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB0b2dnbGU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiBEaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ01PREFMX1RPR0dMRScsXG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnTU9EQUxfUkVTRVQnXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEaXNwYXRjaGVyO1xuXG4gIERpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9EaXNwYXRjaGVyLmNvZmZlZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHRvZ2dsZUZsYWc6IGZ1bmN0aW9uKHVpZCkge1xuICAgICAgcmV0dXJuIERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnVElMRV9GTEFHX1RPR0dMRScsXG4gICAgICAgIHVpZDogdWlkXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNsZWFyOiBmdW5jdGlvbih1aWQpIHtcbiAgICAgIHJldHVybiBEaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1RJTEVfQ0xFQVInLFxuICAgICAgICB1aWQ6IHVpZFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGlzcGF0Y2hlcjtcblxuICBEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vRGlzcGF0Y2hlci5jb2ZmZWUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjbGVhclNhZmVSYW5kb21UaWxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1RJTEVTX0NMRUFSX1NBRkVfUkFORE9NJ1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBuZXdHYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1RJTEVTX05FV19HQU1FJ1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgTW9kYWxzQ29sbGVjdGlvbjtcblxuICBNb2RhbHNDb2xsZWN0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIE1vZGFsc0NvbGxlY3Rpb24oKSB7XG4gICAgICB0aGlzLnNob3cgPSB7fTtcbiAgICB9XG5cbiAgICBNb2RhbHNDb2xsZWN0aW9uLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihmaWxlTmFtZSkge1xuICAgICAgdGhpcy5zaG93W2ZpbGVOYW1lXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIE1vZGFsc0NvbGxlY3Rpb24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBpc0JlaW5nU2hvd24sIG1vZGFsTmFtZSwgcmVmLCByZXN1bHRzO1xuICAgICAgcmVmID0gdGhpcy5zaG93O1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChtb2RhbE5hbWUgaW4gcmVmKSB7XG4gICAgICAgIGlzQmVpbmdTaG93biA9IHJlZlttb2RhbE5hbWVdO1xuICAgICAgICBpZiAobW9kYWxOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuc2hvd1ttb2RhbE5hbWVdID0gIWlzQmVpbmdTaG93bik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGlzQmVpbmdTaG93biA9IGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIE1vZGFsc0NvbGxlY3Rpb24ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5LCByZWYsIHNob3dNb2RhbDtcbiAgICAgIHJlZiA9IHRoaXMuc2hvdztcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBzaG93TW9kYWwgPSByZWZba2V5XTtcbiAgICAgICAgdGhpcy5zaG93W2tleV0gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICByZXR1cm4gTW9kYWxzQ29sbGVjdGlvbjtcblxuICB9KSgpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gTW9kYWxzQ29sbGVjdGlvbjtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIFRpbGVNb2RlbCwgVGlsZXNDb2xsZWN0aW9uLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgVGlsZU1vZGVsID0gcmVxdWlyZSgnLi4vbW9kZWxzL1RpbGVNb2RlbC5jb2ZmZWUnKTtcblxuICBUaWxlc0NvbGxlY3Rpb24gPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVGlsZXNDb2xsZWN0aW9uKCkge1xuICAgICAgdmFyIE1vZGVsLCBjb2xsZWN0aW9uO1xuICAgICAgdGhpcy5hbGwgPSBbXTtcbiAgICAgIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgdGhpcy5tb2RlbCA9IE1vZGVsID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICAgICAgZXh0ZW5kKE1vZGVsLCBzdXBlckNsYXNzKTtcblxuICAgICAgICBmdW5jdGlvbiBNb2RlbCgpIHtcbiAgICAgICAgICByZXR1cm4gTW9kZWwuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICBNb2RlbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBNb2RlbC5fX3N1cGVyX18uY2xlYXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uLmNsZWFyTmVpZ2hib3JzKHRoaXMpO1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLm1vdmVVcGRhdGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBNb2RlbC5wcm90b3R5cGUudG9nZ2xlRmxhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIE1vZGVsLl9fc3VwZXJfXy50b2dnbGVGbGFnLmNhbGwodGhpcyk7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24ubW92ZVVwZGF0ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBNb2RlbDtcblxuICAgICAgfSkoVGlsZU1vZGVsKTtcbiAgICB9XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLm5ld0dhbWUgPSBmdW5jdGlvbih4LCB5LCBtaW5lcykge1xuICAgICAgdmFyIGF0dHJzLCBpLCBqLCBrLCBtaW5lTnVtLCByZWYsIHJlZjEsIHJlZjIsIHRpbGU7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB0aGlzLnNpemVYID0geDtcbiAgICAgIHRoaXMuc2l6ZVkgPSB5O1xuICAgICAgdGhpcy5udW1PZk1pbmVzID0gbWluZXM7XG4gICAgICBmb3IgKHkgPSBpID0gMCwgcmVmID0gdGhpcy5zaXplWSAtIDE7IDAgPD0gcmVmID8gaSA8PSByZWYgOiBpID49IHJlZjsgeSA9IDAgPD0gcmVmID8gKytpIDogLS1pKSB7XG4gICAgICAgIGZvciAoeCA9IGogPSAwLCByZWYxID0gdGhpcy5zaXplWCAtIDE7IDAgPD0gcmVmMSA/IGogPD0gcmVmMSA6IGogPj0gcmVmMTsgeCA9IDAgPD0gcmVmMSA/ICsraiA6IC0taikge1xuICAgICAgICAgIGF0dHJzID0ge1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHlcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuYWRkKGF0dHJzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChtaW5lTnVtID0gayA9IDEsIHJlZjIgPSB0aGlzLm51bU9mTWluZXM7IDEgPD0gcmVmMiA/IGsgPD0gcmVmMiA6IGsgPj0gcmVmMjsgbWluZU51bSA9IDEgPD0gcmVmMiA/ICsrayA6IC0taykge1xuICAgICAgICB0aWxlID0gdGhpcy5yYW5kb21TYWZlVGlsZSgpO1xuICAgICAgICB0aWxlLm1vZGVsLmlzTWluZSA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLnRhbGx5TWluZXMoKTtcbiAgICAgIHJldHVybiB0aGlzLmdhbWVVcGRhdGUoKTtcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5ub01pbmVGaXJzdENsaWNrID0gZnVuY3Rpb24odGlsZSkge1xuICAgICAgaWYgKHRoaXMubnVtT2ZDbGVhcnMgPT09IDAgJiYgdGlsZS5tb2RlbC5pc01pbmUgPT09IHRydWUpIHtcbiAgICAgICAgdGlsZS5tb2RlbC5pc01pbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yYW5kb21TYWZlVGlsZSgpLm1vZGVsLmlzTWluZSA9IHRydWU7XG4gICAgICAgIHRoaXMudGFsbHlNaW5lcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRpbGU7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgIHZhciB0aWxlO1xuICAgICAgdGlsZSA9IG5ldyB0aGlzLm1vZGVsKG1vZGVsKTtcbiAgICAgIHRoaXMuYWxsLnB1c2godGlsZSk7XG4gICAgICByZXR1cm4gdGlsZTtcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5hbGwgPSBbXTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLnJhbmRvbVNhZmVUaWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZmluZEF0dHJzLCByYW5kb21JbmRleCwgc2FmZVRpbGVzO1xuICAgICAgZmluZEF0dHJzID0ge1xuICAgICAgICBpc0NsZWFyOiBmYWxzZSxcbiAgICAgICAgaXNNaW5lOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHNhZmVUaWxlcyA9IHRoaXMuZ2V0QWxsKGZpbmRBdHRycyk7XG4gICAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNhZmVUaWxlcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHNhZmVUaWxlc1tyYW5kb21JbmRleF07XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUudGFsbHlNaW5lcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFkamFjZW50VGlsZSwgaSwgaiwgbGVuLCBsZW4xLCBuZWlnaGJvckF0dHJzLCBuZWlnaGJvck1pbmUsIG5laWdoYm9yTWluZXMsIG5laWdoYm9yWCwgbmVpZ2hib3JZLCByZWYsIHJlZjEsIHJlc3VsdHMsIHRpbGU7XG4gICAgICByZWYgPSB0aGlzLmFsbDtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aWxlID0gcmVmW2ldO1xuICAgICAgICBuZWlnaGJvck1pbmVzID0gMDtcbiAgICAgICAgcmVmMSA9IHRpbGUuYWRqYWNlbnRUaWxlcztcbiAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgYWRqYWNlbnRUaWxlID0gcmVmMVtqXTtcbiAgICAgICAgICBuZWlnaGJvclggPSB0aWxlLm1vZGVsLnggKyBhZGphY2VudFRpbGVbMF07XG4gICAgICAgICAgbmVpZ2hib3JZID0gdGlsZS5tb2RlbC55ICsgYWRqYWNlbnRUaWxlWzFdO1xuICAgICAgICAgIG5laWdoYm9yQXR0cnMgPSB7XG4gICAgICAgICAgICBpc01pbmU6IHRydWUsXG4gICAgICAgICAgICB4OiBuZWlnaGJvclgsXG4gICAgICAgICAgICB5OiBuZWlnaGJvcllcbiAgICAgICAgICB9O1xuICAgICAgICAgIG5laWdoYm9yTWluZSA9IHRoaXMuZ2V0KG5laWdoYm9yQXR0cnMpO1xuICAgICAgICAgIGlmIChuZWlnaGJvck1pbmUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbmVpZ2hib3JNaW5lcysrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRzLnB1c2godGlsZS5tb2RlbC5hZGphY2VudE1pbmVzID0gbmVpZ2hib3JNaW5lcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5nYW1lVXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbGVuLCByZWYsIHRpbGU7XG4gICAgICB0aGlzLnggPSBNYXRoLm1heC5hcHBseSh0aGlzLCB0aGlzLmFsbC5tYXAoZnVuY3Rpb24odGlsZSkge1xuICAgICAgICByZXR1cm4gdGlsZS5tb2RlbC54O1xuICAgICAgfSkpO1xuICAgICAgdGhpcy55ID0gTWF0aC5tYXguYXBwbHkodGhpcywgdGhpcy5hbGwubWFwKGZ1bmN0aW9uKHRpbGUpIHtcbiAgICAgICAgcmV0dXJuIHRpbGUubW9kZWwueTtcbiAgICAgIH0pKTtcbiAgICAgIHRoaXMueCA9IHRoaXMueC0tO1xuICAgICAgdGhpcy55ID0gdGhpcy55LS07XG4gICAgICB0aGlzLm51bU9mTWluZXMgPSAwO1xuICAgICAgcmVmID0gdGhpcy5hbGw7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGlsZSA9IHJlZltpXTtcbiAgICAgICAgaWYgKHRpbGUubW9kZWwuaXNNaW5lID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5udW1PZk1pbmVzKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1vdmVVcGRhdGUoKTtcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5tb3ZlVXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbGVuLCByZWYsIHRpbGU7XG4gICAgICB0aGlzLmxvc3MgPSBmYWxzZTtcbiAgICAgIHRoaXMud2luID0gZmFsc2U7XG4gICAgICB0aGlzLm51bU9mQ2xlYXJzID0gMDtcbiAgICAgIHRoaXMubnVtT2ZGbGFncyA9IDA7XG4gICAgICByZWYgPSB0aGlzLmFsbDtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aWxlID0gcmVmW2ldO1xuICAgICAgICBpZiAodGlsZS5tb2RlbC5pc0NsZWFyID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5udW1PZkNsZWFycysrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aWxlLm1vZGVsLmlzRmxhZ2dlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMubnVtT2ZGbGFncysrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aWxlLm1vZGVsLmlzTWluZSA9PT0gdHJ1ZSAmJiB0aWxlLm1vZGVsLmlzQ2xlYXIgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLmxvc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5sb3NzID09PSBmYWxzZSAmJiB0aGlzLmFsbC5sZW5ndGggLSB0aGlzLm51bU9mTWluZXMgLSB0aGlzLm51bU9mQ2xlYXJzID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpbiA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuY2xlYXJOZWlnaGJvcnMgPSBmdW5jdGlvbih0aWxlKSB7XG4gICAgICB2YXIgYWRqYWNlbnRUaWxlLCBpLCBsZW4sIG5laWdoYm9yLCByZWYsIHJlc3VsdHMsIHNob3VsZENsZWFyTmVpZ2hib3IsIHNob3VsZENsZWFyTmVpZ2hib3JzO1xuICAgICAgc2hvdWxkQ2xlYXJOZWlnaGJvcnMgPSB0aWxlLm1vZGVsLmFkamFjZW50TWluZXMgPT09IDAgJiYgdGlsZS5tb2RlbC5pc01pbmUgPT09IGZhbHNlO1xuICAgICAgaWYgKHNob3VsZENsZWFyTmVpZ2hib3JzKSB7XG4gICAgICAgIHJlZiA9IHRpbGUuYWRqYWNlbnRUaWxlcztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBhZGphY2VudFRpbGUgPSByZWZbaV07XG4gICAgICAgICAgbmVpZ2hib3IgPSB0aGlzLmdldCh7XG4gICAgICAgICAgICB4OiB0aWxlLm1vZGVsLnggKyBhZGphY2VudFRpbGVbMF0sXG4gICAgICAgICAgICB5OiB0aWxlLm1vZGVsLnkgKyBhZGphY2VudFRpbGVbMV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzaG91bGRDbGVhck5laWdoYm9yID0gbmVpZ2hib3IgJiYgbmVpZ2hib3IubW9kZWwuaXNDbGVhciA9PT0gZmFsc2UgJiYgbmVpZ2hib3IubW9kZWwuaXNNaW5lID09PSBmYWxzZTtcbiAgICAgICAgICBpZiAoc2hvdWxkQ2xlYXJOZWlnaGJvcikge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG5laWdoYm9yLmNsZWFyKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oYXR0cnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEFsbChhdHRycylbMF07XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24oYXR0cnMpIHtcbiAgICAgIHZhciBpLCBrZXksIGxlbiwgbWF0Y2hlcywgbnVtT2ZBdHRycywgbnVtT2ZNYXRjaGVkQXR0cnMsIHJlZiwgdGlsZSwgdmFsO1xuICAgICAgbWF0Y2hlcyA9IFtdO1xuICAgICAgaWYgKCFhdHRycykge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGw7XG4gICAgICB9XG4gICAgICByZWYgPSB0aGlzLmFsbDtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aWxlID0gcmVmW2ldO1xuICAgICAgICBudW1PZkF0dHJzID0gMDtcbiAgICAgICAgbnVtT2ZNYXRjaGVkQXR0cnMgPSAwO1xuICAgICAgICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgICAgICAgIHZhbCA9IGF0dHJzW2tleV07XG4gICAgICAgICAgbnVtT2ZBdHRycysrO1xuICAgICAgICAgIGlmICh0aWxlLm1vZGVsW2tleV0gPT09IHZhbCkge1xuICAgICAgICAgICAgbnVtT2ZNYXRjaGVkQXR0cnMrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bU9mTWF0Y2hlZEF0dHJzID09PSBudW1PZkF0dHJzKSB7XG4gICAgICAgICAgbWF0Y2hlcy5wdXNoKHRpbGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRpbGVzQ29sbGVjdGlvbjtcblxuICB9KSgpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gVGlsZXNDb2xsZWN0aW9uO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGFzaGJvYXJkLCBNb2RhbEFjdGlvbnMsIFIsIFRpbGVzQWN0aW9ucztcblxuICBNb2RhbEFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL01vZGFsQWN0aW9ucy5jb2ZmZWUnKTtcblxuICBUaWxlc0FjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL1RpbGVzQWN0aW9ucy5jb2ZmZWUnKTtcblxuICBSID0gUmVhY3QuRE9NO1xuXG4gIERhc2hib2FyZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0Rhc2hib2FyZCcsXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBSLmRpdih7XG4gICAgICAgIGlkOiAnZGFzaGJvYXJkJ1xuICAgICAgfSwgW1xuICAgICAgICBSLmRpdih7XG4gICAgICAgICAga2V5OiAnbmV3LWdhbWUnLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ25ldy1nYW1lIGJ1dHRvbicsXG4gICAgICAgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gTW9kYWxBY3Rpb25zLnRvZ2dsZSgnbmV3R2FtZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgJ25ldyBnYW1lJyksIFIuZGl2KHtcbiAgICAgICAgICBrZXk6ICdzZWxlY3QtdGlsZScsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnc2VsZWN0LXRpbGUgYnV0dG9uJyxcbiAgICAgICAgICBvbkNsaWNrOiBUaWxlc0FjdGlvbnMuY2xlYXJTYWZlUmFuZG9tVGlsZVxuICAgICAgICB9LCAnY2xlYXIgYSBzYWZlIHRpbGUnKSwgUi5kaXYoe1xuICAgICAgICAgIGtleTogJ2luc3RydWN0aW9ucycsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnaW5zdHJ1Y3Rpb25zIGJ1dHRvbicsXG4gICAgICAgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gTW9kYWxBY3Rpb25zLnRvZ2dsZSgnaW5zdHJ1Y3Rpb25zJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAnaW5zdHJ1Y3Rpb25zJylcbiAgICAgIF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBEYXNoYm9hcmQ7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEYXNoYm9hcmRDb21wb25lbnQsIERpc3BhdGNoZXIsIEdhbWUsIEluZm9Db21wb25lbnQsIE1vZGFsQWN0aW9ucywgTW9kYWxPdmVybGF5Q29tcG9uZW50LCBNb2RhbFN0b3JlLCBSLCBUaWxlU3RvcmUsIFRpbGVzQ29tcG9uZW50LCBhc3NpZ24sIGdldE1vZGFsU3RvcmVTdGF0ZSwgZ2V0U3RhdGUsIGdldFRpbGVTdG9yZVN0YXRlO1xuXG4gIERpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9EaXNwYXRjaGVyLmNvZmZlZScpO1xuXG4gIFRpbGVTdG9yZSA9IHJlcXVpcmUoJy4uL3N0b3Jlcy9UaWxlU3RvcmUuY29mZmVlJyk7XG5cbiAgTW9kYWxTdG9yZSA9IHJlcXVpcmUoJy4uL3N0b3Jlcy9Nb2RhbFN0b3JlLmNvZmZlZScpO1xuXG4gIE1vZGFsQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvTW9kYWxBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFRpbGVzQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9UaWxlc0NvbXBvbmVudC5jb2ZmZWUnKTtcblxuICBJbmZvQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9JbmZvQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIERhc2hib2FyZENvbXBvbmVudCA9IHJlcXVpcmUoJy4vRGFzaGJvYXJkQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIE1vZGFsT3ZlcmxheUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vbW9kYWxzL01vZGFsT3ZlcmxheUNvbXBvbmVudC5jb2ZmZWUnKTtcblxuICBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbiAgUiA9IFJlYWN0LkRPTTtcblxuICBnZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhc3NpZ24oe30sIGdldFRpbGVTdG9yZVN0YXRlKCksIGdldE1vZGFsU3RvcmVTdGF0ZSgpKTtcbiAgfTtcblxuICBnZXRUaWxlU3RvcmVTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbGw6IFRpbGVTdG9yZS5nZXRBbGwoKSxcbiAgICAgIGluZm86IFRpbGVTdG9yZS5nZXRJbmZvKClcbiAgICB9O1xuICB9O1xuXG4gIGdldE1vZGFsU3RvcmVTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtb2RhbHM6IE1vZGFsU3RvcmUuZ2V0QWxsKClcbiAgICB9O1xuICB9O1xuXG4gIEdhbWUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdHYW1lJyxcbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldFN0YXRlKCk7XG4gICAgfSxcbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICBUaWxlU3RvcmUuYWRkQ2hhbmdlTGlzdGVuZXIodGhpcy5fb25UaWxlU3RvcmVDaGFuZ2UpO1xuICAgICAgcmV0dXJuIE1vZGFsU3RvcmUuYWRkQ2hhbmdlTGlzdGVuZXIodGhpcy5fb25Nb2RhbFN0b3JlQ2hhbmdlKTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIFRpbGVTdG9yZS5yZW1vdmVDaGFuZ2VMaXN0ZW5lcih0aGlzLl9vblRpbGVTdG9yZUNoYW5nZSk7XG4gICAgICByZXR1cm4gTW9kYWxTdG9yZS5yZW1vdmVDaGFuZ2VMaXN0ZW5lcih0aGlzLl9vbk1vZGFsU3RvcmVDaGFuZ2UpO1xuICAgIH0sXG4gICAgX29uVGlsZVN0b3JlQ2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0aWxlc1N0YXRlO1xuICAgICAgdGlsZXNTdGF0ZSA9IGdldFRpbGVTdG9yZVN0YXRlKCk7XG4gICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh0aWxlc1N0YXRlKTtcbiAgICB9LFxuICAgIF9vbk1vZGFsU3RvcmVDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoZ2V0TW9kYWxTdG9yZVN0YXRlKCkpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBib2FyZFdyYXBwcGVyLCBkYXNoYm9hcmQsIGluZm8sIG92ZXJsYXlzLCB0aWxlcztcbiAgICAgIGluZm8gPSBSZWFjdC5jcmVhdGVFbGVtZW50KEluZm9Db21wb25lbnQsIHtcbiAgICAgICAga2V5OiAnaW5mbycsXG4gICAgICAgIGluZm86IHRoaXMuc3RhdGUuaW5mb1xuICAgICAgfSk7XG4gICAgICB0aWxlcyA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGlsZXNDb21wb25lbnQsIHtcbiAgICAgICAga2V5OiAndGlsZXMnLFxuICAgICAgICB0aWxlczogdGhpcy5zdGF0ZS5hbGxcbiAgICAgIH0pO1xuICAgICAgYm9hcmRXcmFwcHBlciA9IFIuZGl2KHtcbiAgICAgICAgaWQ6ICdib2FyZC13cmFwcHBlcicsXG4gICAgICAgIGtleTogJ2JvYXJkLXdyYXBwcGVyJ1xuICAgICAgfSwgW2luZm8sIHRpbGVzXSk7XG4gICAgICBkYXNoYm9hcmQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KERhc2hib2FyZENvbXBvbmVudCwge1xuICAgICAgICBrZXk6ICdkYXNoYm9hcmQnXG4gICAgICB9KTtcbiAgICAgIG92ZXJsYXlzID0gUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbE92ZXJsYXlDb21wb25lbnQsIHtcbiAgICAgICAga2V5OiAnbW9kYWwtb3ZlcmxheScsXG4gICAgICAgIGluZm86IHRoaXMuc3RhdGUuaW5mbyxcbiAgICAgICAgbW9kYWxzOiB0aGlzLnN0YXRlLm1vZGFsc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gUi5kaXYobnVsbCwgW292ZXJsYXlzLCBib2FyZFdyYXBwcGVyLCBkYXNoYm9hcmRdKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gR2FtZTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEluZm8sIFI7XG5cbiAgUiA9IFJlYWN0LkRPTTtcblxuICBJbmZvID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnSW5mbycsXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBSLnVsKHtcbiAgICAgICAgaWQ6ICdzdGF0cydcbiAgICAgIH0sIFtcbiAgICAgICAgUi5saSh7XG4gICAgICAgICAga2V5OiAndGlsZXMnXG4gICAgICAgIH0sIHRoaXMucHJvcHMuaW5mby5udW1PZlRpbGVzICsgXCIgdGlsZXNcIiksIFIubGkoe1xuICAgICAgICAgIGtleTogJ21pbmVzJ1xuICAgICAgICB9LCB0aGlzLnByb3BzLmluZm8ubnVtT2ZNaW5lcyArIFwiIG1pbmVzXCIpLCBSLmxpKHtcbiAgICAgICAgICBrZXk6ICdmbGFnZ2VkJ1xuICAgICAgICB9LCB0aGlzLnByb3BzLmluZm8ubnVtT2ZGbGFncyArIFwiIGZsYWdnZWQgdGlsZXNcIiksIFIubGkoe1xuICAgICAgICAgIGtleTogJ2NsZWFyZWQnXG4gICAgICAgIH0sIHRoaXMucHJvcHMuaW5mby5udW1PZlVuY2xlYXJlZCArIFwiIGxlZnQgdG8gY2xlYXJcIilcbiAgICAgIF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBJbmZvO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgUiwgVGlsZSwgVGlsZUFjdGlvbnM7XG5cbiAgVGlsZUFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL1RpbGVBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgVGlsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ1RpbGUnLFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUi5saSh7XG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5nZXRDbGFzcygpLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmNsaWNrSGFuZGxlclxuICAgICAgfSwgUi5zcGFuKG51bGwsIHRoaXMuZ2V0VGV4dCgpKSk7XG4gICAgfSxcbiAgICBjbGlja0hhbmRsZXI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgdmFyIGZsYWdLZXlXYXNQcmVzc2VkO1xuICAgICAgaWYgKCEkZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIFRpbGVBY3Rpb25zLmNsZWFyKHRoaXMucHJvcHMudGlsZS5tb2RlbC51aWQpO1xuICAgICAgfVxuICAgICAgZmxhZ0tleVdhc1ByZXNzZWQgPSAkZXZlbnQuc2hpZnRLZXkgPT09IHRydWUgfHwgJGV2ZW50LmFsdEtleSA9PT0gdHJ1ZTtcbiAgICAgIGlmIChmbGFnS2V5V2FzUHJlc3NlZCkge1xuICAgICAgICByZXR1cm4gVGlsZUFjdGlvbnMudG9nZ2xlRmxhZyh0aGlzLnByb3BzLnRpbGUubW9kZWwudWlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBUaWxlQWN0aW9ucy5jbGVhcih0aGlzLnByb3BzLnRpbGUubW9kZWwudWlkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzRmlyc3RDb2x1bW46IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGlsZS5tb2RlbC54ID09PSAwO1xuICAgIH0sXG4gICAgaGFzQmVlbkZsYWdnZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGlsZS5tb2RlbC5pc0NsZWFyICE9PSB0cnVlICYmIHRoaXMucHJvcHMudGlsZS5tb2RlbC5pc0ZsYWdnZWQgPT09IHRydWU7XG4gICAgfSxcbiAgICBoYXNCZWVuQ2xlYXJlZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy50aWxlLm1vZGVsLmlzQ2xlYXIgPT09IHRydWU7XG4gICAgfSxcbiAgICBoYXNNaW5lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpbGUubW9kZWwuaXNNaW5lID09PSB0cnVlO1xuICAgIH0sXG4gICAgc2hvdWxkRGlzcGxheU1pbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzTWluZSgpICYmIHRoaXMuaGFzQmVlbkNsZWFyZWQoKTtcbiAgICB9LFxuICAgIGhhc1plcm9BZGphY2VudE1pbmVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcyA9PT0gMCAmJiAhdGhpcy5oYXNNaW5lKCk7XG4gICAgfSxcbiAgICBnZXRUZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0ZXh0O1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGlsZS5tb2RlbC54ICsgJycgKyB0aGlzLnByb3BzLnRpbGUubW9kZWwueTtcbiAgICAgIHRleHQgPSB0aGlzLnByb3BzLnRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcztcbiAgICAgIGlmICh0aGlzLmhhc0JlZW5GbGFnZ2VkKCkpIHtcbiAgICAgICAgdGV4dCA9ICc/JztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zaG91bGREaXNwbGF5TWluZSgpKSB7XG4gICAgICAgIHRleHQgPSAnWCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9LFxuICAgIGdldENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbJ3RpbGUnLCB0aGlzLmlzRmlyc3RDb2x1bW4oKSA/ICdudGgnIDogdm9pZCAwLCB0aGlzLmhhc0JlZW5DbGVhcmVkKCkgPyAnY2xlYXInIDogdm9pZCAwLCB0aGlzLmhhc0JlZW5GbGFnZ2VkKCkgPyAnZmxhZ2dlZCcgOiB2b2lkIDAsIHRoaXMuc2hvdWxkRGlzcGxheU1pbmUoKSA/ICdtaW5lJyA6IHZvaWQgMCwgdGhpcy5oYXNaZXJvQWRqYWNlbnRNaW5lcygpID8gJ2NsZWFyIHplcm8nIDogdm9pZCAwXS5qb2luKCcgJyk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBSLCBUaWxlQ29tcG9uZW50LCBUaWxlcztcblxuICBUaWxlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9UaWxlQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgVGlsZXMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdUaWxlcycsXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0aWxlcztcbiAgICAgIHRpbGVzID0gdGhpcy5wcm9wcy50aWxlcy5tYXAoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICByZWY6IGl0ZW0ubW9kZWwudWlkLFxuICAgICAgICAgICAgdGlsZTogaXRlbVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgcmV0dXJuIFIudWwoe1xuICAgICAgICBpZDogJ2JvYXJkJ1xuICAgICAgfSwgdGlsZXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaWxlcztcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIE1vZGFsQWN0aW9ucywgTW9kYWxPdmVybGF5LCBSO1xuXG4gIE1vZGFsQWN0aW9ucyA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvTW9kYWxBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgTW9kYWxPdmVybGF5ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnTW9kYWxJbnN0cnVjdGlvbnMnLFxuICAgIGdldENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjbGFzc2VzO1xuICAgICAgY2xhc3NlcyA9IFsnbWVzc2FnZSddO1xuICAgICAgaWYgKCF0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdoaWRlJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG4gICAgfSxcbiAgICBjbGlja0hhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1vZGFsQWN0aW9ucy50b2dnbGUoJ2luc3RydWN0aW9ucycpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBidXR0b24sIGNvbnRyb2xzLCBkZXNjcmlwdGlvbjtcbiAgICAgIGRlc2NyaXB0aW9uID0gUi5kaXYoe1xuICAgICAgICBrZXk6ICdpbnN0cnVjdGlvbnMtZGVzY3JpcHRpb24nXG4gICAgICB9LCBbXG4gICAgICAgIFIuZGl2KHtcbiAgICAgICAgICBrZXk6ICdpbnN0cnVjdGlvbnMtaGVhZGVyJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdib3JkZXItYm90dG9tJ1xuICAgICAgICB9LCAnaG93IHRvIHBsYXknKSwgUi5kaXYoe1xuICAgICAgICAgIGtleTogJ2luc3RydWN0aW9ucy1kZXRhaWxzJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdib3JkZXItYm90dG9tJ1xuICAgICAgICB9LCBbJ3RoZSBnYW1lIGlzIHBsYXllZCBieSByZXZlYWxpbmcgdGlsZXMgb2YgdGhlIGdyaWQuJywgJ2lmIGEgc2VsZWN0ZWQgdGlsZSBjb250YWlucyBhIG1pbmUsIHRoZSBwbGF5ZXIgbG9zZXMgdGhlIGdhbWUuJywgJ290aGVyd2lzZSwgYSBkaWdpdCBpcyByZXZlYWxlZCBpbiB0aGUgdGlsZSwgaW5kaWNhdGluZyB0aGUgbnVtYmVyJywgJ29mIG1pbmVzIGxvY2F0ZWQgaW4gdGhlIGVpZ2h0IGFkamFjZW50IHRpbGVzLiddLmpvaW4oJyAnKSksIFIuZGl2KHtcbiAgICAgICAgICBrZXk6ICdpbnN0cnVjdGlvbnMtY2xpY2snXG4gICAgICAgIH0sIFIuc3Bhbih7XG4gICAgICAgICAga2V5OiAnaW5zdHJ1Y3Rpb25zLWNsaWNrLWNvZGUnLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2NvZGUnXG4gICAgICAgIH0sICdjbGljaycpLCBSLnNwYW4oe1xuICAgICAgICAgIGtleTogJ2luc3RydWN0aW9ucy1jbGljay10ZXh0J1xuICAgICAgICB9LCAnIHRvIHJldmVhbCB0aGUgc3F1YXJlcyBvZiB0aGUgZ3JpZC4nKSksIFIuZGl2KHtcbiAgICAgICAgICBrZXk6ICdpbnN0cnVjdGlvbnMtY2xpY2staGludCcsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnYm9yZGVyLWJvdHRvbSdcbiAgICAgICAgfSwgJyh5b3VyIGZpcnN0IGNsaWNrIHdpbGwgbmV2ZXIgbGFuZCBvbiBhIG1pbmUpJylcbiAgICAgIF0pO1xuICAgICAgY29udHJvbHMgPSBSLmRpdih7XG4gICAgICAgIGtleTogJ2luc3RydWN0aW9ucy1jb250cm9scydcbiAgICAgIH0sIFtcbiAgICAgICAgUi5zcGFuKHtcbiAgICAgICAgICBrZXk6ICdpbnN0cnVjdGlvbnMtY29udHJvbHMtY29kZTEnLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2NvZGUnXG4gICAgICAgIH0sICdzaGlmdCArIGNsaWNrJyksIFIuc3Bhbih7XG4gICAgICAgICAga2V5OiAnaW5zdHJ1Y3Rpb25zLWNvbnRyb2xzLXRleHQxJ1xuICAgICAgICB9LCAnIG9yICcpLCBSLnNwYW4oe1xuICAgICAgICAgIGtleTogJ2luc3RydWN0aW9ucy1jb250cm9scy1jb2RlMicsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnY29kZSdcbiAgICAgICAgfSwgJ2FsdCArIGNsaWNrJyksIFIuc3Bhbih7XG4gICAgICAgICAga2V5OiAnaW5zdHJ1Y3Rpb25zLWNvbnRyb2xzLXRleHQyJ1xuICAgICAgICB9LCAnIHdpbGwgXCJmbGFnXCIgYSB0aWxlLCBoZWxwaW5nIHlvdSB0byByZW1lbWJlciB3aGVyZSB5b3UgdGhpbmsgYSBtaW5lIGlzIGhpZGRlbicpXG4gICAgICBdKTtcbiAgICAgIGJ1dHRvbiA9IFIuZGl2KHtcbiAgICAgICAga2V5OiAnaW5zdHJ1Y3Rpb25zLWJ1dHRvbidcbiAgICAgIH0sIFIuZGl2KHtcbiAgICAgICAgY2xhc3NOYW1lOiAnYnV0dG9uJyxcbiAgICAgICAgb25DbGljazogdGhpcy5jbGlja0hhbmRsZXJcbiAgICAgIH0sICdnb3QgaXQhJykpO1xuICAgICAgcmV0dXJuIFIuZGl2KHtcbiAgICAgICAga2V5OiAnaW5zdHJ1Y3Rpb25zLW1vZGFsJyxcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmdldENsYXNzKClcbiAgICAgIH0sIFtkZXNjcmlwdGlvbiwgY29udHJvbHMsIGJ1dHRvbl0pO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBNb2RhbE92ZXJsYXk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBNb2RhbEFjdGlvbnMsIE1vZGFsT3ZlcmxheSwgUiwgVGlsZXNBY3Rpb25zO1xuXG4gIE1vZGFsQWN0aW9ucyA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvTW9kYWxBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFRpbGVzQWN0aW9ucyA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvVGlsZXNBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgTW9kYWxPdmVybGF5ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnTW9kYWxOZXdHYW1lJyxcbiAgICBnZXRDbGFzczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2xhc3NlcztcbiAgICAgIGNsYXNzZXMgPSBbJ21lc3NhZ2UnXTtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICAgIGNsYXNzZXMucHVzaCgnaGlkZScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuICAgIH0sXG4gICAgZ2V0VGl0bGVUZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnNob3cgJiYgIXRoaXMucHJvcHMud2luICYmICF0aGlzLnByb3BzLmxvc3MpIHtcbiAgICAgICAgcmV0dXJuICduZXcgZ2FtZT8nO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLndpbiAmJiAhdGhpcy5wcm9wcy5sb3NzKSB7XG4gICAgICAgIHJldHVybiAneW91IHdvbiEnO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5wcm9wcy53aW4gJiYgIXRoaXMucHJvcHMud2luKSB7XG4gICAgICAgIHJldHVybiAneW91IGxvc3QuLi4nO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2xpY2tIYW5kbGVyTmV3R2FtZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVGlsZXNBY3Rpb25zLm5ld0dhbWUoKTtcbiAgICB9LFxuICAgIGNsaWNrSGFuZGxlckV4aXRNb2RhbDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTW9kYWxBY3Rpb25zLnJlc2V0KCk7XG4gICAgfSxcbiAgICByZW5kZXJCdXR0b25zOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBidXR0b25zO1xuICAgICAgYnV0dG9ucyA9IFtcbiAgICAgICAgUi5kaXYoe1xuICAgICAgICAgIGtleTogJ25ldy1nYW1lLXN0YXJ0JyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdidXR0b24nLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuY2xpY2tIYW5kbGVyTmV3R2FtZVxuICAgICAgICB9LCAnc3RhcnQhJylcbiAgICAgIF07XG4gICAgICBpZiAoIXRoaXMucHJvcHMubG9zcykge1xuICAgICAgICBidXR0b25zLnB1c2goUi5kaXYoe1xuICAgICAgICAgIGtleTogJ25ldy1nYW1lLXJlc3VtZScsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnYnV0dG9uJyxcbiAgICAgICAgICBvbkNsaWNrOiB0aGlzLmNsaWNrSGFuZGxlckV4aXRNb2RhbFxuICAgICAgICB9LCAncmVzdW1lIScpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSLmRpdih7XG4gICAgICAgIGtleTogJ25ldy1nYW1lLWJ1dHRvbnMnXG4gICAgICB9LCBidXR0b25zKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGl0bGU7XG4gICAgICB0aXRsZSA9IFIuZGl2KHtcbiAgICAgICAga2V5OiAnbmV3LWdhbWUtdGl0bGUtd3JhcHBlcicsXG4gICAgICAgIGNsYXNzTmFtZTogJ2JvcmRlci1ib3R0b20nXG4gICAgICB9LCBSLmRpdih7XG4gICAgICAgIGtleTogJ25ldy1nYW1lLXRpdGxlJyxcbiAgICAgICAgY2xhc3NOYW1lOiAndGl0bGUnXG4gICAgICB9LCB0aGlzLmdldFRpdGxlVGV4dCgpKSk7XG4gICAgICByZXR1cm4gUi5kaXYoe1xuICAgICAgICBrZXk6ICduZXctZ2FtZS1tb2RhbCcsXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5nZXRDbGFzcygpXG4gICAgICB9LCBbdGl0bGUsIHRoaXMucmVuZGVyQnV0dG9ucygpXSk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IE1vZGFsT3ZlcmxheTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEluc3RydWN0aW9uc0NvbXBvbmVudCwgTW9kYWxBY3Rpb25zLCBNb2RhbE92ZXJsYXksIE5ld0dhbWVDb21wb25lbnQsIFI7XG5cbiAgTW9kYWxBY3Rpb25zID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy9Nb2RhbEFjdGlvbnMuY29mZmVlJyk7XG5cbiAgSW5zdHJ1Y3Rpb25zQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9Nb2RhbEluc3RydWN0aW9uc0NvbXBvbmVudC5jb2ZmZWUnKTtcblxuICBOZXdHYW1lQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9Nb2RhbE5ld0dhbWVDb21wb25lbnQuY29mZmVlJyk7XG5cbiAgUiA9IFJlYWN0LkRPTTtcblxuICBNb2RhbE92ZXJsYXkgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdNb2RhbE92ZXJsYXknLFxuICAgIGdldENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm1vZGFscy5uZXdHYW1lKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5tb2RhbHMuaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnaGlkZSc7XG4gICAgfSxcbiAgICByZXNldEhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLmluZm8ubG9zcyAmJiAhdGhpcy5wcm9wcy5pbmZvLndpbikge1xuICAgICAgICByZXR1cm4gTW9kYWxBY3Rpb25zLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbnN0cnVjdGlvbnNIYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNb2RhbEFjdGlvbnMudG9nZ2xlKCdpbnN0cnVjdGlvbnMnKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3ZlcmxheTtcbiAgICAgIG92ZXJsYXkgPSBSLmRpdih7XG4gICAgICAgIGlkOiAnb3ZlcmxheScsXG4gICAgICAgIGtleTogJ292ZXJsYXknLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3MoKSxcbiAgICAgICAgb25DbGljazogdGhpcy5yZXNldEhhbmRsZXJcbiAgICAgIH0sIG51bGwpO1xuICAgICAgcmV0dXJuIFIuZGl2KG51bGwsIFtcbiAgICAgICAgb3ZlcmxheSwgUmVhY3QuY3JlYXRlRWxlbWVudChJbnN0cnVjdGlvbnNDb21wb25lbnQsIHtcbiAgICAgICAgICBrZXk6ICdtb2RhbC1pbnN0cnVjdGlvbnMnLFxuICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMubW9kYWxzLmluc3RydWN0aW9uc1xuICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChOZXdHYW1lQ29tcG9uZW50LCB7XG4gICAgICAgICAga2V5OiAnbW9kYWwtbmV3LWdhbWUnLFxuICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMubW9kYWxzLm5ld0dhbWUsXG4gICAgICAgICAgd2luOiB0aGlzLnByb3BzLmluZm8ud2luLFxuICAgICAgICAgIGxvc3M6IHRoaXMucHJvcHMuaW5mby5sb3NzXG4gICAgICAgIH0pXG4gICAgICBdKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gTW9kYWxPdmVybGF5O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgVGlsZU1vZGVsO1xuXG4gIE51bWJlci5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gVGlsZU1vZGVsID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFRpbGVNb2RlbChhdHRycykge1xuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGF0dHJzLngpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGF0dHJzLnkpKSB7XG4gICAgICAgIHRocm93IFwiYHhgIGFuZCBgeWAgYXJlIHJlcXVpcmVkIEludGVnZXIgYXR0cmlidXRlcyB0byBpbnN0YW50aWF0ZSBUaWxlXCI7XG4gICAgICB9XG4gICAgICB0aGlzLm1vZGVsID0ge1xuICAgICAgICB4OiB2b2lkIDAsXG4gICAgICAgIHk6IHZvaWQgMCxcbiAgICAgICAgdWlkOiB2b2lkIDAsXG4gICAgICAgIGlzTWluZTogZmFsc2UsXG4gICAgICAgIGlzQ2xlYXI6IGZhbHNlLFxuICAgICAgICBpc0ZsYWdnZWQ6IGZhbHNlLFxuICAgICAgICBhZGphY2VudE1pbmVzOiAwXG4gICAgICB9O1xuICAgICAgdGhpcy5hZGphY2VudFRpbGVzID0gW1stMSwgLTFdLCBbMCwgLTFdLCBbMSwgLTFdLCBbLTEsIDBdLCBbMSwgMF0sIFstMSwgMV0sIFswLCAxXSwgWzEsIDFdXTtcbiAgICAgIHRoaXMuc2V0KGF0dHJzKTtcbiAgICB9XG5cbiAgICBUaWxlTW9kZWwucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgICB2YXIgYXR0ciwga2V5O1xuICAgICAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgYXR0ciA9IGF0dHJzW2tleV07XG4gICAgICAgIHRoaXMubW9kZWxba2V5XSA9IGF0dHI7XG4gICAgICAgIHRoaXMubW9kZWwudWlkID0gU3RyaW5nKGF0dHJzLngpICsgJy0nICsgU3RyaW5nKGF0dHJzLnkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFRpbGVNb2RlbC5wcm90b3R5cGUudG9nZ2xlRmxhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5tb2RlbC5pc0ZsYWdnZWQgPSAhdGhpcy5tb2RlbC5pc0ZsYWdnZWQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVGlsZU1vZGVsLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5tb2RlbC5pc0NsZWFyID0gdHJ1ZTtcbiAgICAgIHRoaXMubW9kZWwuaXNGbGFnZ2VkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRpbGVNb2RlbDtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRXZlbnRFbWl0dGVyLCBNb2RhbFN0b3JlLCBNb2RhbHMsIE1vZGFsc0NvbGxlY3Rpb24sIGFzc2lnbjtcblxuICBNb2RhbHNDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMvTW9kYWxzQ29sbGVjdGlvbi5jb2ZmZWUnKTtcblxuICBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbiAgYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG4gIE1vZGFscyA9IG5ldyBNb2RhbHNDb2xsZWN0aW9uKCk7XG5cbiAgTW9kYWxzLnNldCgnbmV3R2FtZScpO1xuXG4gIE1vZGFscy5zZXQoJ2luc3RydWN0aW9ucycpO1xuXG4gIE1vZGFsU3RvcmUgPSBhc3NpZ24oe30sIEV2ZW50RW1pdHRlci5wcm90b3R5cGUsIHtcbiAgICBldmVudDogJ2V2ZW50JyxcbiAgICBnZXRBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1vZGFscy5zaG93O1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1vZGFscy5yZXNldCgpO1xuICAgIH0sXG4gICAgdG9nZ2xlOiBmdW5jdGlvbihtb2RhbE5hbWUpIHtcbiAgICAgIHJldHVybiBNb2RhbHMudG9nZ2xlKG1vZGFsTmFtZSk7XG4gICAgfSxcbiAgICBlbWl0Q2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtaXQodGhpcy5ldmVudCk7XG4gICAgfSxcbiAgICBhZGRDaGFuZ2VMaXN0ZW5lcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLm9uKHRoaXMuZXZlbnQsIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIHJlbW92ZUNoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGlzdGVuZXIodGhpcy5ldmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBNb2RhbFN0b3JlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRXZlbnRFbWl0dGVyLCBUaWxlU3RvcmUsIFRpbGVzLCBUaWxlc0NvbGxlY3Rpb24sIGFzc2lnbjtcblxuICBUaWxlc0NvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9jb2xsZWN0aW9ucy9UaWxlc0NvbGxlY3Rpb24uY29mZmVlJyk7XG5cbiAgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG4gIGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxuICBUaWxlcyA9IG5ldyBUaWxlc0NvbGxlY3Rpb24oKTtcblxuICBUaWxlcy5uZXdHYW1lKDQsIDcsIDUpO1xuXG4gIHdpbmRvdy5mb28gPSBUaWxlcztcblxuICBUaWxlU3RvcmUgPSBhc3NpZ24oe30sIEV2ZW50RW1pdHRlci5wcm90b3R5cGUsIHtcbiAgICBldmVudDogJ2NoYW5nZScsXG4gICAgZ2V0OiBmdW5jdGlvbihhdHRycykge1xuICAgICAgcmV0dXJuIFRpbGVzLmdldChhdHRycyk7XG4gICAgfSxcbiAgICBnZXRBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFRpbGVzLmdldEFsbCgpO1xuICAgIH0sXG4gICAgZ2V0SW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aW46IFRpbGVzLndpbixcbiAgICAgICAgbG9zczogVGlsZXMubG9zcyxcbiAgICAgICAgbnVtT2ZUaWxlczogVGlsZXMuYWxsLmxlbmd0aCxcbiAgICAgICAgbnVtT2ZNaW5lczogVGlsZXMubnVtT2ZNaW5lcyxcbiAgICAgICAgbnVtT2ZGbGFnczogVGlsZXMubnVtT2ZGbGFncyxcbiAgICAgICAgbnVtT2ZVbmNsZWFyZWQ6IFRpbGVzLmFsbC5sZW5ndGggLSBUaWxlcy5udW1PZk1pbmVzIC0gVGlsZXMubnVtT2ZDbGVhcnNcbiAgICAgIH07XG4gICAgfSxcbiAgICByYW5kb21TYWZlVGlsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVGlsZXMucmFuZG9tU2FmZVRpbGUoKTtcbiAgICB9LFxuICAgIG5ld0dhbWU6IGZ1bmN0aW9uKHgsIHksIG1pbmVzKSB7XG4gICAgICByZXR1cm4gVGlsZXMubmV3R2FtZSh4LCB5LCBtaW5lcyk7XG4gICAgfSxcbiAgICBlbWl0Q2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtaXQodGhpcy5ldmVudCk7XG4gICAgfSxcbiAgICBhZGRDaGFuZ2VMaXN0ZW5lcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLm9uKHRoaXMuZXZlbnQsIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIHJlbW92ZUNoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGlzdGVuZXIodGhpcy5ldmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaWxlU3RvcmU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERpc3BhdGNoZXJcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG52YXIgX2xhc3RJRCA9IDE7XG52YXIgX3ByZWZpeCA9ICdJRF8nO1xuXG4vKipcbiAqIERpc3BhdGNoZXIgaXMgdXNlZCB0byBicm9hZGNhc3QgcGF5bG9hZHMgdG8gcmVnaXN0ZXJlZCBjYWxsYmFja3MuIFRoaXMgaXNcbiAqIGRpZmZlcmVudCBmcm9tIGdlbmVyaWMgcHViLXN1YiBzeXN0ZW1zIGluIHR3byB3YXlzOlxuICpcbiAqICAgMSkgQ2FsbGJhY2tzIGFyZSBub3Qgc3Vic2NyaWJlZCB0byBwYXJ0aWN1bGFyIGV2ZW50cy4gRXZlcnkgcGF5bG9hZCBpc1xuICogICAgICBkaXNwYXRjaGVkIHRvIGV2ZXJ5IHJlZ2lzdGVyZWQgY2FsbGJhY2suXG4gKiAgIDIpIENhbGxiYWNrcyBjYW4gYmUgZGVmZXJyZWQgaW4gd2hvbGUgb3IgcGFydCB1bnRpbCBvdGhlciBjYWxsYmFja3MgaGF2ZVxuICogICAgICBiZWVuIGV4ZWN1dGVkLlxuICpcbiAqIEZvciBleGFtcGxlLCBjb25zaWRlciB0aGlzIGh5cG90aGV0aWNhbCBmbGlnaHQgZGVzdGluYXRpb24gZm9ybSwgd2hpY2hcbiAqIHNlbGVjdHMgYSBkZWZhdWx0IGNpdHkgd2hlbiBhIGNvdW50cnkgaXMgc2VsZWN0ZWQ6XG4gKlxuICogICB2YXIgZmxpZ2h0RGlzcGF0Y2hlciA9IG5ldyBEaXNwYXRjaGVyKCk7XG4gKlxuICogICAvLyBLZWVwcyB0cmFjayBvZiB3aGljaCBjb3VudHJ5IGlzIHNlbGVjdGVkXG4gKiAgIHZhciBDb3VudHJ5U3RvcmUgPSB7Y291bnRyeTogbnVsbH07XG4gKlxuICogICAvLyBLZWVwcyB0cmFjayBvZiB3aGljaCBjaXR5IGlzIHNlbGVjdGVkXG4gKiAgIHZhciBDaXR5U3RvcmUgPSB7Y2l0eTogbnVsbH07XG4gKlxuICogICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgYmFzZSBmbGlnaHQgcHJpY2Ugb2YgdGhlIHNlbGVjdGVkIGNpdHlcbiAqICAgdmFyIEZsaWdodFByaWNlU3RvcmUgPSB7cHJpY2U6IG51bGx9XG4gKlxuICogV2hlbiBhIHVzZXIgY2hhbmdlcyB0aGUgc2VsZWN0ZWQgY2l0eSwgd2UgZGlzcGF0Y2ggdGhlIHBheWxvYWQ6XG4gKlxuICogICBmbGlnaHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAqICAgICBhY3Rpb25UeXBlOiAnY2l0eS11cGRhdGUnLFxuICogICAgIHNlbGVjdGVkQ2l0eTogJ3BhcmlzJ1xuICogICB9KTtcbiAqXG4gKiBUaGlzIHBheWxvYWQgaXMgZGlnZXN0ZWQgYnkgYENpdHlTdG9yZWA6XG4gKlxuICogICBmbGlnaHREaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAqICAgICBpZiAocGF5bG9hZC5hY3Rpb25UeXBlID09PSAnY2l0eS11cGRhdGUnKSB7XG4gKiAgICAgICBDaXR5U3RvcmUuY2l0eSA9IHBheWxvYWQuc2VsZWN0ZWRDaXR5O1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogV2hlbiB0aGUgdXNlciBzZWxlY3RzIGEgY291bnRyeSwgd2UgZGlzcGF0Y2ggdGhlIHBheWxvYWQ6XG4gKlxuICogICBmbGlnaHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAqICAgICBhY3Rpb25UeXBlOiAnY291bnRyeS11cGRhdGUnLFxuICogICAgIHNlbGVjdGVkQ291bnRyeTogJ2F1c3RyYWxpYSdcbiAqICAgfSk7XG4gKlxuICogVGhpcyBwYXlsb2FkIGlzIGRpZ2VzdGVkIGJ5IGJvdGggc3RvcmVzOlxuICpcbiAqICAgIENvdW50cnlTdG9yZS5kaXNwYXRjaFRva2VuID0gZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XG4gKiAgICAgaWYgKHBheWxvYWQuYWN0aW9uVHlwZSA9PT0gJ2NvdW50cnktdXBkYXRlJykge1xuICogICAgICAgQ291bnRyeVN0b3JlLmNvdW50cnkgPSBwYXlsb2FkLnNlbGVjdGVkQ291bnRyeTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFdoZW4gdGhlIGNhbGxiYWNrIHRvIHVwZGF0ZSBgQ291bnRyeVN0b3JlYCBpcyByZWdpc3RlcmVkLCB3ZSBzYXZlIGEgcmVmZXJlbmNlXG4gKiB0byB0aGUgcmV0dXJuZWQgdG9rZW4uIFVzaW5nIHRoaXMgdG9rZW4gd2l0aCBgd2FpdEZvcigpYCwgd2UgY2FuIGd1YXJhbnRlZVxuICogdGhhdCBgQ291bnRyeVN0b3JlYCBpcyB1cGRhdGVkIGJlZm9yZSB0aGUgY2FsbGJhY2sgdGhhdCB1cGRhdGVzIGBDaXR5U3RvcmVgXG4gKiBuZWVkcyB0byBxdWVyeSBpdHMgZGF0YS5cbiAqXG4gKiAgIENpdHlTdG9yZS5kaXNwYXRjaFRva2VuID0gZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XG4gKiAgICAgaWYgKHBheWxvYWQuYWN0aW9uVHlwZSA9PT0gJ2NvdW50cnktdXBkYXRlJykge1xuICogICAgICAgLy8gYENvdW50cnlTdG9yZS5jb3VudHJ5YCBtYXkgbm90IGJlIHVwZGF0ZWQuXG4gKiAgICAgICBmbGlnaHREaXNwYXRjaGVyLndhaXRGb3IoW0NvdW50cnlTdG9yZS5kaXNwYXRjaFRva2VuXSk7XG4gKiAgICAgICAvLyBgQ291bnRyeVN0b3JlLmNvdW50cnlgIGlzIG5vdyBndWFyYW50ZWVkIHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogICAgICAgLy8gU2VsZWN0IHRoZSBkZWZhdWx0IGNpdHkgZm9yIHRoZSBuZXcgY291bnRyeVxuICogICAgICAgQ2l0eVN0b3JlLmNpdHkgPSBnZXREZWZhdWx0Q2l0eUZvckNvdW50cnkoQ291bnRyeVN0b3JlLmNvdW50cnkpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIHVzYWdlIG9mIGB3YWl0Rm9yKClgIGNhbiBiZSBjaGFpbmVkLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgIEZsaWdodFByaWNlU3RvcmUuZGlzcGF0Y2hUb2tlbiA9XG4gKiAgICAgZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XG4gKiAgICAgICBzd2l0Y2ggKHBheWxvYWQuYWN0aW9uVHlwZSkge1xuICogICAgICAgICBjYXNlICdjb3VudHJ5LXVwZGF0ZSc6XG4gKiAgICAgICAgICAgZmxpZ2h0RGlzcGF0Y2hlci53YWl0Rm9yKFtDaXR5U3RvcmUuZGlzcGF0Y2hUb2tlbl0pO1xuICogICAgICAgICAgIEZsaWdodFByaWNlU3RvcmUucHJpY2UgPVxuICogICAgICAgICAgICAgZ2V0RmxpZ2h0UHJpY2VTdG9yZShDb3VudHJ5U3RvcmUuY291bnRyeSwgQ2l0eVN0b3JlLmNpdHkpO1xuICogICAgICAgICAgIGJyZWFrO1xuICpcbiAqICAgICAgICAgY2FzZSAnY2l0eS11cGRhdGUnOlxuICogICAgICAgICAgIEZsaWdodFByaWNlU3RvcmUucHJpY2UgPVxuICogICAgICAgICAgICAgRmxpZ2h0UHJpY2VTdG9yZShDb3VudHJ5U3RvcmUuY291bnRyeSwgQ2l0eVN0b3JlLmNpdHkpO1xuICogICAgICAgICAgIGJyZWFrO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIGBjb3VudHJ5LXVwZGF0ZWAgcGF5bG9hZCB3aWxsIGJlIGd1YXJhbnRlZWQgdG8gaW52b2tlIHRoZSBzdG9yZXMnXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcyBpbiBvcmRlcjogYENvdW50cnlTdG9yZWAsIGBDaXR5U3RvcmVgLCB0aGVuXG4gKiBgRmxpZ2h0UHJpY2VTdG9yZWAuXG4gKi9cblxuICBmdW5jdGlvbiBEaXNwYXRjaGVyKCkge1xuICAgIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzID0ge307XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc1BlbmRpbmcgPSB7fTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzSGFuZGxlZCA9IHt9O1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfcGVuZGluZ1BheWxvYWQgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2l0aCBldmVyeSBkaXNwYXRjaGVkIHBheWxvYWQuIFJldHVybnNcbiAgICogYSB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYHdhaXRGb3IoKWAuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIGlkID0gX3ByZWZpeCArIF9sYXN0SUQrKztcbiAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF0gPSBjYWxsYmFjaztcbiAgICByZXR1cm4gaWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjYWxsYmFjayBiYXNlZCBvbiBpdHMgdG9rZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUudW5yZWdpc3Rlcj1mdW5jdGlvbihpZCkge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzW2lkXSxcbiAgICAgICdEaXNwYXRjaGVyLnVucmVnaXN0ZXIoLi4uKTogYCVzYCBkb2VzIG5vdCBtYXAgdG8gYSByZWdpc3RlcmVkIGNhbGxiYWNrLicsXG4gICAgICBpZFxuICAgICk7XG4gICAgZGVsZXRlIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzW2lkXTtcbiAgfTtcblxuICAvKipcbiAgICogV2FpdHMgZm9yIHRoZSBjYWxsYmFja3Mgc3BlY2lmaWVkIHRvIGJlIGludm9rZWQgYmVmb3JlIGNvbnRpbnVpbmcgZXhlY3V0aW9uXG4gICAqIG9mIHRoZSBjdXJyZW50IGNhbGxiYWNrLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIGJ5IGEgY2FsbGJhY2sgaW5cbiAgICogcmVzcG9uc2UgdG8gYSBkaXNwYXRjaGVkIHBheWxvYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gaWRzXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS53YWl0Rm9yPWZ1bmN0aW9uKGlkcykge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyxcbiAgICAgICdEaXNwYXRjaGVyLndhaXRGb3IoLi4uKTogTXVzdCBiZSBpbnZva2VkIHdoaWxlIGRpc3BhdGNoaW5nLidcbiAgICApO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpZHMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgaWQgPSBpZHNbaWldO1xuICAgICAgaWYgKHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nW2lkXSkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0hhbmRsZWRbaWRdLFxuICAgICAgICAgICdEaXNwYXRjaGVyLndhaXRGb3IoLi4uKTogQ2lyY3VsYXIgZGVwZW5kZW5jeSBkZXRlY3RlZCB3aGlsZSAnICtcbiAgICAgICAgICAnd2FpdGluZyBmb3IgYCVzYC4nLFxuICAgICAgICAgIGlkXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaW52YXJpYW50KFxuICAgICAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF0sXG4gICAgICAgICdEaXNwYXRjaGVyLndhaXRGb3IoLi4uKTogYCVzYCBkb2VzIG5vdCBtYXAgdG8gYSByZWdpc3RlcmVkIGNhbGxiYWNrLicsXG4gICAgICAgIGlkXG4gICAgICApO1xuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pbnZva2VDYWxsYmFjayhpZCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGEgcGF5bG9hZCB0byBhbGwgcmVnaXN0ZXJlZCBjYWxsYmFja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXlsb2FkXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5kaXNwYXRjaD1mdW5jdGlvbihwYXlsb2FkKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgIXRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyxcbiAgICAgICdEaXNwYXRjaC5kaXNwYXRjaCguLi4pOiBDYW5ub3QgZGlzcGF0Y2ggaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLidcbiAgICApO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfc3RhcnREaXNwYXRjaGluZyhwYXlsb2FkKTtcbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgaWQgaW4gdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3MpIHtcbiAgICAgICAgaWYgKHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nW2lkXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJERpc3BhdGNoZXJfaW52b2tlQ2FsbGJhY2soaWQpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLiREaXNwYXRjaGVyX3N0b3BEaXNwYXRjaGluZygpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSXMgdGhpcyBEaXNwYXRjaGVyIGN1cnJlbnRseSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLmlzRGlzcGF0Y2hpbmc9ZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZztcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbCB0aGUgY2FsbGJhY2sgc3RvcmVkIHdpdGggdGhlIGdpdmVuIGlkLiBBbHNvIGRvIHNvbWUgaW50ZXJuYWxcbiAgICogYm9va2tlZXBpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLiREaXNwYXRjaGVyX2ludm9rZUNhbGxiYWNrPWZ1bmN0aW9uKGlkKSB7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc1BlbmRpbmdbaWRdID0gdHJ1ZTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF0odGhpcy4kRGlzcGF0Y2hlcl9wZW5kaW5nUGF5bG9hZCk7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0hhbmRsZWRbaWRdID0gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHVwIGJvb2trZWVwaW5nIG5lZWRlZCB3aGVuIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGF5bG9hZFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLiREaXNwYXRjaGVyX3N0YXJ0RGlzcGF0Y2hpbmc9ZnVuY3Rpb24ocGF5bG9hZCkge1xuICAgIGZvciAodmFyIGlkIGluIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzKSB7XG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2lzUGVuZGluZ1tpZF0gPSBmYWxzZTtcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfaXNIYW5kbGVkW2lkXSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLiREaXNwYXRjaGVyX3BlbmRpbmdQYXlsb2FkID0gcGF5bG9hZDtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGVhciBib29ra2VlcGluZyB1c2VkIGZvciBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS4kRGlzcGF0Y2hlcl9zdG9wRGlzcGF0Y2hpbmc9ZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9wZW5kaW5nUGF5bG9hZCA9IG51bGw7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIH07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBEaXNwYXRjaGVyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW52YXJpYW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAoZmFsc2UpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnSW52YXJpYW50IFZpb2xhdGlvbjogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LicpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgdmFyIG07XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSAwO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKGVtaXR0ZXIuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gMTtcbiAgZWxzZVxuICAgIHJldCA9IGVtaXR0ZXIuX2V2ZW50c1t0eXBlXS5sZW5ndGg7XG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIga2V5cztcblx0dmFyIHRvID0gVG9PYmplY3QodGFyZ2V0KTtcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBhcmd1bWVudHNbc107XG5cdFx0a2V5cyA9IE9iamVjdC5rZXlzKE9iamVjdChmcm9tKSk7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRvW2tleXNbaV1dID0gZnJvbVtrZXlzW2ldXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9