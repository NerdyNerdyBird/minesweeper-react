!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){(function(){var GameComponent,ViewController;GameComponent=require("./components/GameComponent.coffee"),ViewController=React.createElement(GameComponent,null),React.render(ViewController,document.getElementById("minesweeper"))}).call(this)},{"./components/GameComponent.coffee":6}],2:[function(require,module,exports){module.exports.Dispatcher=require("./lib/Dispatcher")},{"./lib/Dispatcher":16}],3:[function(require,module,exports){(function(){var AppDispatcher,Dispatcher,TileStore;Dispatcher=require("Flux").Dispatcher,AppDispatcher=new Dispatcher,TileStore=require("./stores/TileStore.coffee"),AppDispatcher.register(function(event){var tile;switch(event.type){case"TILE_FLAG_TOGGLE":return console.log("tile flag"),tile=TileStore.get({uid:event.uid}),tile.toggleFlag(),TileStore.emitChange();case"TILE_CLEAR":return console.log("tile clear"),tile=TileStore.get({uid:event.uid}),tile.clear(),TileStore.emitChange()}}),module.exports=AppDispatcher}).call(this)},{"./stores/TileStore.coffee":11,Flux:12}],4:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={toggleFlag:function(uid){return Dispatcher.dispatch({type:"TILE_FLAG_TOGGLE",uid:uid})},clear:function(uid){return Dispatcher.dispatch({type:"TILE_CLEAR",uid:uid})}}}).call(this)},{"../Dispatcher.coffee":3}],5:[function(require,module,exports){(function(){var TileModel,TilesCollection,extend=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child},hasProp={}.hasOwnProperty;TileModel=require("../models/TileModel.coffee"),TilesCollection=function(){function TilesCollection(){var Model,collection;this.all=[],collection=this,this.model=Model=function(superClass){function Model(){return Model.__super__.constructor.apply(this,arguments)}return extend(Model,superClass),Model.prototype.clear=function(){return Model.__super__.clear.call(this),collection.clearNeighbors(this),collection.moveUpdate()},Model.prototype.toggleFlag=function(){return Model.__super__.toggleFlag.call(this),collection.moveUpdate()},Model.prototype.click=function($event){return collection.noMineFirstClick(this),Model.__super__.click.call(this,$event)},Model}(TileModel),this.newGame()}return TilesCollection.prototype.newGame=function(){var attrs,i,j,k,mineNum,ref,ref1,ref2,tile,x,y;for(this.reset(),this.sizeY=4,this.sizeX=7,this.numOfMines=5,y=i=0,ref=this.sizeY-1;ref>=0?ref>=i:i>=ref;y=ref>=0?++i:--i)for(x=j=0,ref1=this.sizeX-1;ref1>=0?ref1>=j:j>=ref1;x=ref1>=0?++j:--j)attrs={x:x,y:y},this.add(attrs);for(mineNum=k=1,ref2=this.numOfMines;ref2>=1?ref2>=k:k>=ref2;mineNum=ref2>=1?++k:--k)tile=this.randomSafeTile(),tile.model.isMine=!0;return this.tallyMines(),this.gameUpdate()},TilesCollection.prototype.noMineFirstClick=function(tile){return 0===this.numOfClears&&tile.model.isMine===!0&&(tile.model.isMine=!1,this.randomSafeTile().model.isMine=!0,this.tallyMines()),tile},TilesCollection.prototype.add=function(model){var tile;return tile=new this.model(model),this.all.push(tile),tile},TilesCollection.prototype.handleTileClick=function(event,index){},TilesCollection.prototype.reset=function(){return this.all=[],this},TilesCollection.prototype.randomSafeTile=function(){var findAttrs,randomIndex,safeTiles;return findAttrs={isClear:!1,isMine:!1},safeTiles=this.getAll(findAttrs),randomIndex=Math.floor(Math.random()*safeTiles.length),safeTiles[randomIndex]},TilesCollection.prototype.tallyMines=function(){var adjacentTile,i,j,len,len1,neighborAttrs,neighborMine,neighborMines,neighborX,neighborY,ref,ref1,results,tile;for(ref=this.all,results=[],i=0,len=ref.length;len>i;i++){for(tile=ref[i],neighborMines=0,ref1=tile.adjacentTiles,j=0,len1=ref1.length;len1>j;j++)adjacentTile=ref1[j],neighborX=tile.model.x+adjacentTile[0],neighborY=tile.model.y+adjacentTile[1],neighborAttrs={isMine:!0,x:neighborX,y:neighborY},neighborMine=this.get(neighborAttrs),void 0!==neighborMine&&neighborMines++;results.push(tile.model.adjacentMines=neighborMines)}return results},TilesCollection.prototype.gameUpdate=function(){var i,len,ref,tile;for(this.x=Math.max.apply(this,this.all.map(function(tile){return tile.model.x})),this.y=Math.max.apply(this,this.all.map(function(tile){return tile.model.y})),this.x=this.x--,this.y=this.y--,this.numOfMines=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isMine===!0&&this.numOfMines++;return this.moveUpdate()},TilesCollection.prototype.moveUpdate=function(){var i,len,ref,tile;for(this.loss=!1,this.win=!1,this.numOfClears=0,this.numOfFlags=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isClear===!0&&this.numOfClears++,tile.model.isFlagged===!0&&this.numOfFlags++,tile.model.isMine===!0&&tile.model.isClear===!0&&(this.loss=!0);return this.loss===!1&&this.all.length-this.numOfMines-this.numOfClears===0?this.win=!0:void 0},TilesCollection.prototype.clearNeighbors=function(tile){var adjacentTile,i,len,neighbor,ref,results,shouldClearNeighbor,shouldClearNeighbors;if(shouldClearNeighbors=0===tile.model.adjacentMines&&tile.model.isMine===!1){for(ref=tile.adjacentTiles,results=[],i=0,len=ref.length;len>i;i++)adjacentTile=ref[i],neighbor=this.get({x:tile.model.x+adjacentTile[0],y:tile.model.y+adjacentTile[1]}),shouldClearNeighbor=neighbor&&neighbor.model.isClear===!1&&neighbor.model.isMine===!1,results.push(shouldClearNeighbor?neighbor.click():void 0);return results}},TilesCollection.prototype.get=function(attrs){return this.getAll(attrs)[0]},TilesCollection.prototype.getAll=function(attrs){var i,key,len,matches,numOfAttrs,numOfMatchedAttrs,ref,tile,val;if(matches=[],!attrs)return this.all;for(ref=this.all,i=0,len=ref.length;len>i;i++){tile=ref[i],numOfAttrs=0,numOfMatchedAttrs=0;for(key in attrs)val=attrs[key],numOfAttrs++,tile.model[key]===val&&numOfMatchedAttrs++;numOfMatchedAttrs===numOfAttrs&&matches.push(tile)}return matches},TilesCollection.prototype.getInfo=function(){return{numOfTiles:this.all.length,numOfMines:this.numOfMines,numOfFlags:this.numOfFlags,numOfUncleared:this.all.length-this.numOfMines-this.numOfClears}},TilesCollection}(),module.exports=TilesCollection}).call(this)},{"../models/TileModel.coffee":10}],6:[function(require,module,exports){(function(){var Dispatcher,Game,InfoComponent,R,TileStore,TilesComponent,getState;TilesComponent=require("./TilesComponent.coffee"),InfoComponent=require("./InfoComponent.coffee"),Dispatcher=require("../Dispatcher.coffee"),TileStore=require("../stores/TileStore.coffee"),R=React.DOM,getState=function(){return{all:TileStore.getAll(),info:TileStore.getInfo()}},Game=React.createClass({displayName:"Game",getInitialState:function(){return getState()},componentDidMount:function(){return TileStore.addChangeListener(this._onChange)},componentWillUnmount:function(){return TileStore.removeChangeListener(this._onChange)},render:function(){return R.div({id:"game"},[React.createElement(InfoComponent,{info:this.state.info}),React.createElement(TilesComponent,{tiles:this.state.all})])},_onChange:function(){return console.log("change!"),this.setState(getState())}}),module.exports=Game}).call(this)},{"../Dispatcher.coffee":3,"../stores/TileStore.coffee":11,"./InfoComponent.coffee":7,"./TilesComponent.coffee":9}],7:[function(require,module,exports){(function(){var Info,R;R=React.DOM,Info=React.createClass({displayName:"Info",render:function(){return R.ul({id:"stats"},[R.li(null,this.props.info.numOfTiles+" tiles"),R.li(null,this.props.info.numOfMines+" mines"),R.li(null,this.props.info.numOfFlags+" flagged tiles"),R.li(null,this.props.info.numOfUncleared+" left to clear")])}}),module.exports=Info}).call(this)},{}],8:[function(require,module,exports){(function(){var R,Tile,TileActions;TileActions=require("../actions/TileActions.coffee"),R=React.DOM,Tile=React.createClass({displayName:"Tile",render:function(){return R.li({className:this.getClass(),onClick:this.clickHandler},R.span(null,this.getText()))},clickHandler:function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?TileActions.toggleFlag(this.props.tile.model.uid):TileActions.clear(this.props.tile.model.uid)):TileActions.clear(this.props.tile.model.uid)},isFirstColumn:function(){return 0===this.props.tile.model.x},hasBeenFlagged:function(){return this.props.tile.model.isClear!==!0&&this.props.tile.model.isFlagged===!0},hasBeenCleared:function(){return this.props.tile.model.isClear===!0},hasMine:function(){return this.props.tile.model.isMine===!0},shouldDisplayMine:function(){return this.hasMine()&&this.hasBeenCleared()},hasZeroAdjacentMines:function(){return 0===this.props.tile.model.adjacentMines&&!this.hasMine()},getText:function(){var text;return text=this.props.tile.model.adjacentMines,this.hasBeenFlagged()?text="?":this.shouldDisplayMine()&&(text="X"),text},getClass:function(){return["tile",this.isFirstColumn()?"nth":void 0,this.hasBeenCleared()?"clear":void 0,this.hasBeenFlagged()?"flagged":void 0,this.shouldDisplayMine()?"mine":void 0,this.hasZeroAdjacentMines()?"clear zero":void 0].join(" ")}}),module.exports=Tile}).call(this)},{"../actions/TileActions.coffee":4}],9:[function(require,module,exports){(function(){var R,TileComponent,Tiles;TileComponent=require("./TileComponent.coffee"),R=React.DOM,Tiles=React.createClass({displayName:"Tiles",render:function(){var tiles;return tiles=this.props.tiles.map(function(_this){return function(item,index){return React.createElement(TileComponent,{key:index,ref:item.model.uid,tile:item})}}(this)),R.ul({id:"board"},tiles)}}),module.exports=Tiles}).call(this)},{"./TileComponent.coffee":8}],10:[function(require,module,exports){(function(){var TileModel;Number.isInteger=Number.isInteger||function(value){return"number"==typeof value&&isFinite(value)&&Math.floor(value)===value},module.exports=TileModel=function(){function TileModel(attrs){if(!Number.isInteger(attrs.x)||!Number.isInteger(attrs.y))throw"`x` and `y` are required Integer attributes to instantiate Tile";this.model={x:void 0,y:void 0,uid:void 0,isMine:!1,isClear:!1,isFlagged:!1,adjacentMines:0},this.adjacentTiles=[[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]],this.set(attrs)}return TileModel.prototype.set=function(attrs){var attr,key;for(key in attrs)attr=attrs[key],this.model[key]=attr,this.model.uid=String(attrs.x)+"-"+String(attrs.y);return this},TileModel.prototype.toggleFlag=function(){return this.model.isFlagged=!this.model.isFlagged,this},TileModel.prototype.clear=function(){return this.model.isClear=!0,this.model.isFlagged=!1,this},TileModel.prototype.click=function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?this.toggleFlag():this.clear()):this.clear()},TileModel}()}).call(this)},{}],11:[function(require,module,exports){(function(){var EventEmitter,TileStore,Tiles,TilesCollection,assign;TilesCollection=require("../collections/TilesCollection.coffee"),EventEmitter=require("events").EventEmitter,assign=require("object-assign"),Tiles=new TilesCollection,TileStore=assign({},EventEmitter.prototype,{event:"change",get:function(attrs){return Tiles.get(attrs)},getAll:function(){return Tiles.getAll()},getInfo:function(){return Tiles.getInfo()},emitChange:function(){return this.emit(this.event)},addChangeListener:function(callback){return this.on(this.event,callback)},removeChangeListener:function(callback){return this.removeListener(this.event,callback)}}),module.exports=TileStore}).call(this)},{"../collections/TilesCollection.coffee":5,events:15,"object-assign":18}],12:[function(require,module,exports){arguments[4][2][0].apply(exports,arguments)},{"./lib/Dispatcher":13,dup:2}],13:[function(require,module,exports){"use strict";function Dispatcher(){this.$Dispatcher_callbacks={},this.$Dispatcher_isPending={},this.$Dispatcher_isHandled={},this.$Dispatcher_isDispatching=!1,this.$Dispatcher_pendingPayload=null}var invariant=require("./invariant"),_lastID=1,_prefix="ID_";Dispatcher.prototype.register=function(callback){var id=_prefix+_lastID++;return this.$Dispatcher_callbacks[id]=callback,id},Dispatcher.prototype.unregister=function(id){invariant(this.$Dispatcher_callbacks[id],"Dispatcher.unregister(...): `%s` does not map to a registered callback.",id),delete this.$Dispatcher_callbacks[id]},Dispatcher.prototype.waitFor=function(ids){invariant(this.$Dispatcher_isDispatching,"Dispatcher.waitFor(...): Must be invoked while dispatching.");for(var ii=0;ii<ids.length;ii++){var id=ids[ii];this.$Dispatcher_isPending[id]?invariant(this.$Dispatcher_isHandled[id],"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",id):(invariant(this.$Dispatcher_callbacks[id],"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",id),this.$Dispatcher_invokeCallback(id))}},Dispatcher.prototype.dispatch=function(payload){invariant(!this.$Dispatcher_isDispatching,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."),this.$Dispatcher_startDispatching(payload);try{for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]||this.$Dispatcher_invokeCallback(id)}finally{this.$Dispatcher_stopDispatching()}},Dispatcher.prototype.isDispatching=function(){return this.$Dispatcher_isDispatching},Dispatcher.prototype.$Dispatcher_invokeCallback=function(id){this.$Dispatcher_isPending[id]=!0,this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload),this.$Dispatcher_isHandled[id]=!0},Dispatcher.prototype.$Dispatcher_startDispatching=function(payload){for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]=!1,this.$Dispatcher_isHandled[id]=!1;this.$Dispatcher_pendingPayload=payload,this.$Dispatcher_isDispatching=!0},Dispatcher.prototype.$Dispatcher_stopDispatching=function(){this.$Dispatcher_pendingPayload=null,this.$Dispatcher_isDispatching=!1},module.exports=Dispatcher},{"./invariant":14}],14:[function(require,module,exports){"use strict";var invariant=function(condition,format,a,b,c,d,e,f){if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;error=new Error("Invariant Violation: "+format.replace(/%s/g,function(){return args[argIndex++]}))}throw error.framesToPop=1,error}};module.exports=invariant},{}],15:[function(require,module,exports){function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(arg){return"function"==typeof arg}function isNumber(arg){return"number"==typeof arg}function isObject(arg){return"object"==typeof arg&&null!==arg}function isUndefined(arg){return void 0===arg}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||0>n||isNaN(n))throw TypeError("n must be a positive number");return this._maxListeners=n,this},EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(this._events||(this._events={}),"error"===type&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if(er=arguments[1],er instanceof Error)throw er;throw TypeError('Uncaught, unspecified "error" event.')}if(handler=this._events[type],isUndefined(handler))return!1;if(isFunction(handler))switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];handler.apply(this,args)}else if(isObject(handler)){for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];for(listeners=handler.slice(),len=listeners.length,i=0;len>i;i++)listeners[i].apply(this,args)}return!0},EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",type,isFunction(listener.listener)?listener.listener:listener),this._events[type]?isObject(this._events[type])?this._events[type].push(listener):this._events[type]=[this._events[type],listener]:this._events[type]=listener,isObject(this._events[type])&&!this._events[type].warned){var m;m=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners,m&&m>0&&this._events[type].length>m&&(this._events[type].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[type].length),"function"==typeof console.trace&&console.trace())}return this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(type,listener){function g(){this.removeListener(type,g),fired||(fired=!0,listener.apply(this,arguments))}if(!isFunction(listener))throw TypeError("listener must be a function");var fired=!1;return g.listener=listener,this.on(type,g),this},EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError("listener must be a function");if(!this._events||!this._events[type])return this;if(list=this._events[type],length=list.length,position=-1,list===listener||isFunction(list.listener)&&list.listener===listener)delete this._events[type],this._events.removeListener&&this.emit("removeListener",type,listener);else if(isObject(list)){for(i=length;i-->0;)if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break}if(0>position)return this;1===list.length?(list.length=0,delete this._events[type]):list.splice(position,1),this._events.removeListener&&this.emit("removeListener",type,listener)}return this},EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[type]&&delete this._events[type],this;if(0===arguments.length){for(key in this._events)"removeListener"!==key&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events={},this}if(listeners=this._events[type],isFunction(listeners))this.removeListener(type,listeners);else for(;listeners.length;)this.removeListener(type,listeners[listeners.length-1]);return delete this._events[type],this},EventEmitter.prototype.listeners=function(type){var ret;return ret=this._events&&this._events[type]?isFunction(this._events[type])?[this._events[type]]:this._events[type].slice():[]},EventEmitter.listenerCount=function(emitter,type){var ret;return ret=emitter._events&&emitter._events[type]?isFunction(emitter._events[type])?1:emitter._events[type].length:0}},{}],16:[function(require,module,exports){arguments[4][13][0].apply(exports,arguments)},{"./invariant":17,dup:13}],17:[function(require,module,exports){arguments[4][14][0].apply(exports,arguments)},{dup:14}],18:[function(require,module,exports){"use strict";function ToObject(val){if(null==val)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(val)}module.exports=Object.assign||function(target,source){for(var from,keys,to=ToObject(target),s=1;s<arguments.length;s++){from=arguments[s],keys=Object.keys(Object(from));for(var i=0;i<keys.length;i++)to[keys[i]]=from[keys[i]]}return to}},{}]},{},[1,2]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJSZXNvdXJjZXMvY29mZmVlL0FwcC5jb2ZmZWUiLCJidWlsZC5qcyIsIm5vZGVfbW9kdWxlcy9mbHV4L2luZGV4LmpzIiwiUmVzb3VyY2VzL2NvZmZlZS9EaXNwYXRjaGVyLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvYWN0aW9ucy9UaWxlQWN0aW9ucy5jb2ZmZWUiLCJSZXNvdXJjZXMvY29mZmVlL2NvbGxlY3Rpb25zL1RpbGVzQ29sbGVjdGlvbi5jb2ZmZWUiLCJSZXNvdXJjZXMvY29mZmVlL2NvbXBvbmVudHMvR2FtZUNvbXBvbmVudC5jb2ZmZWUiLCJSZXNvdXJjZXMvY29mZmVlL2NvbXBvbmVudHMvSW5mb0NvbXBvbmVudC5jb2ZmZWUiLCJSZXNvdXJjZXMvY29mZmVlL2NvbXBvbmVudHMvVGlsZUNvbXBvbmVudC5jb2ZmZWUiLCJSZXNvdXJjZXMvY29mZmVlL2NvbXBvbmVudHMvVGlsZXNDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9tb2RlbHMvVGlsZU1vZGVsLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvc3RvcmVzL1RpbGVTdG9yZS5jb2ZmZWUiLCJub2RlX21vZHVsZXMvRmx1eC9saWIvRGlzcGF0Y2hlci5qcyIsIm5vZGVfbW9kdWxlcy9GbHV4L2xpYi9pbnZhcmlhbnQuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwxLCJtb2R1bGUiLCJHYW1lQ29tcG9uZW50IiwiVmlld0NvbnRyb2xsZXIiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJyZW5kZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidGhpcyIsIi4vY29tcG9uZW50cy9HYW1lQ29tcG9uZW50LmNvZmZlZSIsMiwiRGlzcGF0Y2hlciIsIi4vbGliL0Rpc3BhdGNoZXIiLDMsIkFwcERpc3BhdGNoZXIiLCJUaWxlU3RvcmUiLCJyZWdpc3RlciIsImV2ZW50IiwidGlsZSIsInR5cGUiLCJjb25zb2xlIiwibG9nIiwiZ2V0IiwidWlkIiwidG9nZ2xlRmxhZyIsImVtaXRDaGFuZ2UiLCJjbGVhciIsIi4vc3RvcmVzL1RpbGVTdG9yZS5jb2ZmZWUiLCJGbHV4Iiw0LCJkaXNwYXRjaCIsIi4uL0Rpc3BhdGNoZXIuY29mZmVlIiw1LCJUaWxlTW9kZWwiLCJUaWxlc0NvbGxlY3Rpb24iLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsImtleSIsImhhc1Byb3AiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsIk1vZGVsIiwiY29sbGVjdGlvbiIsImFsbCIsIm1vZGVsIiwic3VwZXJDbGFzcyIsImFwcGx5IiwiYXJndW1lbnRzIiwiY2xlYXJOZWlnaGJvcnMiLCJtb3ZlVXBkYXRlIiwiY2xpY2siLCIkZXZlbnQiLCJub01pbmVGaXJzdENsaWNrIiwibmV3R2FtZSIsImF0dHJzIiwiaiIsImsiLCJtaW5lTnVtIiwicmVmIiwicmVmMSIsInJlZjIiLCJ4IiwieSIsInJlc2V0Iiwic2l6ZVkiLCJzaXplWCIsIm51bU9mTWluZXMiLCJhZGQiLCJyYW5kb21TYWZlVGlsZSIsImlzTWluZSIsInRhbGx5TWluZXMiLCJnYW1lVXBkYXRlIiwibnVtT2ZDbGVhcnMiLCJwdXNoIiwiaGFuZGxlVGlsZUNsaWNrIiwiaW5kZXgiLCJmaW5kQXR0cnMiLCJyYW5kb21JbmRleCIsInNhZmVUaWxlcyIsImlzQ2xlYXIiLCJnZXRBbGwiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhZGphY2VudFRpbGUiLCJsZW4iLCJsZW4xIiwibmVpZ2hib3JBdHRycyIsIm5laWdoYm9yTWluZSIsIm5laWdoYm9yTWluZXMiLCJuZWlnaGJvclgiLCJuZWlnaGJvclkiLCJyZXN1bHRzIiwiYWRqYWNlbnRUaWxlcyIsImFkamFjZW50TWluZXMiLCJtYXgiLCJtYXAiLCJsb3NzIiwid2luIiwibnVtT2ZGbGFncyIsImlzRmxhZ2dlZCIsIm5laWdoYm9yIiwic2hvdWxkQ2xlYXJOZWlnaGJvciIsInNob3VsZENsZWFyTmVpZ2hib3JzIiwibWF0Y2hlcyIsIm51bU9mQXR0cnMiLCJudW1PZk1hdGNoZWRBdHRycyIsInZhbCIsImdldEluZm8iLCJudW1PZlRpbGVzIiwibnVtT2ZVbmNsZWFyZWQiLCIuLi9tb2RlbHMvVGlsZU1vZGVsLmNvZmZlZSIsNiwiR2FtZSIsIkluZm9Db21wb25lbnQiLCJSIiwiVGlsZXNDb21wb25lbnQiLCJnZXRTdGF0ZSIsIkRPTSIsImluZm8iLCJjcmVhdGVDbGFzcyIsImRpc3BsYXlOYW1lIiwiZ2V0SW5pdGlhbFN0YXRlIiwiY29tcG9uZW50RGlkTW91bnQiLCJhZGRDaGFuZ2VMaXN0ZW5lciIsIl9vbkNoYW5nZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlQ2hhbmdlTGlzdGVuZXIiLCJkaXYiLCJpZCIsInN0YXRlIiwidGlsZXMiLCJzZXRTdGF0ZSIsIi4uL3N0b3Jlcy9UaWxlU3RvcmUuY29mZmVlIiwiLi9JbmZvQ29tcG9uZW50LmNvZmZlZSIsIi4vVGlsZXNDb21wb25lbnQuY29mZmVlIiw3LCJJbmZvIiwidWwiLCJsaSIsInByb3BzIiw4LCJUaWxlIiwiVGlsZUFjdGlvbnMiLCJjbGFzc05hbWUiLCJnZXRDbGFzcyIsIm9uQ2xpY2siLCJjbGlja0hhbmRsZXIiLCJzcGFuIiwiZ2V0VGV4dCIsImZsYWdLZXlXYXNQcmVzc2VkIiwic2hpZnRLZXkiLCJhbHRLZXkiLCJpc0ZpcnN0Q29sdW1uIiwiaGFzQmVlbkZsYWdnZWQiLCJoYXNCZWVuQ2xlYXJlZCIsImhhc01pbmUiLCJzaG91bGREaXNwbGF5TWluZSIsImhhc1plcm9BZGphY2VudE1pbmVzIiwidGV4dCIsImpvaW4iLCIuLi9hY3Rpb25zL1RpbGVBY3Rpb25zLmNvZmZlZSIsOSwiVGlsZUNvbXBvbmVudCIsIlRpbGVzIiwiX3RoaXMiLCJpdGVtIiwiLi9UaWxlQ29tcG9uZW50LmNvZmZlZSIsMTAsIk51bWJlciIsImlzSW50ZWdlciIsInZhbHVlIiwiaXNGaW5pdGUiLCJzZXQiLCJhdHRyIiwiU3RyaW5nIiwxMSwiRXZlbnRFbWl0dGVyIiwiYXNzaWduIiwiZW1pdCIsImNhbGxiYWNrIiwib24iLCJyZW1vdmVMaXN0ZW5lciIsIi4uL2NvbGxlY3Rpb25zL1RpbGVzQ29sbGVjdGlvbi5jb2ZmZWUiLCJldmVudHMiLCJvYmplY3QtYXNzaWduIiwxMiwiZHVwIiwxMywiJERpc3BhdGNoZXJfY2FsbGJhY2tzIiwiJERpc3BhdGNoZXJfaXNQZW5kaW5nIiwiJERpc3BhdGNoZXJfaXNIYW5kbGVkIiwiJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyIsIiREaXNwYXRjaGVyX3BlbmRpbmdQYXlsb2FkIiwiaW52YXJpYW50IiwiX2xhc3RJRCIsIl9wcmVmaXgiLCJ1bnJlZ2lzdGVyIiwid2FpdEZvciIsImlkcyIsImlpIiwiJERpc3BhdGNoZXJfaW52b2tlQ2FsbGJhY2siLCJwYXlsb2FkIiwiJERpc3BhdGNoZXJfc3RhcnREaXNwYXRjaGluZyIsIiREaXNwYXRjaGVyX3N0b3BEaXNwYXRjaGluZyIsImlzRGlzcGF0Y2hpbmciLCIuL2ludmFyaWFudCIsMTQsImNvbmRpdGlvbiIsImZvcm1hdCIsImIiLCJjIiwiZCIsImVycm9yIiwidW5kZWZpbmVkIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwxNSwiX2V2ZW50cyIsIl9tYXhMaXN0ZW5lcnMiLCJpc0Z1bmN0aW9uIiwiYXJnIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwiZGVmYXVsdE1heExpc3RlbmVycyIsInNldE1heExpc3RlbmVycyIsImlzTmFOIiwiVHlwZUVycm9yIiwiZXIiLCJoYW5kbGVyIiwibGlzdGVuZXJzIiwiQXJyYXkiLCJzbGljZSIsImFkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJtIiwibmV3TGlzdGVuZXIiLCJ3YXJuZWQiLCJ0cmFjZSIsIm9uY2UiLCJnIiwiZmlyZWQiLCJsaXN0IiwicG9zaXRpb24iLCJzcGxpY2UiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZXQiLCJsaXN0ZW5lckNvdW50IiwiZW1pdHRlciIsMTYsMTcsMTgsIlRvT2JqZWN0IiwiT2JqZWN0IiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsImtleXMiLCJ0byJdLCJtYXBwaW5ncyI6IkNBQUEsUUFBQUEsR0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxRQUFBQyxHQUFBQyxFQUFBQyxHQUFBLElBQUFKLEVBQUFHLEdBQUEsQ0FBQSxJQUFBSixFQUFBSSxHQUFBLENBQUEsR0FBQUUsR0FBQSxrQkFBQUMsVUFBQUEsT0FBQSxLQUFBRixHQUFBQyxFQUFBLE1BQUFBLEdBQUFGLEdBQUEsRUFBQSxJQUFBSSxFQUFBLE1BQUFBLEdBQUFKLEdBQUEsRUFBQSxJQUFBSyxHQUFBLEdBQUFDLE9BQUEsdUJBQUFOLEVBQUEsSUFBQSxNQUFBSyxHQUFBRSxLQUFBLG1CQUFBRixFQUFBLEdBQUFHLEdBQUFYLEVBQUFHLElBQUFTLFdBQUFiLEdBQUFJLEdBQUEsR0FBQVUsS0FBQUYsRUFBQUMsUUFBQSxTQUFBZCxHQUFBLEdBQUFFLEdBQUFELEVBQUFJLEdBQUEsR0FBQUwsRUFBQSxPQUFBSSxHQUFBRixFQUFBQSxFQUFBRixJQUFBYSxFQUFBQSxFQUFBQyxRQUFBZCxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLE1BQUFELEdBQUFHLEdBQUFTLFFBQUEsSUFBQSxHQUFBTCxHQUFBLGtCQUFBRCxVQUFBQSxRQUFBSCxFQUFBLEVBQUFBLEVBQUFGLEVBQUFhLE9BQUFYLElBQUFELEVBQUFELEVBQUFFLEdBQUEsT0FBQUQsS0FBQWEsR0FBQSxTQUFBVCxRQUFBVSxPQUFBSixVQ0FBLFdBQ0EsR0FBQUssZUFBQUMsY0FFQUQsZUFBQVgsUUFBQSxxQ0FFQVksZUFBQUMsTUFBQUMsY0FBQUgsY0FBQSxNQUVBRSxNQUFBRSxPQUFBSCxlQUFBSSxTQUFBQyxlQUFBLGtCQUVBVixLQUFBVyxRQ0dHQyxvQ0FBb0MsSUFBSUMsR0FBRyxTQUFTcEIsUUFBUVUsT0FBT0osU0NIdEVJLE9BQUFKLFFBQUFlLFdBQUFyQixRQUFBLHNCRGVHc0IsbUJBQW1CLEtBQUtDLEdBQUcsU0FBU3ZCLFFBQVFVLE9BQU9KLFVFeEJ0RCxXQUNBLEdBQUFrQixlQUFBSCxXQUFBSSxTQUVBSixZQUFBckIsUUFBQSxRQUFBcUIsV0FFQUcsY0FBQSxHQUFBSCxZQUVBSSxVQUFBekIsUUFBQSw2QkFFQXdCLGNBQUFFLFNBQUEsU0FBQUMsT0FDQSxHQUFBQyxLQUNBLFFBQUFELE1BQUFFLE1BQ0EsSUFBQSxtQkFNQSxNQUxBQyxTQUFBQyxJQUFBLGFBQ0FILEtBQUFILFVBQUFPLEtBQ0FDLElBQUFOLE1BQUFNLE1BRUFMLEtBQUFNLGFBQ0FULFVBQUFVLFlBQ0EsS0FBQSxhQU1BLE1BTEFMLFNBQUFDLElBQUEsY0FDQUgsS0FBQUgsVUFBQU8sS0FDQUMsSUFBQU4sTUFBQU0sTUFFQUwsS0FBQVEsUUFDQVgsVUFBQVUsZ0JBSUF6QixPQUFBSixRQUFBa0IsZ0JBRUFqQixLQUFBVyxRRjJCR21CLDRCQUE0QixHQUFHQyxLQUFPLEtBQUtDLEdBQUcsU0FBU3ZDLFFBQVFVLE9BQU9KLFVHMUR6RSxXQUNBLEdBQUFlLFdBRUFBLFlBQUFyQixRQUFBLHdCQUVBVSxPQUFBSixTQUNBNEIsV0FBQSxTQUFBRCxLQUNBLE1BQUFaLFlBQUFtQixVQUNBWCxLQUFBLG1CQUNBSSxJQUFBQSxPQUdBRyxNQUFBLFNBQUFILEtBQ0EsTUFBQVosWUFBQW1CLFVBQ0FYLEtBQUEsYUFDQUksSUFBQUEsVUFLQTFCLEtBQUFXLFFINkRHdUIsdUJBQXVCLElBQUlDLEdBQUcsU0FBUzFDLFFBQVFVLE9BQU9KLFVJakZ6RCxXQUNBLEdBQUFxQyxXQUFBQyxnQkFDQUMsT0FBQSxTQUFBQyxNQUFBQyxRQUFBLFFBQUFDLFFBQUE5QixLQUFBK0IsWUFBQUgsTUFBQSxJQUFBLEdBQUFJLE9BQUFILFFBQUFJLFFBQUE1QyxLQUFBd0MsT0FBQUcsT0FBQUosTUFBQUksS0FBQUgsT0FBQUcsS0FBQSxPQUFBRixNQUFBSSxVQUFBTCxPQUFBSyxVQUFBTixNQUFBTSxVQUFBLEdBQUFKLE1BQUFGLE1BQUFPLFVBQUFOLE9BQUFLLFVBQUFOLE9BQ0FLLFdBQUFHLGNBRUFYLFdBQUEzQyxRQUFBLDhCQUVBNEMsZ0JBQUEsV0FDQSxRQUFBQSxtQkFDQSxHQUFBVyxPQUFBQyxVQUNBdEMsTUFBQXVDLE9BQ0FELFdBQUF0QyxLQUNBQSxLQUFBd0MsTUFBQUgsTUFBQSxTQUFBSSxZQUdBLFFBQUFKLFNBQ0EsTUFBQUEsT0FBQUYsVUFBQUosWUFBQVcsTUFBQTFDLEtBQUEyQyxXQW1CQSxNQXRCQWhCLFFBQUFVLE1BQUFJLFlBTUFKLE1BQUFILFVBQUFoQixNQUFBLFdBR0EsTUFGQW1CLE9BQUFGLFVBQUFqQixNQUFBN0IsS0FBQVcsTUFDQXNDLFdBQUFNLGVBQUE1QyxNQUNBc0MsV0FBQU8sY0FHQVIsTUFBQUgsVUFBQWxCLFdBQUEsV0FFQSxNQURBcUIsT0FBQUYsVUFBQW5CLFdBQUEzQixLQUFBVyxNQUNBc0MsV0FBQU8sY0FHQVIsTUFBQUgsVUFBQVksTUFBQSxTQUFBQyxRQUVBLE1BREFULFlBQUFVLGlCQUFBaEQsTUFDQXFDLE1BQUFGLFVBQUFXLE1BQUF6RCxLQUFBVyxLQUFBK0MsU0FHQVYsT0FFQVosV0FDQXpCLEtBQUFpRCxVQWlNQSxNQTlMQXZCLGlCQUFBUSxVQUFBZSxRQUFBLFdBQ0EsR0FBQUMsT0FBQW5FLEVBQUFvRSxFQUFBQyxFQUFBQyxRQUFBQyxJQUFBQyxLQUFBQyxLQUFBOUMsS0FBQStDLEVBQUFDLENBS0EsS0FKQTFELEtBQUEyRCxRQUNBM0QsS0FBQTRELE1BQUEsRUFDQTVELEtBQUE2RCxNQUFBLEVBQ0E3RCxLQUFBOEQsV0FBQSxFQUNBSixFQUFBM0UsRUFBQSxFQUFBdUUsSUFBQXRELEtBQUE0RCxNQUFBLEVBQUFOLEtBQUEsRUFBQUEsS0FBQXZFLEVBQUFBLEdBQUF1RSxJQUFBSSxFQUFBSixLQUFBLElBQUF2RSxJQUFBQSxFQUNBLElBQUEwRSxFQUFBTixFQUFBLEVBQUFJLEtBQUF2RCxLQUFBNkQsTUFBQSxFQUFBTixNQUFBLEVBQUFBLE1BQUFKLEVBQUFBLEdBQUFJLEtBQUFFLEVBQUFGLE1BQUEsSUFBQUosSUFBQUEsRUFDQUQsT0FDQU8sRUFBQUEsRUFDQUMsRUFBQUEsR0FFQTFELEtBQUErRCxJQUFBYixNQUdBLEtBQUFHLFFBQUFELEVBQUEsRUFBQUksS0FBQXhELEtBQUE4RCxXQUFBTixNQUFBLEVBQUFBLE1BQUFKLEVBQUFBLEdBQUFJLEtBQUFILFFBQUFHLE1BQUEsSUFBQUosSUFBQUEsRUFDQTFDLEtBQUFWLEtBQUFnRSxpQkFDQXRELEtBQUE4QixNQUFBeUIsUUFBQSxDQUdBLE9BREFqRSxNQUFBa0UsYUFDQWxFLEtBQUFtRSxjQUdBekMsZ0JBQUFRLFVBQUFjLGlCQUFBLFNBQUF0QyxNQU1BLE1BTEEsS0FBQVYsS0FBQW9FLGFBQUExRCxLQUFBOEIsTUFBQXlCLFVBQUEsSUFDQXZELEtBQUE4QixNQUFBeUIsUUFBQSxFQUNBakUsS0FBQWdFLGlCQUFBeEIsTUFBQXlCLFFBQUEsRUFDQWpFLEtBQUFrRSxjQUVBeEQsTUFHQWdCLGdCQUFBUSxVQUFBNkIsSUFBQSxTQUFBdkIsT0FDQSxHQUFBOUIsS0FHQSxPQUZBQSxNQUFBLEdBQUFWLE1BQUF3QyxNQUFBQSxPQUNBeEMsS0FBQXVDLElBQUE4QixLQUFBM0QsTUFDQUEsTUFHQWdCLGdCQUFBUSxVQUFBb0MsZ0JBQUEsU0FBQTdELE1BQUE4RCxTQUVBN0MsZ0JBQUFRLFVBQUF5QixNQUFBLFdBRUEsTUFEQTNELE1BQUF1QyxPQUNBdkMsTUFHQTBCLGdCQUFBUSxVQUFBOEIsZUFBQSxXQUNBLEdBQUFRLFdBQUFDLFlBQUFDLFNBT0EsT0FOQUYsWUFDQUcsU0FBQSxFQUNBVixRQUFBLEdBRUFTLFVBQUExRSxLQUFBNEUsT0FBQUosV0FDQUMsWUFBQUksS0FBQUMsTUFBQUQsS0FBQUUsU0FBQUwsVUFBQXBGLFFBQ0FvRixVQUFBRCxjQUdBL0MsZ0JBQUFRLFVBQUFnQyxXQUFBLFdBQ0EsR0FBQWMsY0FBQWpHLEVBQUFvRSxFQUFBOEIsSUFBQUMsS0FBQUMsY0FBQUMsYUFBQUMsY0FBQUMsVUFBQUMsVUFBQWpDLElBQUFDLEtBQUFpQyxRQUFBOUUsSUFHQSxLQUZBNEMsSUFBQXRELEtBQUF1QyxJQUNBaUQsV0FDQXpHLEVBQUEsRUFBQWtHLElBQUEzQixJQUFBaEUsT0FBQTJGLElBQUFsRyxFQUFBQSxJQUFBLENBSUEsSUFIQTJCLEtBQUE0QyxJQUFBdkUsR0FDQXNHLGNBQUEsRUFDQTlCLEtBQUE3QyxLQUFBK0UsY0FDQXRDLEVBQUEsRUFBQStCLEtBQUEzQixLQUFBakUsT0FBQTRGLEtBQUEvQixFQUFBQSxJQUNBNkIsYUFBQXpCLEtBQUFKLEdBQ0FtQyxVQUFBNUUsS0FBQThCLE1BQUFpQixFQUFBdUIsYUFBQSxHQUNBTyxVQUFBN0UsS0FBQThCLE1BQUFrQixFQUFBc0IsYUFBQSxHQUNBRyxlQUNBbEIsUUFBQSxFQUNBUixFQUFBNkIsVUFDQTVCLEVBQUE2QixXQUVBSCxhQUFBcEYsS0FBQWMsSUFBQXFFLGVBQ0EsU0FBQUMsY0FDQUMsZUFHQUcsU0FBQW5CLEtBQUEzRCxLQUFBOEIsTUFBQWtELGNBQUFMLGVBRUEsTUFBQUcsVUFHQTlELGdCQUFBUSxVQUFBaUMsV0FBQSxXQUNBLEdBQUFwRixHQUFBa0csSUFBQTNCLElBQUE1QyxJQVdBLEtBVkFWLEtBQUF5RCxFQUFBb0IsS0FBQWMsSUFBQWpELE1BQUExQyxLQUFBQSxLQUFBdUMsSUFBQXFELElBQUEsU0FBQWxGLE1BQ0EsTUFBQUEsTUFBQThCLE1BQUFpQixLQUVBekQsS0FBQTBELEVBQUFtQixLQUFBYyxJQUFBakQsTUFBQTFDLEtBQUFBLEtBQUF1QyxJQUFBcUQsSUFBQSxTQUFBbEYsTUFDQSxNQUFBQSxNQUFBOEIsTUFBQWtCLEtBRUExRCxLQUFBeUQsRUFBQXpELEtBQUF5RCxJQUNBekQsS0FBQTBELEVBQUExRCxLQUFBMEQsSUFDQTFELEtBQUE4RCxXQUFBLEVBQ0FSLElBQUF0RCxLQUFBdUMsSUFDQXhELEVBQUEsRUFBQWtHLElBQUEzQixJQUFBaEUsT0FBQTJGLElBQUFsRyxFQUFBQSxJQUNBMkIsS0FBQTRDLElBQUF2RSxHQUNBMkIsS0FBQThCLE1BQUF5QixVQUFBLEdBQ0FqRSxLQUFBOEQsWUFHQSxPQUFBOUQsTUFBQTZDLGNBR0FuQixnQkFBQVEsVUFBQVcsV0FBQSxXQUNBLEdBQUE5RCxHQUFBa0csSUFBQTNCLElBQUE1QyxJQU1BLEtBTEFWLEtBQUE2RixNQUFBLEVBQ0E3RixLQUFBOEYsS0FBQSxFQUNBOUYsS0FBQW9FLFlBQUEsRUFDQXBFLEtBQUErRixXQUFBLEVBQ0F6QyxJQUFBdEQsS0FBQXVDLElBQ0F4RCxFQUFBLEVBQUFrRyxJQUFBM0IsSUFBQWhFLE9BQUEyRixJQUFBbEcsRUFBQUEsSUFDQTJCLEtBQUE0QyxJQUFBdkUsR0FDQTJCLEtBQUE4QixNQUFBbUMsV0FBQSxHQUNBM0UsS0FBQW9FLGNBRUExRCxLQUFBOEIsTUFBQXdELGFBQUEsR0FDQWhHLEtBQUErRixhQUVBckYsS0FBQThCLE1BQUF5QixVQUFBLEdBQUF2RCxLQUFBOEIsTUFBQW1DLFdBQUEsSUFDQTNFLEtBQUE2RixNQUFBLEVBR0EsT0FBQTdGLE1BQUE2RixRQUFBLEdBQUE3RixLQUFBdUMsSUFBQWpELE9BQUFVLEtBQUE4RCxXQUFBOUQsS0FBQW9FLGNBQUEsRUFDQXBFLEtBQUE4RixLQUFBLEVBREEsUUFLQXBFLGdCQUFBUSxVQUFBVSxlQUFBLFNBQUFsQyxNQUNBLEdBQUFzRSxjQUFBakcsRUFBQWtHLElBQUFnQixTQUFBM0MsSUFBQWtDLFFBQUFVLG9CQUFBQyxvQkFFQSxJQURBQSxxQkFBQSxJQUFBekYsS0FBQThCLE1BQUFrRCxlQUFBaEYsS0FBQThCLE1BQUF5QixVQUFBLEVBQ0EsQ0FHQSxJQUZBWCxJQUFBNUMsS0FBQStFLGNBQ0FELFdBQ0F6RyxFQUFBLEVBQUFrRyxJQUFBM0IsSUFBQWhFLE9BQUEyRixJQUFBbEcsRUFBQUEsSUFDQWlHLGFBQUExQixJQUFBdkUsR0FDQWtILFNBQUFqRyxLQUFBYyxLQUNBMkMsRUFBQS9DLEtBQUE4QixNQUFBaUIsRUFBQXVCLGFBQUEsR0FDQXRCLEVBQUFoRCxLQUFBOEIsTUFBQWtCLEVBQUFzQixhQUFBLEtBRUFrQixvQkFBQUQsVUFBQUEsU0FBQXpELE1BQUFtQyxXQUFBLEdBQUFzQixTQUFBekQsTUFBQXlCLFVBQUEsRUFFQXVCLFFBQUFuQixLQURBNkIsb0JBQ0FELFNBQUFuRCxRQUVBLE9BR0EsT0FBQTBDLFdBSUE5RCxnQkFBQVEsVUFBQXBCLElBQUEsU0FBQW9DLE9BQ0EsTUFBQWxELE1BQUE0RSxPQUFBMUIsT0FBQSxJQUdBeEIsZ0JBQUFRLFVBQUEwQyxPQUFBLFNBQUExQixPQUNBLEdBQUFuRSxHQUFBaUQsSUFBQWlELElBQUFtQixRQUFBQyxXQUFBQyxrQkFBQWhELElBQUE1QyxLQUFBNkYsR0FFQSxJQURBSCxZQUNBbEQsTUFDQSxNQUFBbEQsTUFBQXVDLEdBR0EsS0FEQWUsSUFBQXRELEtBQUF1QyxJQUNBeEQsRUFBQSxFQUFBa0csSUFBQTNCLElBQUFoRSxPQUFBMkYsSUFBQWxHLEVBQUFBLElBQUEsQ0FDQTJCLEtBQUE0QyxJQUFBdkUsR0FDQXNILFdBQUEsRUFDQUMsa0JBQUEsQ0FDQSxLQUFBdEUsTUFBQWtCLE9BQ0FxRCxJQUFBckQsTUFBQWxCLEtBQ0FxRSxhQUNBM0YsS0FBQThCLE1BQUFSLE9BQUF1RSxLQUNBRCxtQkFHQUEscUJBQUFELFlBQ0FELFFBQUEvQixLQUFBM0QsTUFHQSxNQUFBMEYsVUFHQTFFLGdCQUFBUSxVQUFBc0UsUUFBQSxXQUNBLE9BQ0FDLFdBQUF6RyxLQUFBdUMsSUFBQWpELE9BQ0F3RSxXQUFBOUQsS0FBQThELFdBQ0FpQyxXQUFBL0YsS0FBQStGLFdBQ0FXLGVBQUExRyxLQUFBdUMsSUFBQWpELE9BQUFVLEtBQUE4RCxXQUFBOUQsS0FBQW9FLGNBSUExQyxtQkFJQWxDLE9BQUFKLFFBQUFzQyxrQkFFQXJDLEtBQUFXLFFKb0ZHMkcsNkJBQTZCLEtBQUtDLEdBQUcsU0FBUzlILFFBQVFVLE9BQU9KLFVLalVoRSxXQUNBLEdBQUFlLFlBQUEwRyxLQUFBQyxjQUFBQyxFQUFBeEcsVUFBQXlHLGVBQUFDLFFBRUFELGdCQUFBbEksUUFBQSwyQkFFQWdJLGNBQUFoSSxRQUFBLDBCQUVBcUIsV0FBQXJCLFFBQUEsd0JBRUF5QixVQUFBekIsUUFBQSw4QkFFQWlJLEVBQUFwSCxNQUFBdUgsSUFFQUQsU0FBQSxXQUNBLE9BQ0ExRSxJQUFBaEMsVUFBQXFFLFNBQ0F1QyxLQUFBNUcsVUFBQWlHLFlBSUFLLEtBQUFsSCxNQUFBeUgsYUFDQUMsWUFBQSxPQUNBQyxnQkFBQSxXQUNBLE1BQUFMLGFBRUFNLGtCQUFBLFdBQ0EsTUFBQWhILFdBQUFpSCxrQkFBQXhILEtBQUF5SCxZQUVBQyxxQkFBQSxXQUNBLE1BQUFuSCxXQUFBb0gscUJBQUEzSCxLQUFBeUgsWUFFQTVILE9BQUEsV0FDQSxNQUFBa0gsR0FBQWEsS0FDQUMsR0FBQSxTQUVBbEksTUFBQUMsY0FBQWtILGVBQ0FLLEtBQUFuSCxLQUFBOEgsTUFBQVgsT0FDQXhILE1BQUFDLGNBQUFvSCxnQkFDQWUsTUFBQS9ILEtBQUE4SCxNQUFBdkYsU0FJQWtGLFVBQUEsV0FFQSxNQURBN0csU0FBQUMsSUFBQSxXQUNBYixLQUFBZ0ksU0FBQWYsZUFJQXpILE9BQUFKLFFBQUF5SCxPQUVBeEgsS0FBQVcsUUxvVUd1Qix1QkFBdUIsRUFBRTBHLDZCQUE2QixHQUFHQyx5QkFBeUIsRUFBRUMsMEJBQTBCLElBQUlDLEdBQUcsU0FBU3RKLFFBQVFVLE9BQU9KLFVNdFhoSixXQUNBLEdBQUFpSixNQUFBdEIsQ0FFQUEsR0FBQXBILE1BQUF1SCxJQUVBbUIsS0FBQTFJLE1BQUF5SCxhQUNBQyxZQUFBLE9BQ0F4SCxPQUFBLFdBQ0EsTUFBQWtILEdBQUF1QixJQUNBVCxHQUFBLFVBQ0FkLEVBQUF3QixHQUFBLEtBQUF2SSxLQUFBd0ksTUFBQXJCLEtBQUFWLFdBQUEsVUFBQU0sRUFBQXdCLEdBQUEsS0FBQXZJLEtBQUF3SSxNQUFBckIsS0FBQXJELFdBQUEsVUFBQWlELEVBQUF3QixHQUFBLEtBQUF2SSxLQUFBd0ksTUFBQXJCLEtBQUFwQixXQUFBLGtCQUFBZ0IsRUFBQXdCLEdBQUEsS0FBQXZJLEtBQUF3SSxNQUFBckIsS0FBQVQsZUFBQSx1QkFJQWxILE9BQUFKLFFBQUFpSixPQUVBaEosS0FBQVcsV055WE15SSxHQUFHLFNBQVMzSixRQUFRVSxPQUFPSixVT3pZakMsV0FDQSxHQUFBMkgsR0FBQTJCLEtBQUFDLFdBRUFBLGFBQUE3SixRQUFBLGlDQUVBaUksRUFBQXBILE1BQUF1SCxJQUVBd0IsS0FBQS9JLE1BQUF5SCxhQUNBQyxZQUFBLE9BQ0F4SCxPQUFBLFdBQ0EsTUFBQWtILEdBQUF3QixJQUNBSyxVQUFBNUksS0FBQTZJLFdBQ0FDLFFBQUE5SSxLQUFBK0ksY0FDQWhDLEVBQUFpQyxLQUFBLEtBQUFoSixLQUFBaUosYUFFQUYsYUFBQSxTQUFBaEcsUUFDQSxHQUFBbUcsa0JBQ0EsT0FBQW5HLFNBR0FtRyxrQkFBQW5HLE9BQUFvRyxZQUFBLEdBQUFwRyxPQUFBcUcsVUFBQSxFQUNBRixrQkFDQVAsWUFBQTNILFdBQUFoQixLQUFBd0ksTUFBQTlILEtBQUE4QixNQUFBekIsS0FFQTRILFlBQUF6SCxNQUFBbEIsS0FBQXdJLE1BQUE5SCxLQUFBOEIsTUFBQXpCLE1BTkE0SCxZQUFBekgsTUFBQWxCLEtBQUF3SSxNQUFBOUgsS0FBQThCLE1BQUF6QixNQVNBc0ksY0FBQSxXQUNBLE1BQUEsS0FBQXJKLEtBQUF3SSxNQUFBOUgsS0FBQThCLE1BQUFpQixHQUVBNkYsZUFBQSxXQUNBLE1BQUF0SixNQUFBd0ksTUFBQTlILEtBQUE4QixNQUFBbUMsV0FBQSxHQUFBM0UsS0FBQXdJLE1BQUE5SCxLQUFBOEIsTUFBQXdELGFBQUEsR0FFQXVELGVBQUEsV0FDQSxNQUFBdkosTUFBQXdJLE1BQUE5SCxLQUFBOEIsTUFBQW1DLFdBQUEsR0FFQTZFLFFBQUEsV0FDQSxNQUFBeEosTUFBQXdJLE1BQUE5SCxLQUFBOEIsTUFBQXlCLFVBQUEsR0FFQXdGLGtCQUFBLFdBQ0EsTUFBQXpKLE1BQUF3SixXQUFBeEosS0FBQXVKLGtCQUVBRyxxQkFBQSxXQUNBLE1BQUEsS0FBQTFKLEtBQUF3SSxNQUFBOUgsS0FBQThCLE1BQUFrRCxnQkFBQTFGLEtBQUF3SixXQUVBUCxRQUFBLFdBQ0EsR0FBQVUsS0FPQSxPQU5BQSxNQUFBM0osS0FBQXdJLE1BQUE5SCxLQUFBOEIsTUFBQWtELGNBQ0ExRixLQUFBc0osaUJBQ0FLLEtBQUEsSUFDQTNKLEtBQUF5SixzQkFDQUUsS0FBQSxLQUVBQSxNQUVBZCxTQUFBLFdBQ0EsT0FBQSxPQUFBN0ksS0FBQXFKLGdCQUFBLE1BQUEsT0FBQXJKLEtBQUF1SixpQkFBQSxRQUFBLE9BQUF2SixLQUFBc0osaUJBQUEsVUFBQSxPQUFBdEosS0FBQXlKLG9CQUFBLE9BQUEsT0FBQXpKLEtBQUEwSix1QkFBQSxhQUFBLFFBQUFFLEtBQUEsUUFJQXBLLE9BQUFKLFFBQUFzSixPQUVBckosS0FBQVcsUVA0WUc2SixnQ0FBZ0MsSUFBSUMsR0FBRyxTQUFTaEwsUUFBUVUsT0FBT0osVVExY2xFLFdBQ0EsR0FBQTJILEdBQUFnRCxjQUFBQyxLQUVBRCxlQUFBakwsUUFBQSwwQkFFQWlJLEVBQUFwSCxNQUFBdUgsSUFFQThDLE1BQUFySyxNQUFBeUgsYUFDQUMsWUFBQSxRQUNBeEgsT0FBQSxXQUNBLEdBQUFrSSxNQVVBLE9BVEFBLE9BQUEvSCxLQUFBd0ksTUFBQVQsTUFBQW5DLElBQUEsU0FBQXFFLE9BQ0EsTUFBQSxVQUFBQyxLQUFBM0YsT0FDQSxNQUFBNUUsT0FBQUMsY0FBQW1LLGVBQ0EvSCxJQUFBdUMsTUFDQWpCLElBQUE0RyxLQUFBMUgsTUFBQXpCLElBQ0FMLEtBQUF3SixTQUdBbEssT0FDQStHLEVBQUF1QixJQUNBVCxHQUFBLFNBQ0FFLFVBSUF2SSxPQUFBSixRQUFBNEssUUFFQTNLLEtBQUFXLFFSNmNHbUsseUJBQXlCLElBQUlDLElBQUksU0FBU3RMLFFBQVFVLE9BQU9KLFVTemU1RCxXQUNBLEdBQUFxQyxVQUVBNEksUUFBQUMsVUFBQUQsT0FBQUMsV0FBQSxTQUFBQyxPQUNBLE1BQUEsZ0JBQUFBLFFBQUFDLFNBQUFELFFBQUExRixLQUFBQyxNQUFBeUYsU0FBQUEsT0FHQS9LLE9BQUFKLFFBQUFxQyxVQUFBLFdBQ0EsUUFBQUEsV0FBQXlCLE9BQ0EsSUFBQW1ILE9BQUFDLFVBQUFwSCxNQUFBTyxLQUFBNEcsT0FBQUMsVUFBQXBILE1BQUFRLEdBQ0EsS0FBQSxpRUFFQTFELE1BQUF3QyxPQUNBaUIsRUFBQSxPQUNBQyxFQUFBLE9BQ0EzQyxJQUFBLE9BQ0FrRCxRQUFBLEVBQ0FVLFNBQUEsRUFDQXFCLFdBQUEsRUFDQU4sY0FBQSxHQUVBMUYsS0FBQXlGLGdCQUFBLEdBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQ0F6RixLQUFBeUssSUFBQXZILE9BcUNBLE1BbENBekIsV0FBQVMsVUFBQXVJLElBQUEsU0FBQXZILE9BQ0EsR0FBQXdILE1BQUExSSxHQUNBLEtBQUFBLE1BQUFrQixPQUNBd0gsS0FBQXhILE1BQUFsQixLQUNBaEMsS0FBQXdDLE1BQUFSLEtBQUEwSSxLQUNBMUssS0FBQXdDLE1BQUF6QixJQUFBNEosT0FBQXpILE1BQUFPLEdBQUEsSUFBQWtILE9BQUF6SCxNQUFBUSxFQUVBLE9BQUExRCxPQUdBeUIsVUFBQVMsVUFBQWxCLFdBQUEsV0FFQSxNQURBaEIsTUFBQXdDLE1BQUF3RCxXQUFBaEcsS0FBQXdDLE1BQUF3RCxVQUNBaEcsTUFHQXlCLFVBQUFTLFVBQUFoQixNQUFBLFdBR0EsTUFGQWxCLE1BQUF3QyxNQUFBbUMsU0FBQSxFQUNBM0UsS0FBQXdDLE1BQUF3RCxXQUFBLEVBQ0FoRyxNQUdBeUIsVUFBQVMsVUFBQVksTUFBQSxTQUFBQyxRQUNBLEdBQUFtRyxrQkFDQSxPQUFBbkcsU0FHQW1HLGtCQUFBbkcsT0FBQW9HLFlBQUEsR0FBQXBHLE9BQUFxRyxVQUFBLEVBQ0FGLGtCQUNBbEosS0FBQWdCLGFBRUFoQixLQUFBa0IsU0FOQWxCLEtBQUFrQixTQVVBTyxlQUlBcEMsS0FBQVcsV1Q0ZU00SyxJQUFJLFNBQVM5TCxRQUFRVSxPQUFPSixVVTNpQmxDLFdBQ0EsR0FBQXlMLGNBQUF0SyxVQUFBeUosTUFBQXRJLGdCQUFBb0osTUFFQXBKLGlCQUFBNUMsUUFBQSx5Q0FFQStMLGFBQUEvTCxRQUFBLFVBQUErTCxhQUVBQyxPQUFBaE0sUUFBQSxpQkFFQWtMLE1BQUEsR0FBQXRJLGlCQUVBbkIsVUFBQXVLLFVBQUFELGFBQUEzSSxXQUNBekIsTUFBQSxTQUNBSyxJQUFBLFNBQUFvQyxPQUNBLE1BQUE4RyxPQUFBbEosSUFBQW9DLFFBRUEwQixPQUFBLFdBQ0EsTUFBQW9GLE9BQUFwRixVQUVBNEIsUUFBQSxXQUNBLE1BQUF3RCxPQUFBeEQsV0FFQXZGLFdBQUEsV0FDQSxNQUFBakIsTUFBQStLLEtBQUEvSyxLQUFBUyxRQUVBK0csa0JBQUEsU0FBQXdELFVBQ0EsTUFBQWhMLE1BQUFpTCxHQUFBakwsS0FBQVMsTUFBQXVLLFdBRUFyRCxxQkFBQSxTQUFBcUQsVUFDQSxNQUFBaEwsTUFBQWtMLGVBQUFsTCxLQUFBUyxNQUFBdUssYUFJQXhMLE9BQUFKLFFBQUFtQixZQUVBbEIsS0FBQVcsUVY4aUJHbUwsd0NBQXdDLEVBQUVDLE9BQVMsR0FBR0MsZ0JBQWdCLEtBQUtDLElBQUksU0FBU3hNLFFBQVFVLE9BQU9KLFNBQzFHdUQsVUFBVSxHQUFHLEdBQUcsR0FBR0QsTUFBTXRELFFBQVF1RCxhQUM5QnZDLG1CQUFtQixHQUFHbUwsSUFBTSxJQUFJQyxJQUFJLFNBQVMxTSxRQUFRVSxPQUFPSixTV3ZrQi9ELFlBbUdBLFNBQUFlLGNBQ0FILEtBQUF5TCx5QkFDQXpMLEtBQUEwTCx5QkFDQTFMLEtBQUEyTCx5QkFDQTNMLEtBQUE0TCwyQkFBQSxFQUNBNUwsS0FBQTZMLDJCQUFBLEtBdEdBLEdBQUFDLFdBQUFoTixRQUFBLGVBRUFpTixRQUFBLEVBQ0FDLFFBQUEsS0E2R0E3TCxZQUFBK0IsVUFBQTFCLFNBQUEsU0FBQXdLLFVBQ0EsR0FBQW5ELElBQUFtRSxRQUFBRCxTQUVBLE9BREEvTCxNQUFBeUwsc0JBQUE1RCxJQUFBbUQsU0FDQW5ELElBUUExSCxXQUFBK0IsVUFBQStKLFdBQUEsU0FBQXBFLElBQ0FpRSxVQUNBOUwsS0FBQXlMLHNCQUFBNUQsSUFDQSwwRUFDQUEsVUFFQTdILE1BQUF5TCxzQkFBQTVELEtBVUExSCxXQUFBK0IsVUFBQWdLLFFBQUEsU0FBQUMsS0FDQUwsVUFDQTlMLEtBQUE0TCwwQkFDQSw4REFFQSxLQUFBLEdBQUFRLElBQUEsRUFBQUEsR0FBQUQsSUFBQTdNLE9BQUE4TSxLQUFBLENBQ0EsR0FBQXZFLElBQUFzRSxJQUFBQyxHQUNBcE0sTUFBQTBMLHNCQUFBN0QsSUFDQWlFLFVBQ0E5TCxLQUFBMkwsc0JBQUE5RCxJQUNBLGdGQUVBQSxLQUlBaUUsVUFDQTlMLEtBQUF5TCxzQkFBQTVELElBQ0EsdUVBQ0FBLElBRUE3SCxLQUFBcU0sMkJBQUF4RSxPQVNBMUgsV0FBQStCLFVBQUFaLFNBQUEsU0FBQWdMLFNBQ0FSLFdBQ0E5TCxLQUFBNEwsMEJBQ0Esd0VBRUE1TCxLQUFBdU0sNkJBQUFELFFBQ0EsS0FDQSxJQUFBLEdBQUF6RSxNQUFBN0gsTUFBQXlMLHNCQUNBekwsS0FBQTBMLHNCQUFBN0QsS0FHQTdILEtBQUFxTSwyQkFBQXhFLElBRUEsUUFDQTdILEtBQUF3TSxnQ0FTQXJNLFdBQUErQixVQUFBdUssY0FBQSxXQUNBLE1BQUF6TSxNQUFBNEwsMkJBVUF6TCxXQUFBK0IsVUFBQW1LLDJCQUFBLFNBQUF4RSxJQUNBN0gsS0FBQTBMLHNCQUFBN0QsS0FBQSxFQUNBN0gsS0FBQXlMLHNCQUFBNUQsSUFBQTdILEtBQUE2TCw0QkFDQTdMLEtBQUEyTCxzQkFBQTlELEtBQUEsR0FTQTFILFdBQUErQixVQUFBcUssNkJBQUEsU0FBQUQsU0FDQSxJQUFBLEdBQUF6RSxNQUFBN0gsTUFBQXlMLHNCQUNBekwsS0FBQTBMLHNCQUFBN0QsS0FBQSxFQUNBN0gsS0FBQTJMLHNCQUFBOUQsS0FBQSxDQUVBN0gsTUFBQTZMLDJCQUFBUyxRQUNBdE0sS0FBQTRMLDJCQUFBLEdBUUF6TCxXQUFBK0IsVUFBQXNLLDRCQUFBLFdBQ0F4TSxLQUFBNkwsMkJBQUEsS0FDQTdMLEtBQUE0TCwyQkFBQSxHQUlBcE0sT0FBQUosUUFBQWUsYVhzbEJHdU0sY0FBYyxLQUFLQyxJQUFJLFNBQVM3TixRQUFRVSxPQUFPSixTWXAwQmxELFlBYUEsSUFBQTBNLFdBQUEsU0FBQWMsVUFBQUMsT0FBQWhPLEVBQUFpTyxFQUFBQyxFQUFBQyxFQUFBMU8sRUFBQVUsR0FPQSxJQUFBNE4sVUFBQSxDQUNBLEdBQUFLLE1BQ0EsSUFBQUMsU0FBQUwsT0FDQUksTUFBQSxHQUFBaE8sT0FDQSxxSUFHQSxDQUNBLEdBQUFrTyxPQUFBdE8sRUFBQWlPLEVBQUFDLEVBQUFDLEVBQUExTyxFQUFBVSxHQUNBb08sU0FBQSxDQUNBSCxPQUFBLEdBQUFoTyxPQUNBLHdCQUNBNE4sT0FBQVEsUUFBQSxNQUFBLFdBQUEsTUFBQUYsTUFBQUMsZUFLQSxLQURBSCxPQUFBSyxZQUFBLEVBQ0FMLE9BSUF6TixRQUFBSixRQUFBME0sZVprMUJNeUIsSUFBSSxTQUFTek8sUUFBUVUsT0FBT0osU2FqM0JsQyxRQUFBeUwsZ0JBQ0E3SyxLQUFBd04sUUFBQXhOLEtBQUF3TixZQUNBeE4sS0FBQXlOLGNBQUF6TixLQUFBeU4sZUFBQVAsT0F1UUEsUUFBQVEsWUFBQUMsS0FDQSxNQUFBLGtCQUFBQSxLQUdBLFFBQUFDLFVBQUFELEtBQ0EsTUFBQSxnQkFBQUEsS0FHQSxRQUFBRSxVQUFBRixLQUNBLE1BQUEsZ0JBQUFBLE1BQUEsT0FBQUEsSUFHQSxRQUFBRyxhQUFBSCxLQUNBLE1BQUEsVUFBQUEsSUFsUkFuTyxPQUFBSixRQUFBeUwsYUFHQUEsYUFBQUEsYUFBQUEsYUFFQUEsYUFBQTNJLFVBQUFzTCxRQUFBTixPQUNBckMsYUFBQTNJLFVBQUF1TCxjQUFBUCxPQUlBckMsYUFBQWtELG9CQUFBLEdBSUFsRCxhQUFBM0ksVUFBQThMLGdCQUFBLFNBQUF4UCxHQUNBLElBQUFvUCxTQUFBcFAsSUFBQSxFQUFBQSxHQUFBeVAsTUFBQXpQLEdBQ0EsS0FBQTBQLFdBQUEsOEJBRUEsT0FEQWxPLE1BQUF5TixjQUFBalAsRUFDQXdCLE1BR0E2SyxhQUFBM0ksVUFBQTZJLEtBQUEsU0FBQXBLLE1BQ0EsR0FBQXdOLElBQUFDLFFBQUFuSixJQUFBa0ksS0FBQXBPLEVBQUFzUCxTQU1BLElBSkFyTyxLQUFBd04sVUFDQXhOLEtBQUF3TixZQUdBLFVBQUE3TSxRQUNBWCxLQUFBd04sUUFBQVAsT0FDQVksU0FBQTdOLEtBQUF3TixRQUFBUCxTQUFBak4sS0FBQXdOLFFBQUFQLE1BQUEzTixRQUFBLENBRUEsR0FEQTZPLEdBQUF4TCxVQUFBLEdBQ0F3TCxhQUFBbFAsT0FDQSxLQUFBa1AsR0FFQSxNQUFBRCxXQUFBLHdDQU1BLEdBRkFFLFFBQUFwTyxLQUFBd04sUUFBQTdNLE1BRUFtTixZQUFBTSxTQUNBLE9BQUEsQ0FFQSxJQUFBVixXQUFBVSxTQUNBLE9BQUF6TCxVQUFBckQsUUFFQSxJQUFBLEdBQ0E4TyxRQUFBL08sS0FBQVcsS0FDQSxNQUNBLEtBQUEsR0FDQW9PLFFBQUEvTyxLQUFBVyxLQUFBMkMsVUFBQSxHQUNBLE1BQ0EsS0FBQSxHQUNBeUwsUUFBQS9PLEtBQUFXLEtBQUEyQyxVQUFBLEdBQUFBLFVBQUEsR0FDQSxNQUVBLFNBR0EsSUFGQXNDLElBQUF0QyxVQUFBckQsT0FDQTZOLEtBQUEsR0FBQW1CLE9BQUFySixJQUFBLEdBQ0FsRyxFQUFBLEVBQUFrRyxJQUFBbEcsRUFBQUEsSUFDQW9PLEtBQUFwTyxFQUFBLEdBQUE0RCxVQUFBNUQsRUFDQXFQLFNBQUExTCxNQUFBMUMsS0FBQW1OLFVBRUEsSUFBQVUsU0FBQU8sU0FBQSxDQUdBLElBRkFuSixJQUFBdEMsVUFBQXJELE9BQ0E2TixLQUFBLEdBQUFtQixPQUFBckosSUFBQSxHQUNBbEcsRUFBQSxFQUFBa0csSUFBQWxHLEVBQUFBLElBQ0FvTyxLQUFBcE8sRUFBQSxHQUFBNEQsVUFBQTVELEVBSUEsS0FGQXNQLFVBQUFELFFBQUFHLFFBQ0F0SixJQUFBb0osVUFBQS9PLE9BQ0FQLEVBQUEsRUFBQWtHLElBQUFsRyxFQUFBQSxJQUNBc1AsVUFBQXRQLEdBQUEyRCxNQUFBMUMsS0FBQW1OLE1BR0EsT0FBQSxHQUdBdEMsYUFBQTNJLFVBQUFzTSxZQUFBLFNBQUE3TixLQUFBOE4sVUFDQSxHQUFBQyxFQUVBLEtBQUFoQixXQUFBZSxVQUNBLEtBQUFQLFdBQUEsOEJBdUJBLElBckJBbE8sS0FBQXdOLFVBQ0F4TixLQUFBd04sWUFJQXhOLEtBQUF3TixRQUFBbUIsYUFDQTNPLEtBQUErSyxLQUFBLGNBQUFwSyxLQUNBK00sV0FBQWUsU0FBQUEsVUFDQUEsU0FBQUEsU0FBQUEsVUFFQXpPLEtBQUF3TixRQUFBN00sTUFHQWtOLFNBQUE3TixLQUFBd04sUUFBQTdNLE9BRUFYLEtBQUF3TixRQUFBN00sTUFBQTBELEtBQUFvSyxVQUdBek8sS0FBQXdOLFFBQUE3TSxPQUFBWCxLQUFBd04sUUFBQTdNLE1BQUE4TixVQU5Bek8sS0FBQXdOLFFBQUE3TSxNQUFBOE4sU0FTQVosU0FBQTdOLEtBQUF3TixRQUFBN00sU0FBQVgsS0FBQXdOLFFBQUE3TSxNQUFBaU8sT0FBQSxDQUNBLEdBQUFGLEVBSUFBLEdBSEFaLFlBQUE5TixLQUFBeU4sZUFHQTVDLGFBQUFrRCxvQkFGQS9OLEtBQUF5TixjQUtBaUIsR0FBQUEsRUFBQSxHQUFBMU8sS0FBQXdOLFFBQUE3TSxNQUFBckIsT0FBQW9QLElBQ0ExTyxLQUFBd04sUUFBQTdNLE1BQUFpTyxRQUFBLEVBQ0FoTyxRQUFBcU0sTUFBQSxtSUFHQWpOLEtBQUF3TixRQUFBN00sTUFBQXJCLFFBQ0Esa0JBQUFzQixTQUFBaU8sT0FFQWpPLFFBQUFpTyxTQUtBLE1BQUE3TyxPQUdBNkssYUFBQTNJLFVBQUErSSxHQUFBSixhQUFBM0ksVUFBQXNNLFlBRUEzRCxhQUFBM0ksVUFBQTRNLEtBQUEsU0FBQW5PLEtBQUE4TixVQU1BLFFBQUFNLEtBQ0EvTyxLQUFBa0wsZUFBQXZLLEtBQUFvTyxHQUVBQyxRQUNBQSxPQUFBLEVBQ0FQLFNBQUEvTCxNQUFBMUMsS0FBQTJDLFlBVkEsSUFBQStLLFdBQUFlLFVBQ0EsS0FBQVAsV0FBQSw4QkFFQSxJQUFBYyxRQUFBLENBY0EsT0FIQUQsR0FBQU4sU0FBQUEsU0FDQXpPLEtBQUFpTCxHQUFBdEssS0FBQW9PLEdBRUEvTyxNQUlBNkssYUFBQTNJLFVBQUFnSixlQUFBLFNBQUF2SyxLQUFBOE4sVUFDQSxHQUFBUSxNQUFBQyxTQUFBNVAsT0FBQVAsQ0FFQSxLQUFBMk8sV0FBQWUsVUFDQSxLQUFBUCxXQUFBLDhCQUVBLEtBQUFsTyxLQUFBd04sVUFBQXhOLEtBQUF3TixRQUFBN00sTUFDQSxNQUFBWCxLQU1BLElBSkFpUCxLQUFBalAsS0FBQXdOLFFBQUE3TSxNQUNBckIsT0FBQTJQLEtBQUEzUCxPQUNBNFAsU0FBQSxHQUVBRCxPQUFBUixVQUNBZixXQUFBdUIsS0FBQVIsV0FBQVEsS0FBQVIsV0FBQUEsZUFDQXpPLE1BQUF3TixRQUFBN00sTUFDQVgsS0FBQXdOLFFBQUF0QyxnQkFDQWxMLEtBQUErSyxLQUFBLGlCQUFBcEssS0FBQThOLGNBRUEsSUFBQVosU0FBQW9CLE1BQUEsQ0FDQSxJQUFBbFEsRUFBQU8sT0FBQVAsSUFBQSxHQUNBLEdBQUFrUSxLQUFBbFEsS0FBQTBQLFVBQ0FRLEtBQUFsUSxHQUFBMFAsVUFBQVEsS0FBQWxRLEdBQUEwUCxXQUFBQSxTQUFBLENBQ0FTLFNBQUFuUSxDQUNBLE9BSUEsR0FBQSxFQUFBbVEsU0FDQSxNQUFBbFAsS0FFQSxLQUFBaVAsS0FBQTNQLFFBQ0EyUCxLQUFBM1AsT0FBQSxRQUNBVSxNQUFBd04sUUFBQTdNLE9BRUFzTyxLQUFBRSxPQUFBRCxTQUFBLEdBR0FsUCxLQUFBd04sUUFBQXRDLGdCQUNBbEwsS0FBQStLLEtBQUEsaUJBQUFwSyxLQUFBOE4sVUFHQSxNQUFBek8sT0FHQTZLLGFBQUEzSSxVQUFBa04sbUJBQUEsU0FBQXpPLE1BQ0EsR0FBQXFCLEtBQUFxTSxTQUVBLEtBQUFyTyxLQUFBd04sUUFDQSxNQUFBeE4sS0FHQSxLQUFBQSxLQUFBd04sUUFBQXRDLGVBS0EsTUFKQSxLQUFBdkksVUFBQXJELE9BQ0FVLEtBQUF3TixXQUNBeE4sS0FBQXdOLFFBQUE3TSxhQUNBWCxNQUFBd04sUUFBQTdNLE1BQ0FYLElBSUEsSUFBQSxJQUFBMkMsVUFBQXJELE9BQUEsQ0FDQSxJQUFBMEMsTUFBQWhDLE1BQUF3TixRQUNBLG1CQUFBeEwsS0FDQWhDLEtBQUFvUCxtQkFBQXBOLElBSUEsT0FGQWhDLE1BQUFvUCxtQkFBQSxrQkFDQXBQLEtBQUF3TixXQUNBeE4sS0FLQSxHQUZBcU8sVUFBQXJPLEtBQUF3TixRQUFBN00sTUFFQStNLFdBQUFXLFdBQ0FyTyxLQUFBa0wsZUFBQXZLLEtBQUEwTixlQUdBLE1BQUFBLFVBQUEvTyxRQUNBVSxLQUFBa0wsZUFBQXZLLEtBQUEwTixVQUFBQSxVQUFBL08sT0FBQSxHQUlBLGNBRkFVLE1BQUF3TixRQUFBN00sTUFFQVgsTUFHQTZLLGFBQUEzSSxVQUFBbU0sVUFBQSxTQUFBMU4sTUFDQSxHQUFBME8sSUFPQSxPQUhBQSxLQUhBclAsS0FBQXdOLFNBQUF4TixLQUFBd04sUUFBQTdNLE1BRUErTSxXQUFBMU4sS0FBQXdOLFFBQUE3TSxRQUNBWCxLQUFBd04sUUFBQTdNLE9BRUFYLEtBQUF3TixRQUFBN00sTUFBQTROLFlBSUExRCxhQUFBeUUsY0FBQSxTQUFBQyxRQUFBNU8sTUFDQSxHQUFBME8sSUFPQSxPQUhBQSxLQUhBRSxRQUFBL0IsU0FBQStCLFFBQUEvQixRQUFBN00sTUFFQStNLFdBQUE2QixRQUFBL0IsUUFBQTdNLE9BQ0EsRUFFQTRPLFFBQUEvQixRQUFBN00sTUFBQXJCLE9BSkEsUWIrNUJNa1EsSUFBSSxTQUFTMVEsUUFBUVUsT0FBT0osU0FDbEN1RCxVQUFVLEdBQUcsSUFBSSxHQUFHRCxNQUFNdEQsUUFBUXVELGFBQy9CK0osY0FBYyxHQUFHbkIsSUFBTSxLQUFLa0UsSUFBSSxTQUFTM1EsUUFBUVUsT0FBT0osU0FDM0R1RCxVQUFVLEdBQUcsSUFBSSxHQUFHRCxNQUFNdEQsUUFBUXVELGFBQy9CNEksSUFBTSxLQUFLbUUsSUFBSSxTQUFTNVEsUUFBUVUsT0FBT0osU2N6ckMxQyxZQUVBLFNBQUF1USxVQUFBcEosS0FDQSxHQUFBLE1BQUFBLElBQ0EsS0FBQSxJQUFBMkgsV0FBQSx3REFHQSxPQUFBMEIsUUFBQXJKLEtBR0EvRyxPQUFBSixRQUFBd1EsT0FBQTlFLFFBQUEsU0FBQStFLE9BQUFDLFFBS0EsSUFBQSxHQUpBQyxNQUNBQyxLQUNBQyxHQUFBTixTQUFBRSxRQUVBblIsRUFBQSxFQUFBQSxFQUFBaUUsVUFBQXJELE9BQUFaLElBQUEsQ0FDQXFSLEtBQUFwTixVQUFBakUsR0FDQXNSLEtBQUFKLE9BQUFJLEtBQUFKLE9BQUFHLE1BRUEsS0FBQSxHQUFBaFIsR0FBQSxFQUFBQSxFQUFBaVIsS0FBQTFRLE9BQUFQLElBQ0FrUixHQUFBRCxLQUFBalIsSUFBQWdSLEtBQUFDLEtBQUFqUixJQUlBLE1BQUFrUixlZDZyQ1csRUFBRSIsImZpbGUiOiJidWlsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgR2FtZUNvbXBvbmVudCwgVmlld0NvbnRyb2xsZXI7XG5cbiAgR2FtZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9HYW1lQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIFZpZXdDb250cm9sbGVyID0gUmVhY3QuY3JlYXRlRWxlbWVudChHYW1lQ29tcG9uZW50LCBudWxsKTtcblxuICBSZWFjdC5yZW5kZXIoVmlld0NvbnRyb2xsZXIsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaW5lc3dlZXBlcicpKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsbnVsbCwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbm1vZHVsZS5leHBvcnRzLkRpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2xpYi9EaXNwYXRjaGVyJylcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEFwcERpc3BhdGNoZXIsIERpc3BhdGNoZXIsIFRpbGVTdG9yZTtcblxuICBEaXNwYXRjaGVyID0gcmVxdWlyZSgnRmx1eCcpLkRpc3BhdGNoZXI7XG5cbiAgQXBwRGlzcGF0Y2hlciA9IG5ldyBEaXNwYXRjaGVyKCk7XG5cbiAgVGlsZVN0b3JlID0gcmVxdWlyZSgnLi9zdG9yZXMvVGlsZVN0b3JlLmNvZmZlZScpO1xuXG4gIEFwcERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgdGlsZTtcbiAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgIGNhc2UgJ1RJTEVfRkxBR19UT0dHTEUnOlxuICAgICAgICBjb25zb2xlLmxvZygndGlsZSBmbGFnJyk7XG4gICAgICAgIHRpbGUgPSBUaWxlU3RvcmUuZ2V0KHtcbiAgICAgICAgICB1aWQ6IGV2ZW50LnVpZFxuICAgICAgICB9KTtcbiAgICAgICAgdGlsZS50b2dnbGVGbGFnKCk7XG4gICAgICAgIHJldHVybiBUaWxlU3RvcmUuZW1pdENoYW5nZSgpO1xuICAgICAgY2FzZSAnVElMRV9DTEVBUic6XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aWxlIGNsZWFyJyk7XG4gICAgICAgIHRpbGUgPSBUaWxlU3RvcmUuZ2V0KHtcbiAgICAgICAgICB1aWQ6IGV2ZW50LnVpZFxuICAgICAgICB9KTtcbiAgICAgICAgdGlsZS5jbGVhcigpO1xuICAgICAgICByZXR1cm4gVGlsZVN0b3JlLmVtaXRDaGFuZ2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gQXBwRGlzcGF0Y2hlcjtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIERpc3BhdGNoZXI7XG5cbiAgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL0Rpc3BhdGNoZXIuY29mZmVlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdG9nZ2xlRmxhZzogZnVuY3Rpb24odWlkKSB7XG4gICAgICByZXR1cm4gRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdUSUxFX0ZMQUdfVE9HR0xFJyxcbiAgICAgICAgdWlkOiB1aWRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xlYXI6IGZ1bmN0aW9uKHVpZCkge1xuICAgICAgcmV0dXJuIERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnVElMRV9DTEVBUicsXG4gICAgICAgIHVpZDogdWlkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBUaWxlTW9kZWwsIFRpbGVzQ29sbGVjdGlvbixcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFRpbGVNb2RlbCA9IHJlcXVpcmUoJy4uL21vZGVscy9UaWxlTW9kZWwuY29mZmVlJyk7XG5cbiAgVGlsZXNDb2xsZWN0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFRpbGVzQ29sbGVjdGlvbigpIHtcbiAgICAgIHZhciBNb2RlbCwgY29sbGVjdGlvbjtcbiAgICAgIHRoaXMuYWxsID0gW107XG4gICAgICBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgIHRoaXMubW9kZWwgPSBNb2RlbCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgICAgIGV4dGVuZChNb2RlbCwgc3VwZXJDbGFzcyk7XG5cbiAgICAgICAgZnVuY3Rpb24gTW9kZWwoKSB7XG4gICAgICAgICAgcmV0dXJuIE1vZGVsLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgTW9kZWwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgTW9kZWwuX19zdXBlcl9fLmNsZWFyLmNhbGwodGhpcyk7XG4gICAgICAgICAgY29sbGVjdGlvbi5jbGVhck5laWdoYm9ycyh0aGlzKTtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5tb3ZlVXBkYXRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgTW9kZWwucHJvdG90eXBlLnRvZ2dsZUZsYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBNb2RlbC5fX3N1cGVyX18udG9nZ2xlRmxhZy5jYWxsKHRoaXMpO1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLm1vdmVVcGRhdGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBNb2RlbC5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICBjb2xsZWN0aW9uLm5vTWluZUZpcnN0Q2xpY2sodGhpcyk7XG4gICAgICAgICAgcmV0dXJuIE1vZGVsLl9fc3VwZXJfXy5jbGljay5jYWxsKHRoaXMsICRldmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIE1vZGVsO1xuXG4gICAgICB9KShUaWxlTW9kZWwpO1xuICAgICAgdGhpcy5uZXdHYW1lKCk7XG4gICAgfVxuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5uZXdHYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXR0cnMsIGksIGosIGssIG1pbmVOdW0sIHJlZiwgcmVmMSwgcmVmMiwgdGlsZSwgeCwgeTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIHRoaXMuc2l6ZVkgPSA0O1xuICAgICAgdGhpcy5zaXplWCA9IDc7XG4gICAgICB0aGlzLm51bU9mTWluZXMgPSA1O1xuICAgICAgZm9yICh5ID0gaSA9IDAsIHJlZiA9IHRoaXMuc2l6ZVkgLSAxOyAwIDw9IHJlZiA/IGkgPD0gcmVmIDogaSA+PSByZWY7IHkgPSAwIDw9IHJlZiA/ICsraSA6IC0taSkge1xuICAgICAgICBmb3IgKHggPSBqID0gMCwgcmVmMSA9IHRoaXMuc2l6ZVggLSAxOyAwIDw9IHJlZjEgPyBqIDw9IHJlZjEgOiBqID49IHJlZjE7IHggPSAwIDw9IHJlZjEgPyArK2ogOiAtLWopIHtcbiAgICAgICAgICBhdHRycyA9IHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLmFkZChhdHRycyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobWluZU51bSA9IGsgPSAxLCByZWYyID0gdGhpcy5udW1PZk1pbmVzOyAxIDw9IHJlZjIgPyBrIDw9IHJlZjIgOiBrID49IHJlZjI7IG1pbmVOdW0gPSAxIDw9IHJlZjIgPyArK2sgOiAtLWspIHtcbiAgICAgICAgdGlsZSA9IHRoaXMucmFuZG9tU2FmZVRpbGUoKTtcbiAgICAgICAgdGlsZS5tb2RlbC5pc01pbmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy50YWxseU1pbmVzKCk7XG4gICAgICByZXR1cm4gdGhpcy5nYW1lVXBkYXRlKCk7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUubm9NaW5lRmlyc3RDbGljayA9IGZ1bmN0aW9uKHRpbGUpIHtcbiAgICAgIGlmICh0aGlzLm51bU9mQ2xlYXJzID09PSAwICYmIHRpbGUubW9kZWwuaXNNaW5lID09PSB0cnVlKSB7XG4gICAgICAgIHRpbGUubW9kZWwuaXNNaW5lID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmFuZG9tU2FmZVRpbGUoKS5tb2RlbC5pc01pbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnRhbGx5TWluZXMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aWxlO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICB2YXIgdGlsZTtcbiAgICAgIHRpbGUgPSBuZXcgdGhpcy5tb2RlbChtb2RlbCk7XG4gICAgICB0aGlzLmFsbC5wdXNoKHRpbGUpO1xuICAgICAgcmV0dXJuIHRpbGU7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuaGFuZGxlVGlsZUNsaWNrID0gZnVuY3Rpb24oZXZlbnQsIGluZGV4KSB7fTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuYWxsID0gW107XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5yYW5kb21TYWZlVGlsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGZpbmRBdHRycywgcmFuZG9tSW5kZXgsIHNhZmVUaWxlcztcbiAgICAgIGZpbmRBdHRycyA9IHtcbiAgICAgICAgaXNDbGVhcjogZmFsc2UsXG4gICAgICAgIGlzTWluZTogZmFsc2VcbiAgICAgIH07XG4gICAgICBzYWZlVGlsZXMgPSB0aGlzLmdldEFsbChmaW5kQXR0cnMpO1xuICAgICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzYWZlVGlsZXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiBzYWZlVGlsZXNbcmFuZG9tSW5kZXhdO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLnRhbGx5TWluZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhZGphY2VudFRpbGUsIGksIGosIGxlbiwgbGVuMSwgbmVpZ2hib3JBdHRycywgbmVpZ2hib3JNaW5lLCBuZWlnaGJvck1pbmVzLCBuZWlnaGJvclgsIG5laWdoYm9yWSwgcmVmLCByZWYxLCByZXN1bHRzLCB0aWxlO1xuICAgICAgcmVmID0gdGhpcy5hbGw7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGlsZSA9IHJlZltpXTtcbiAgICAgICAgbmVpZ2hib3JNaW5lcyA9IDA7XG4gICAgICAgIHJlZjEgPSB0aWxlLmFkamFjZW50VGlsZXM7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgIGFkamFjZW50VGlsZSA9IHJlZjFbal07XG4gICAgICAgICAgbmVpZ2hib3JYID0gdGlsZS5tb2RlbC54ICsgYWRqYWNlbnRUaWxlWzBdO1xuICAgICAgICAgIG5laWdoYm9yWSA9IHRpbGUubW9kZWwueSArIGFkamFjZW50VGlsZVsxXTtcbiAgICAgICAgICBuZWlnaGJvckF0dHJzID0ge1xuICAgICAgICAgICAgaXNNaW5lOiB0cnVlLFxuICAgICAgICAgICAgeDogbmVpZ2hib3JYLFxuICAgICAgICAgICAgeTogbmVpZ2hib3JZXG4gICAgICAgICAgfTtcbiAgICAgICAgICBuZWlnaGJvck1pbmUgPSB0aGlzLmdldChuZWlnaGJvckF0dHJzKTtcbiAgICAgICAgICBpZiAobmVpZ2hib3JNaW5lICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG5laWdoYm9yTWluZXMrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cy5wdXNoKHRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcyA9IG5laWdoYm9yTWluZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2FtZVVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGksIGxlbiwgcmVmLCB0aWxlO1xuICAgICAgdGhpcy54ID0gTWF0aC5tYXguYXBwbHkodGhpcywgdGhpcy5hbGwubWFwKGZ1bmN0aW9uKHRpbGUpIHtcbiAgICAgICAgcmV0dXJuIHRpbGUubW9kZWwueDtcbiAgICAgIH0pKTtcbiAgICAgIHRoaXMueSA9IE1hdGgubWF4LmFwcGx5KHRoaXMsIHRoaXMuYWxsLm1hcChmdW5jdGlvbih0aWxlKSB7XG4gICAgICAgIHJldHVybiB0aWxlLm1vZGVsLnk7XG4gICAgICB9KSk7XG4gICAgICB0aGlzLnggPSB0aGlzLngtLTtcbiAgICAgIHRoaXMueSA9IHRoaXMueS0tO1xuICAgICAgdGhpcy5udW1PZk1pbmVzID0gMDtcbiAgICAgIHJlZiA9IHRoaXMuYWxsO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRpbGUgPSByZWZbaV07XG4gICAgICAgIGlmICh0aWxlLm1vZGVsLmlzTWluZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMubnVtT2ZNaW5lcysrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tb3ZlVXBkYXRlKCk7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUubW92ZVVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGksIGxlbiwgcmVmLCB0aWxlO1xuICAgICAgdGhpcy5sb3NzID0gZmFsc2U7XG4gICAgICB0aGlzLndpbiA9IGZhbHNlO1xuICAgICAgdGhpcy5udW1PZkNsZWFycyA9IDA7XG4gICAgICB0aGlzLm51bU9mRmxhZ3MgPSAwO1xuICAgICAgcmVmID0gdGhpcy5hbGw7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGlsZSA9IHJlZltpXTtcbiAgICAgICAgaWYgKHRpbGUubW9kZWwuaXNDbGVhciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMubnVtT2ZDbGVhcnMrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGlsZS5tb2RlbC5pc0ZsYWdnZWQgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLm51bU9mRmxhZ3MrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGlsZS5tb2RlbC5pc01pbmUgPT09IHRydWUgJiYgdGlsZS5tb2RlbC5pc0NsZWFyID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5sb3NzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMubG9zcyA9PT0gZmFsc2UgJiYgdGhpcy5hbGwubGVuZ3RoIC0gdGhpcy5udW1PZk1pbmVzIC0gdGhpcy5udW1PZkNsZWFycyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aW4gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmNsZWFyTmVpZ2hib3JzID0gZnVuY3Rpb24odGlsZSkge1xuICAgICAgdmFyIGFkamFjZW50VGlsZSwgaSwgbGVuLCBuZWlnaGJvciwgcmVmLCByZXN1bHRzLCBzaG91bGRDbGVhck5laWdoYm9yLCBzaG91bGRDbGVhck5laWdoYm9ycztcbiAgICAgIHNob3VsZENsZWFyTmVpZ2hib3JzID0gdGlsZS5tb2RlbC5hZGphY2VudE1pbmVzID09PSAwICYmIHRpbGUubW9kZWwuaXNNaW5lID09PSBmYWxzZTtcbiAgICAgIGlmIChzaG91bGRDbGVhck5laWdoYm9ycykge1xuICAgICAgICByZWYgPSB0aWxlLmFkamFjZW50VGlsZXM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYWRqYWNlbnRUaWxlID0gcmVmW2ldO1xuICAgICAgICAgIG5laWdoYm9yID0gdGhpcy5nZXQoe1xuICAgICAgICAgICAgeDogdGlsZS5tb2RlbC54ICsgYWRqYWNlbnRUaWxlWzBdLFxuICAgICAgICAgICAgeTogdGlsZS5tb2RlbC55ICsgYWRqYWNlbnRUaWxlWzFdXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2hvdWxkQ2xlYXJOZWlnaGJvciA9IG5laWdoYm9yICYmIG5laWdoYm9yLm1vZGVsLmlzQ2xlYXIgPT09IGZhbHNlICYmIG5laWdoYm9yLm1vZGVsLmlzTWluZSA9PT0gZmFsc2U7XG4gICAgICAgICAgaWYgKHNob3VsZENsZWFyTmVpZ2hib3IpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChuZWlnaGJvci5jbGljaygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBbGwoYXR0cnMpWzBdO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgICB2YXIgaSwga2V5LCBsZW4sIG1hdGNoZXMsIG51bU9mQXR0cnMsIG51bU9mTWF0Y2hlZEF0dHJzLCByZWYsIHRpbGUsIHZhbDtcbiAgICAgIG1hdGNoZXMgPSBbXTtcbiAgICAgIGlmICghYXR0cnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsO1xuICAgICAgfVxuICAgICAgcmVmID0gdGhpcy5hbGw7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGlsZSA9IHJlZltpXTtcbiAgICAgICAgbnVtT2ZBdHRycyA9IDA7XG4gICAgICAgIG51bU9mTWF0Y2hlZEF0dHJzID0gMDtcbiAgICAgICAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICB2YWwgPSBhdHRyc1trZXldO1xuICAgICAgICAgIG51bU9mQXR0cnMrKztcbiAgICAgICAgICBpZiAodGlsZS5tb2RlbFtrZXldID09PSB2YWwpIHtcbiAgICAgICAgICAgIG51bU9mTWF0Y2hlZEF0dHJzKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChudW1PZk1hdGNoZWRBdHRycyA9PT0gbnVtT2ZBdHRycykge1xuICAgICAgICAgIG1hdGNoZXMucHVzaCh0aWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0SW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbnVtT2ZUaWxlczogdGhpcy5hbGwubGVuZ3RoLFxuICAgICAgICBudW1PZk1pbmVzOiB0aGlzLm51bU9mTWluZXMsXG4gICAgICAgIG51bU9mRmxhZ3M6IHRoaXMubnVtT2ZGbGFncyxcbiAgICAgICAgbnVtT2ZVbmNsZWFyZWQ6IHRoaXMuYWxsLmxlbmd0aCAtIHRoaXMubnVtT2ZNaW5lcyAtIHRoaXMubnVtT2ZDbGVhcnNcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBUaWxlc0NvbGxlY3Rpb247XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGVzQ29sbGVjdGlvbjtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIERpc3BhdGNoZXIsIEdhbWUsIEluZm9Db21wb25lbnQsIFIsIFRpbGVTdG9yZSwgVGlsZXNDb21wb25lbnQsIGdldFN0YXRlO1xuXG4gIFRpbGVzQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9UaWxlc0NvbXBvbmVudC5jb2ZmZWUnKTtcblxuICBJbmZvQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9JbmZvQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIERpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9EaXNwYXRjaGVyLmNvZmZlZScpO1xuXG4gIFRpbGVTdG9yZSA9IHJlcXVpcmUoJy4uL3N0b3Jlcy9UaWxlU3RvcmUuY29mZmVlJyk7XG5cbiAgUiA9IFJlYWN0LkRPTTtcblxuICBnZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbGw6IFRpbGVTdG9yZS5nZXRBbGwoKSxcbiAgICAgIGluZm86IFRpbGVTdG9yZS5nZXRJbmZvKClcbiAgICB9O1xuICB9O1xuXG4gIEdhbWUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdHYW1lJyxcbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldFN0YXRlKCk7XG4gICAgfSxcbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVGlsZVN0b3JlLmFkZENoYW5nZUxpc3RlbmVyKHRoaXMuX29uQ2hhbmdlKTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUaWxlU3RvcmUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIodGhpcy5fb25DaGFuZ2UpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBSLmRpdih7XG4gICAgICAgIGlkOiAnZ2FtZSdcbiAgICAgIH0sIFtcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbmZvQ29tcG9uZW50LCB7XG4gICAgICAgICAgaW5mbzogdGhpcy5zdGF0ZS5pbmZvXG4gICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVzQ29tcG9uZW50LCB7XG4gICAgICAgICAgdGlsZXM6IHRoaXMuc3RhdGUuYWxsXG4gICAgICAgIH0pXG4gICAgICBdKTtcbiAgICB9LFxuICAgIF9vbkNoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnY2hhbmdlIScpO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoZ2V0U3RhdGUoKSk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEdhbWU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBJbmZvLCBSO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgSW5mbyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0luZm8nLFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUi51bCh7XG4gICAgICAgIGlkOiAnc3RhdHMnXG4gICAgICB9LCBbUi5saShudWxsLCB0aGlzLnByb3BzLmluZm8ubnVtT2ZUaWxlcyArIFwiIHRpbGVzXCIpLCBSLmxpKG51bGwsIHRoaXMucHJvcHMuaW5mby5udW1PZk1pbmVzICsgXCIgbWluZXNcIiksIFIubGkobnVsbCwgdGhpcy5wcm9wcy5pbmZvLm51bU9mRmxhZ3MgKyBcIiBmbGFnZ2VkIHRpbGVzXCIpLCBSLmxpKG51bGwsIHRoaXMucHJvcHMuaW5mby5udW1PZlVuY2xlYXJlZCArIFwiIGxlZnQgdG8gY2xlYXJcIildKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gSW5mbztcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIFIsIFRpbGUsIFRpbGVBY3Rpb25zO1xuXG4gIFRpbGVBY3Rpb25zID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9UaWxlQWN0aW9ucy5jb2ZmZWUnKTtcblxuICBSID0gUmVhY3QuRE9NO1xuXG4gIFRpbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdUaWxlJyxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFIubGkoe1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3MoKSxcbiAgICAgICAgb25DbGljazogdGhpcy5jbGlja0hhbmRsZXJcbiAgICAgIH0sIFIuc3BhbihudWxsLCB0aGlzLmdldFRleHQoKSkpO1xuICAgIH0sXG4gICAgY2xpY2tIYW5kbGVyOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgIHZhciBmbGFnS2V5V2FzUHJlc3NlZDtcbiAgICAgIGlmICghJGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBUaWxlQWN0aW9ucy5jbGVhcih0aGlzLnByb3BzLnRpbGUubW9kZWwudWlkKTtcbiAgICAgIH1cbiAgICAgIGZsYWdLZXlXYXNQcmVzc2VkID0gJGV2ZW50LnNoaWZ0S2V5ID09PSB0cnVlIHx8ICRldmVudC5hbHRLZXkgPT09IHRydWU7XG4gICAgICBpZiAoZmxhZ0tleVdhc1ByZXNzZWQpIHtcbiAgICAgICAgcmV0dXJuIFRpbGVBY3Rpb25zLnRvZ2dsZUZsYWcodGhpcy5wcm9wcy50aWxlLm1vZGVsLnVpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVGlsZUFjdGlvbnMuY2xlYXIodGhpcy5wcm9wcy50aWxlLm1vZGVsLnVpZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc0ZpcnN0Q29sdW1uOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpbGUubW9kZWwueCA9PT0gMDtcbiAgICB9LFxuICAgIGhhc0JlZW5GbGFnZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpbGUubW9kZWwuaXNDbGVhciAhPT0gdHJ1ZSAmJiB0aGlzLnByb3BzLnRpbGUubW9kZWwuaXNGbGFnZ2VkID09PSB0cnVlO1xuICAgIH0sXG4gICAgaGFzQmVlbkNsZWFyZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGlsZS5tb2RlbC5pc0NsZWFyID09PSB0cnVlO1xuICAgIH0sXG4gICAgaGFzTWluZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy50aWxlLm1vZGVsLmlzTWluZSA9PT0gdHJ1ZTtcbiAgICB9LFxuICAgIHNob3VsZERpc3BsYXlNaW5lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhc01pbmUoKSAmJiB0aGlzLmhhc0JlZW5DbGVhcmVkKCk7XG4gICAgfSxcbiAgICBoYXNaZXJvQWRqYWNlbnRNaW5lczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy50aWxlLm1vZGVsLmFkamFjZW50TWluZXMgPT09IDAgJiYgIXRoaXMuaGFzTWluZSgpO1xuICAgIH0sXG4gICAgZ2V0VGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGV4dDtcbiAgICAgIHRleHQgPSB0aGlzLnByb3BzLnRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcztcbiAgICAgIGlmICh0aGlzLmhhc0JlZW5GbGFnZ2VkKCkpIHtcbiAgICAgICAgdGV4dCA9ICc/JztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zaG91bGREaXNwbGF5TWluZSgpKSB7XG4gICAgICAgIHRleHQgPSAnWCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9LFxuICAgIGdldENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbJ3RpbGUnLCB0aGlzLmlzRmlyc3RDb2x1bW4oKSA/ICdudGgnIDogdm9pZCAwLCB0aGlzLmhhc0JlZW5DbGVhcmVkKCkgPyAnY2xlYXInIDogdm9pZCAwLCB0aGlzLmhhc0JlZW5GbGFnZ2VkKCkgPyAnZmxhZ2dlZCcgOiB2b2lkIDAsIHRoaXMuc2hvdWxkRGlzcGxheU1pbmUoKSA/ICdtaW5lJyA6IHZvaWQgMCwgdGhpcy5oYXNaZXJvQWRqYWNlbnRNaW5lcygpID8gJ2NsZWFyIHplcm8nIDogdm9pZCAwXS5qb2luKCcgJyk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBSLCBUaWxlQ29tcG9uZW50LCBUaWxlcztcblxuICBUaWxlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9UaWxlQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgVGlsZXMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdUaWxlcycsXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0aWxlcztcbiAgICAgIHRpbGVzID0gdGhpcy5wcm9wcy50aWxlcy5tYXAoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICByZWY6IGl0ZW0ubW9kZWwudWlkLFxuICAgICAgICAgICAgdGlsZTogaXRlbVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgcmV0dXJuIFIudWwoe1xuICAgICAgICBpZDogJ2JvYXJkJ1xuICAgICAgfSwgdGlsZXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaWxlcztcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIFRpbGVNb2RlbDtcblxuICBOdW1iZXIuaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGVNb2RlbCA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBUaWxlTW9kZWwoYXR0cnMpIHtcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhdHRycy54KSB8fCAhTnVtYmVyLmlzSW50ZWdlcihhdHRycy55KSkge1xuICAgICAgICB0aHJvdyBcImB4YCBhbmQgYHlgIGFyZSByZXF1aXJlZCBJbnRlZ2VyIGF0dHJpYnV0ZXMgdG8gaW5zdGFudGlhdGUgVGlsZVwiO1xuICAgICAgfVxuICAgICAgdGhpcy5tb2RlbCA9IHtcbiAgICAgICAgeDogdm9pZCAwLFxuICAgICAgICB5OiB2b2lkIDAsXG4gICAgICAgIHVpZDogdm9pZCAwLFxuICAgICAgICBpc01pbmU6IGZhbHNlLFxuICAgICAgICBpc0NsZWFyOiBmYWxzZSxcbiAgICAgICAgaXNGbGFnZ2VkOiBmYWxzZSxcbiAgICAgICAgYWRqYWNlbnRNaW5lczogMFxuICAgICAgfTtcbiAgICAgIHRoaXMuYWRqYWNlbnRUaWxlcyA9IFtbLTEsIC0xXSwgWzAsIC0xXSwgWzEsIC0xXSwgWy0xLCAwXSwgWzEsIDBdLCBbLTEsIDFdLCBbMCwgMV0sIFsxLCAxXV07XG4gICAgICB0aGlzLnNldChhdHRycyk7XG4gICAgfVxuXG4gICAgVGlsZU1vZGVsLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihhdHRycykge1xuICAgICAgdmFyIGF0dHIsIGtleTtcbiAgICAgIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGF0dHIgPSBhdHRyc1trZXldO1xuICAgICAgICB0aGlzLm1vZGVsW2tleV0gPSBhdHRyO1xuICAgICAgICB0aGlzLm1vZGVsLnVpZCA9IFN0cmluZyhhdHRycy54KSArICctJyArIFN0cmluZyhhdHRycy55KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBUaWxlTW9kZWwucHJvdG90eXBlLnRvZ2dsZUZsYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubW9kZWwuaXNGbGFnZ2VkID0gIXRoaXMubW9kZWwuaXNGbGFnZ2VkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFRpbGVNb2RlbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubW9kZWwuaXNDbGVhciA9IHRydWU7XG4gICAgICB0aGlzLm1vZGVsLmlzRmxhZ2dlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFRpbGVNb2RlbC5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgIHZhciBmbGFnS2V5V2FzUHJlc3NlZDtcbiAgICAgIGlmICghJGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsZWFyKCk7XG4gICAgICB9XG4gICAgICBmbGFnS2V5V2FzUHJlc3NlZCA9ICRldmVudC5zaGlmdEtleSA9PT0gdHJ1ZSB8fCAkZXZlbnQuYWx0S2V5ID09PSB0cnVlO1xuICAgICAgaWYgKGZsYWdLZXlXYXNQcmVzc2VkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUZsYWcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBUaWxlTW9kZWw7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEV2ZW50RW1pdHRlciwgVGlsZVN0b3JlLCBUaWxlcywgVGlsZXNDb2xsZWN0aW9uLCBhc3NpZ247XG5cbiAgVGlsZXNDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMvVGlsZXNDb2xsZWN0aW9uLmNvZmZlZScpO1xuXG4gIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuICBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbiAgVGlsZXMgPSBuZXcgVGlsZXNDb2xsZWN0aW9uKCk7XG5cbiAgVGlsZVN0b3JlID0gYXNzaWduKHt9LCBFdmVudEVtaXR0ZXIucHJvdG90eXBlLCB7XG4gICAgZXZlbnQ6ICdjaGFuZ2UnLFxuICAgIGdldDogZnVuY3Rpb24oYXR0cnMpIHtcbiAgICAgIHJldHVybiBUaWxlcy5nZXQoYXR0cnMpO1xuICAgIH0sXG4gICAgZ2V0QWxsOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUaWxlcy5nZXRBbGwoKTtcbiAgICB9LFxuICAgIGdldEluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFRpbGVzLmdldEluZm8oKTtcbiAgICB9LFxuICAgIGVtaXRDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdCh0aGlzLmV2ZW50KTtcbiAgICB9LFxuICAgIGFkZENoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMub24odGhpcy5ldmVudCwgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2hhbmdlTGlzdGVuZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMaXN0ZW5lcih0aGlzLmV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGVTdG9yZTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGlzcGF0Y2hlclxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbnZhciBfbGFzdElEID0gMTtcbnZhciBfcHJlZml4ID0gJ0lEXyc7XG5cbi8qKlxuICogRGlzcGF0Y2hlciBpcyB1c2VkIHRvIGJyb2FkY2FzdCBwYXlsb2FkcyB0byByZWdpc3RlcmVkIGNhbGxiYWNrcy4gVGhpcyBpc1xuICogZGlmZmVyZW50IGZyb20gZ2VuZXJpYyBwdWItc3ViIHN5c3RlbXMgaW4gdHdvIHdheXM6XG4gKlxuICogICAxKSBDYWxsYmFja3MgYXJlIG5vdCBzdWJzY3JpYmVkIHRvIHBhcnRpY3VsYXIgZXZlbnRzLiBFdmVyeSBwYXlsb2FkIGlzXG4gKiAgICAgIGRpc3BhdGNoZWQgdG8gZXZlcnkgcmVnaXN0ZXJlZCBjYWxsYmFjay5cbiAqICAgMikgQ2FsbGJhY2tzIGNhbiBiZSBkZWZlcnJlZCBpbiB3aG9sZSBvciBwYXJ0IHVudGlsIG90aGVyIGNhbGxiYWNrcyBoYXZlXG4gKiAgICAgIGJlZW4gZXhlY3V0ZWQuXG4gKlxuICogRm9yIGV4YW1wbGUsIGNvbnNpZGVyIHRoaXMgaHlwb3RoZXRpY2FsIGZsaWdodCBkZXN0aW5hdGlvbiBmb3JtLCB3aGljaFxuICogc2VsZWN0cyBhIGRlZmF1bHQgY2l0eSB3aGVuIGEgY291bnRyeSBpcyBzZWxlY3RlZDpcbiAqXG4gKiAgIHZhciBmbGlnaHREaXNwYXRjaGVyID0gbmV3IERpc3BhdGNoZXIoKTtcbiAqXG4gKiAgIC8vIEtlZXBzIHRyYWNrIG9mIHdoaWNoIGNvdW50cnkgaXMgc2VsZWN0ZWRcbiAqICAgdmFyIENvdW50cnlTdG9yZSA9IHtjb3VudHJ5OiBudWxsfTtcbiAqXG4gKiAgIC8vIEtlZXBzIHRyYWNrIG9mIHdoaWNoIGNpdHkgaXMgc2VsZWN0ZWRcbiAqICAgdmFyIENpdHlTdG9yZSA9IHtjaXR5OiBudWxsfTtcbiAqXG4gKiAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSBiYXNlIGZsaWdodCBwcmljZSBvZiB0aGUgc2VsZWN0ZWQgY2l0eVxuICogICB2YXIgRmxpZ2h0UHJpY2VTdG9yZSA9IHtwcmljZTogbnVsbH1cbiAqXG4gKiBXaGVuIGEgdXNlciBjaGFuZ2VzIHRoZSBzZWxlY3RlZCBjaXR5LCB3ZSBkaXNwYXRjaCB0aGUgcGF5bG9hZDpcbiAqXG4gKiAgIGZsaWdodERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICogICAgIGFjdGlvblR5cGU6ICdjaXR5LXVwZGF0ZScsXG4gKiAgICAgc2VsZWN0ZWRDaXR5OiAncGFyaXMnXG4gKiAgIH0pO1xuICpcbiAqIFRoaXMgcGF5bG9hZCBpcyBkaWdlc3RlZCBieSBgQ2l0eVN0b3JlYDpcbiAqXG4gKiAgIGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgIGlmIChwYXlsb2FkLmFjdGlvblR5cGUgPT09ICdjaXR5LXVwZGF0ZScpIHtcbiAqICAgICAgIENpdHlTdG9yZS5jaXR5ID0gcGF5bG9hZC5zZWxlY3RlZENpdHk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBXaGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBjb3VudHJ5LCB3ZSBkaXNwYXRjaCB0aGUgcGF5bG9hZDpcbiAqXG4gKiAgIGZsaWdodERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICogICAgIGFjdGlvblR5cGU6ICdjb3VudHJ5LXVwZGF0ZScsXG4gKiAgICAgc2VsZWN0ZWRDb3VudHJ5OiAnYXVzdHJhbGlhJ1xuICogICB9KTtcbiAqXG4gKiBUaGlzIHBheWxvYWQgaXMgZGlnZXN0ZWQgYnkgYm90aCBzdG9yZXM6XG4gKlxuICogICAgQ291bnRyeVN0b3JlLmRpc3BhdGNoVG9rZW4gPSBmbGlnaHREaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAqICAgICBpZiAocGF5bG9hZC5hY3Rpb25UeXBlID09PSAnY291bnRyeS11cGRhdGUnKSB7XG4gKiAgICAgICBDb3VudHJ5U3RvcmUuY291bnRyeSA9IHBheWxvYWQuc2VsZWN0ZWRDb3VudHJ5O1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogV2hlbiB0aGUgY2FsbGJhY2sgdG8gdXBkYXRlIGBDb3VudHJ5U3RvcmVgIGlzIHJlZ2lzdGVyZWQsIHdlIHNhdmUgYSByZWZlcmVuY2VcbiAqIHRvIHRoZSByZXR1cm5lZCB0b2tlbi4gVXNpbmcgdGhpcyB0b2tlbiB3aXRoIGB3YWl0Rm9yKClgLCB3ZSBjYW4gZ3VhcmFudGVlXG4gKiB0aGF0IGBDb3VudHJ5U3RvcmVgIGlzIHVwZGF0ZWQgYmVmb3JlIHRoZSBjYWxsYmFjayB0aGF0IHVwZGF0ZXMgYENpdHlTdG9yZWBcbiAqIG5lZWRzIHRvIHF1ZXJ5IGl0cyBkYXRhLlxuICpcbiAqICAgQ2l0eVN0b3JlLmRpc3BhdGNoVG9rZW4gPSBmbGlnaHREaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAqICAgICBpZiAocGF5bG9hZC5hY3Rpb25UeXBlID09PSAnY291bnRyeS11cGRhdGUnKSB7XG4gKiAgICAgICAvLyBgQ291bnRyeVN0b3JlLmNvdW50cnlgIG1heSBub3QgYmUgdXBkYXRlZC5cbiAqICAgICAgIGZsaWdodERpc3BhdGNoZXIud2FpdEZvcihbQ291bnRyeVN0b3JlLmRpc3BhdGNoVG9rZW5dKTtcbiAqICAgICAgIC8vIGBDb3VudHJ5U3RvcmUuY291bnRyeWAgaXMgbm93IGd1YXJhbnRlZWQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiAgICAgICAvLyBTZWxlY3QgdGhlIGRlZmF1bHQgY2l0eSBmb3IgdGhlIG5ldyBjb3VudHJ5XG4gKiAgICAgICBDaXR5U3RvcmUuY2l0eSA9IGdldERlZmF1bHRDaXR5Rm9yQ291bnRyeShDb3VudHJ5U3RvcmUuY291bnRyeSk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBUaGUgdXNhZ2Ugb2YgYHdhaXRGb3IoKWAgY2FuIGJlIGNoYWluZWQsIGZvciBleGFtcGxlOlxuICpcbiAqICAgRmxpZ2h0UHJpY2VTdG9yZS5kaXNwYXRjaFRva2VuID1cbiAqICAgICBmbGlnaHREaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAqICAgICAgIHN3aXRjaCAocGF5bG9hZC5hY3Rpb25UeXBlKSB7XG4gKiAgICAgICAgIGNhc2UgJ2NvdW50cnktdXBkYXRlJzpcbiAqICAgICAgICAgICBmbGlnaHREaXNwYXRjaGVyLndhaXRGb3IoW0NpdHlTdG9yZS5kaXNwYXRjaFRva2VuXSk7XG4gKiAgICAgICAgICAgRmxpZ2h0UHJpY2VTdG9yZS5wcmljZSA9XG4gKiAgICAgICAgICAgICBnZXRGbGlnaHRQcmljZVN0b3JlKENvdW50cnlTdG9yZS5jb3VudHJ5LCBDaXR5U3RvcmUuY2l0eSk7XG4gKiAgICAgICAgICAgYnJlYWs7XG4gKlxuICogICAgICAgICBjYXNlICdjaXR5LXVwZGF0ZSc6XG4gKiAgICAgICAgICAgRmxpZ2h0UHJpY2VTdG9yZS5wcmljZSA9XG4gKiAgICAgICAgICAgICBGbGlnaHRQcmljZVN0b3JlKENvdW50cnlTdG9yZS5jb3VudHJ5LCBDaXR5U3RvcmUuY2l0eSk7XG4gKiAgICAgICAgICAgYnJlYWs7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBUaGUgYGNvdW50cnktdXBkYXRlYCBwYXlsb2FkIHdpbGwgYmUgZ3VhcmFudGVlZCB0byBpbnZva2UgdGhlIHN0b3JlcydcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzIGluIG9yZGVyOiBgQ291bnRyeVN0b3JlYCwgYENpdHlTdG9yZWAsIHRoZW5cbiAqIGBGbGlnaHRQcmljZVN0b3JlYC5cbiAqL1xuXG4gIGZ1bmN0aW9uIERpc3BhdGNoZXIoKSB7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3MgPSB7fTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzUGVuZGluZyA9IHt9O1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNIYW5kbGVkID0ge307XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9wZW5kaW5nUGF5bG9hZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aXRoIGV2ZXJ5IGRpc3BhdGNoZWQgcGF5bG9hZC4gUmV0dXJuc1xuICAgKiBhIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBgd2FpdEZvcigpYC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUucmVnaXN0ZXI9ZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgaWQgPSBfcHJlZml4ICsgX2xhc3RJRCsrO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzW2lkXSA9IGNhbGxiYWNrO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNhbGxiYWNrIGJhc2VkIG9uIGl0cyB0b2tlbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS51bnJlZ2lzdGVyPWZ1bmN0aW9uKGlkKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3NbaWRdLFxuICAgICAgJ0Rpc3BhdGNoZXIudW5yZWdpc3RlciguLi4pOiBgJXNgIGRvZXMgbm90IG1hcCB0byBhIHJlZ2lzdGVyZWQgY2FsbGJhY2suJyxcbiAgICAgIGlkXG4gICAgKTtcbiAgICBkZWxldGUgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3NbaWRdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBXYWl0cyBmb3IgdGhlIGNhbGxiYWNrcyBzcGVjaWZpZWQgdG8gYmUgaW52b2tlZCBiZWZvcmUgY29udGludWluZyBleGVjdXRpb25cbiAgICogb2YgdGhlIGN1cnJlbnQgY2FsbGJhY2suIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIHVzZWQgYnkgYSBjYWxsYmFjayBpblxuICAgKiByZXNwb25zZSB0byBhIGRpc3BhdGNoZWQgcGF5bG9hZC5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBpZHNcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLndhaXRGb3I9ZnVuY3Rpb24oaWRzKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nLFxuICAgICAgJ0Rpc3BhdGNoZXIud2FpdEZvciguLi4pOiBNdXN0IGJlIGludm9rZWQgd2hpbGUgZGlzcGF0Y2hpbmcuJ1xuICAgICk7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGlkcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciBpZCA9IGlkc1tpaV07XG4gICAgICBpZiAodGhpcy4kRGlzcGF0Y2hlcl9pc1BlbmRpbmdbaWRdKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICB0aGlzLiREaXNwYXRjaGVyX2lzSGFuZGxlZFtpZF0sXG4gICAgICAgICAgJ0Rpc3BhdGNoZXIud2FpdEZvciguLi4pOiBDaXJjdWxhciBkZXBlbmRlbmN5IGRldGVjdGVkIHdoaWxlICcgK1xuICAgICAgICAgICd3YWl0aW5nIGZvciBgJXNgLicsXG4gICAgICAgICAgaWRcbiAgICAgICAgKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzW2lkXSxcbiAgICAgICAgJ0Rpc3BhdGNoZXIud2FpdEZvciguLi4pOiBgJXNgIGRvZXMgbm90IG1hcCB0byBhIHJlZ2lzdGVyZWQgY2FsbGJhY2suJyxcbiAgICAgICAgaWRcbiAgICAgICk7XG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2ludm9rZUNhbGxiYWNrKGlkKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYSBwYXlsb2FkIHRvIGFsbCByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBheWxvYWRcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLmRpc3BhdGNoPWZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhdGhpcy4kRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nLFxuICAgICAgJ0Rpc3BhdGNoLmRpc3BhdGNoKC4uLik6IENhbm5vdCBkaXNwYXRjaCBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guJ1xuICAgICk7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9zdGFydERpc3BhdGNoaW5nKHBheWxvYWQpO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBpZCBpbiB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrcykge1xuICAgICAgICBpZiAodGhpcy4kRGlzcGF0Y2hlcl9pc1BlbmRpbmdbaWRdKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pbnZva2VDYWxsYmFjayhpZCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfc3RvcERpc3BhdGNoaW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIERpc3BhdGNoZXIgY3VycmVudGx5IGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuaXNEaXNwYXRjaGluZz1mdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxsIHRoZSBjYWxsYmFjayBzdG9yZWQgd2l0aCB0aGUgZ2l2ZW4gaWQuIEFsc28gZG8gc29tZSBpbnRlcm5hbFxuICAgKiBib29ra2VlcGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuJERpc3BhdGNoZXJfaW52b2tlQ2FsbGJhY2s9ZnVuY3Rpb24oaWQpIHtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzUGVuZGluZ1tpZF0gPSB0cnVlO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzW2lkXSh0aGlzLiREaXNwYXRjaGVyX3BlbmRpbmdQYXlsb2FkKTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzSGFuZGxlZFtpZF0gPSB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgdXAgYm9va2tlZXBpbmcgbmVlZGVkIHdoZW4gZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXlsb2FkXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuJERpc3BhdGNoZXJfc3RhcnREaXNwYXRjaGluZz1mdW5jdGlvbihwYXlsb2FkKSB7XG4gICAgZm9yICh2YXIgaWQgaW4gdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3MpIHtcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nW2lkXSA9IGZhbHNlO1xuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0hhbmRsZWRbaWRdID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuJERpc3BhdGNoZXJfcGVuZGluZ1BheWxvYWQgPSBwYXlsb2FkO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIENsZWFyIGJvb2trZWVwaW5nIHVzZWQgZm9yIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLiREaXNwYXRjaGVyX3N0b3BEaXNwYXRjaGluZz1mdW5jdGlvbigpIHtcbiAgICB0aGlzLiREaXNwYXRjaGVyX3BlbmRpbmdQYXlsb2FkID0gbnVsbDtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgfTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERpc3BhdGNoZXI7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnZhcmlhbnRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChmYWxzZSkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdJbnZhcmlhbnQgVmlvbGF0aW9uOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuJyk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICB2YXIgbTtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2Uge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IDA7XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24oZW1pdHRlci5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSAxO1xuICBlbHNlXG4gICAgcmV0ID0gZW1pdHRlci5fZXZlbnRzW3R5cGVdLmxlbmd0aDtcbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gVG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciBrZXlzO1xuXHR2YXIgdG8gPSBUb09iamVjdCh0YXJnZXQpO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IGFyZ3VtZW50c1tzXTtcblx0XHRrZXlzID0gT2JqZWN0LmtleXMoT2JqZWN0KGZyb20pKTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dG9ba2V5c1tpXV0gPSBmcm9tW2tleXNbaV1dO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=