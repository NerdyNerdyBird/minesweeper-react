!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){(function(){var GameComponent,ViewController;GameComponent=require("./components/GameComponent.coffee"),ViewController=React.createElement(GameComponent,null),React.render(ViewController,document.getElementById("minesweeper"))}).call(this)},{"./components/GameComponent.coffee":8}],2:[function(require,module,exports){module.exports.Dispatcher=require("./lib/Dispatcher")},{"./lib/Dispatcher":19}],3:[function(require,module,exports){(function(){var AppDispatcher,Dispatcher,TileStore;Dispatcher=require("Flux").Dispatcher,AppDispatcher=new Dispatcher,TileStore=require("./stores/TileStore.coffee"),AppDispatcher.register(function(event){var tile;switch(event.type){case"TILE_FLAG_TOGGLE":return console.log("tile flag"),tile=TileStore.get({uid:event.uid}),tile.toggleFlag(),TileStore.emitChange();case"TILE_CLEAR":return console.log("tile clear"),tile=TileStore.get({uid:event.uid}),tile.clear(),TileStore.emitChange();case"TILES_CLEAR_SAFE_RANDOM":if(console.log("tiles clear safe random"),tile=TileStore.randomSafeTile())return tile.clear(),TileStore.emitChange();break;case"TILES_NEW_GAME":return console.log("newGame"),TileStore.newGame(8,4,10),TileStore.emitChange()}}),module.exports=AppDispatcher}).call(this)},{"./stores/TileStore.coffee":14,Flux:15}],4:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={toggleFlag:function(uid){return Dispatcher.dispatch({type:"TILE_FLAG_TOGGLE",uid:uid})},clear:function(uid){return Dispatcher.dispatch({type:"TILE_CLEAR",uid:uid})}}}).call(this)},{"../Dispatcher.coffee":3}],5:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={clearSafeRandomTile:function(){return console.log("csrt"),Dispatcher.dispatch({type:"TILES_CLEAR_SAFE_RANDOM"})},newGame:function(){return console.log("new game"),Dispatcher.dispatch({type:"TILES_NEW_GAME"})}}}).call(this)},{"../Dispatcher.coffee":3}],6:[function(require,module,exports){(function(){var TileModel,TilesCollection,extend=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child},hasProp={}.hasOwnProperty;TileModel=require("../models/TileModel.coffee"),TilesCollection=function(){function TilesCollection(){var Model,collection;this.all=[],collection=this,this.model=Model=function(superClass){function Model(){return Model.__super__.constructor.apply(this,arguments)}return extend(Model,superClass),Model.prototype.clear=function(){return Model.__super__.clear.call(this),collection.clearNeighbors(this),collection.moveUpdate()},Model.prototype.toggleFlag=function(){return Model.__super__.toggleFlag.call(this),collection.moveUpdate()},Model.prototype.click=function($event){return collection.noMineFirstClick(this),Model.__super__.click.call(this,$event)},Model}(TileModel)}return TilesCollection.prototype.newGame=function(x,y,mines){var attrs,i,j,k,mineNum,ref,ref1,ref2,tile;for(this.reset(),this.sizeY=x,this.sizeX=y,this.numOfMines=mines,y=i=0,ref=this.sizeY-1;ref>=0?ref>=i:i>=ref;y=ref>=0?++i:--i)for(x=j=0,ref1=this.sizeX-1;ref1>=0?ref1>=j:j>=ref1;x=ref1>=0?++j:--j)attrs={x:x,y:y},this.add(attrs);for(mineNum=k=1,ref2=this.numOfMines;ref2>=1?ref2>=k:k>=ref2;mineNum=ref2>=1?++k:--k)tile=this.randomSafeTile(),tile.model.isMine=!0;return this.tallyMines(),this.gameUpdate()},TilesCollection.prototype.noMineFirstClick=function(tile){return 0===this.numOfClears&&tile.model.isMine===!0&&(tile.model.isMine=!1,this.randomSafeTile().model.isMine=!0,this.tallyMines()),tile},TilesCollection.prototype.add=function(model){var tile;return tile=new this.model(model),this.all.push(tile),tile},TilesCollection.prototype.handleTileClick=function(event,index){},TilesCollection.prototype.reset=function(){return this.all=[],this},TilesCollection.prototype.randomSafeTile=function(){var findAttrs,randomIndex,safeTiles;return findAttrs={isClear:!1,isMine:!1},safeTiles=this.getAll(findAttrs),randomIndex=Math.floor(Math.random()*safeTiles.length),safeTiles[randomIndex]},TilesCollection.prototype.tallyMines=function(){var adjacentTile,i,j,len,len1,neighborAttrs,neighborMine,neighborMines,neighborX,neighborY,ref,ref1,results,tile;for(ref=this.all,results=[],i=0,len=ref.length;len>i;i++){for(tile=ref[i],neighborMines=0,ref1=tile.adjacentTiles,j=0,len1=ref1.length;len1>j;j++)adjacentTile=ref1[j],neighborX=tile.model.x+adjacentTile[0],neighborY=tile.model.y+adjacentTile[1],neighborAttrs={isMine:!0,x:neighborX,y:neighborY},neighborMine=this.get(neighborAttrs),void 0!==neighborMine&&neighborMines++;results.push(tile.model.adjacentMines=neighborMines)}return results},TilesCollection.prototype.gameUpdate=function(){var i,len,ref,tile;for(this.x=Math.max.apply(this,this.all.map(function(tile){return tile.model.x})),this.y=Math.max.apply(this,this.all.map(function(tile){return tile.model.y})),this.x=this.x--,this.y=this.y--,this.numOfMines=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isMine===!0&&this.numOfMines++;return this.moveUpdate()},TilesCollection.prototype.moveUpdate=function(){var i,len,ref,tile;for(this.loss=!1,this.win=!1,this.numOfClears=0,this.numOfFlags=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isClear===!0&&this.numOfClears++,tile.model.isFlagged===!0&&this.numOfFlags++,tile.model.isMine===!0&&tile.model.isClear===!0&&(this.loss=!0);return this.loss===!1&&this.all.length-this.numOfMines-this.numOfClears===0?this.win=!0:void 0},TilesCollection.prototype.clearNeighbors=function(tile){var adjacentTile,i,len,neighbor,ref,results,shouldClearNeighbor,shouldClearNeighbors;if(shouldClearNeighbors=0===tile.model.adjacentMines&&tile.model.isMine===!1){for(ref=tile.adjacentTiles,results=[],i=0,len=ref.length;len>i;i++)adjacentTile=ref[i],neighbor=this.get({x:tile.model.x+adjacentTile[0],y:tile.model.y+adjacentTile[1]}),shouldClearNeighbor=neighbor&&neighbor.model.isClear===!1&&neighbor.model.isMine===!1,results.push(shouldClearNeighbor?neighbor.click():void 0);return results}},TilesCollection.prototype.get=function(attrs){return this.getAll(attrs)[0]},TilesCollection.prototype.getAll=function(attrs){var i,key,len,matches,numOfAttrs,numOfMatchedAttrs,ref,tile,val;if(matches=[],!attrs)return this.all;for(ref=this.all,i=0,len=ref.length;len>i;i++){tile=ref[i],numOfAttrs=0,numOfMatchedAttrs=0;for(key in attrs)val=attrs[key],numOfAttrs++,tile.model[key]===val&&numOfMatchedAttrs++;numOfMatchedAttrs===numOfAttrs&&matches.push(tile)}return matches},TilesCollection}(),module.exports=TilesCollection}).call(this)},{"../models/TileModel.coffee":13}],7:[function(require,module,exports){(function(){var Dashboard,R,TilesActions;TilesActions=require("../actions/TilesActions.coffee"),R=React.DOM,Dashboard=React.createClass({displayName:"Dashboard",render:function(){return R.div({id:"dashboard"},[R.div({key:"new-game",className:"new-game button",onClick:TilesActions.newGame},"new game"),R.div({key:"select-tile",className:"select-tile button",onClick:TilesActions.clearSafeRandomTile},"clear a safe tile"),R.div({key:"instructions",className:"instructions button"},"instructions")])}}),module.exports=Dashboard}).call(this)},{"../actions/TilesActions.coffee":5}],8:[function(require,module,exports){(function(){var DashboardComponent,Dispatcher,Game,InfoComponent,ModalOverlayComponent,R,TileStore,TilesComponent,getState;Dispatcher=require("../Dispatcher.coffee"),TileStore=require("../stores/TileStore.coffee"),TilesComponent=require("./TilesComponent.coffee"),InfoComponent=require("./InfoComponent.coffee"),DashboardComponent=require("./DashboardComponent.coffee"),ModalOverlayComponent=require("./modals/ModalOverlayComponent.coffee"),R=React.DOM,getState=function(){return{all:TileStore.getAll(),info:TileStore.getInfo()}},Game=React.createClass({displayName:"Game",getInitialState:function(){return getState()},componentDidMount:function(){return TileStore.addChangeListener(this._onChange)},componentWillUnmount:function(){return TileStore.removeChangeListener(this._onChange)},render:function(){var ModalOverlay,boardWrappper,dashboard,info,tiles;return info=React.createElement(InfoComponent,{key:"info",info:this.state.info}),tiles=React.createElement(TilesComponent,{key:"tiles",tiles:this.state.all}),boardWrappper=R.div({id:"board-wrappper",key:"board-wrappper"},[info,tiles]),dashboard=React.createElement(DashboardComponent,{key:"dashboard"}),ModalOverlay=React.createElement(ModalOverlayComponent,{key:"modal-overlay",info:this.state.info}),R.div(null,[boardWrappper,dashboard,ModalOverlay])},_onChange:function(){return console.log("change!"),this.setState(getState())}}),module.exports=Game}).call(this)},{"../Dispatcher.coffee":3,"../stores/TileStore.coffee":14,"./DashboardComponent.coffee":7,"./InfoComponent.coffee":9,"./TilesComponent.coffee":11,"./modals/ModalOverlayComponent.coffee":12}],9:[function(require,module,exports){(function(){var Info,R;R=React.DOM,Info=React.createClass({displayName:"Info",render:function(){return R.ul({id:"stats"},[R.li({key:"tiles"},this.props.info.numOfTiles+" tiles"),R.li({key:"mines"},this.props.info.numOfMines+" mines"),R.li({key:"flagged"},this.props.info.numOfFlags+" flagged tiles"),R.li({key:"cleared"},this.props.info.numOfUncleared+" left to clear")])}}),module.exports=Info}).call(this)},{}],10:[function(require,module,exports){(function(){var R,Tile,TileActions;TileActions=require("../actions/TileActions.coffee"),R=React.DOM,Tile=React.createClass({displayName:"Tile",render:function(){return R.li({className:this.getClass(),onClick:this.clickHandler},R.span(null,this.getText()))},clickHandler:function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?TileActions.toggleFlag(this.props.tile.model.uid):TileActions.clear(this.props.tile.model.uid)):TileActions.clear(this.props.tile.model.uid)},isFirstColumn:function(){return 0===this.props.tile.model.x},hasBeenFlagged:function(){return this.props.tile.model.isClear!==!0&&this.props.tile.model.isFlagged===!0},hasBeenCleared:function(){return this.props.tile.model.isClear===!0},hasMine:function(){return this.props.tile.model.isMine===!0},shouldDisplayMine:function(){return this.hasMine()&&this.hasBeenCleared()},hasZeroAdjacentMines:function(){return 0===this.props.tile.model.adjacentMines&&!this.hasMine()},getText:function(){var text;return text=this.props.tile.model.adjacentMines,this.hasBeenFlagged()?text="?":this.shouldDisplayMine()&&(text="X"),text},getClass:function(){return["tile",this.isFirstColumn()?"nth":void 0,this.hasBeenCleared()?"clear":void 0,this.hasBeenFlagged()?"flagged":void 0,this.shouldDisplayMine()?"mine":void 0,this.hasZeroAdjacentMines()?"clear zero":void 0].join(" ")}}),module.exports=Tile}).call(this)},{"../actions/TileActions.coffee":4}],11:[function(require,module,exports){(function(){var R,TileComponent,Tiles;TileComponent=require("./TileComponent.coffee"),R=React.DOM,Tiles=React.createClass({displayName:"Tiles",render:function(){var tiles;return tiles=this.props.tiles.map(function(_this){return function(item,index){return React.createElement(TileComponent,{key:index,ref:item.model.uid,tile:item})}}(this)),R.ul({id:"board"},tiles)}}),module.exports=Tiles}).call(this)},{"./TileComponent.coffee":10}],12:[function(require,module,exports){(function(){var ModalOverlay,R;R=React.DOM,ModalOverlay=React.createClass({displayName:"ModalOverlay",getClass:function(){return console.log(this.props.info.loss,this.props.info.win),this.props.info.loss||this.props.info.win?"":"hide"},render:function(){return R.div({id:"overlay",className:this.getClass()},null)}}),module.exports=ModalOverlay}).call(this)},{}],13:[function(require,module,exports){(function(){var TileModel;Number.isInteger=Number.isInteger||function(value){return"number"==typeof value&&isFinite(value)&&Math.floor(value)===value},module.exports=TileModel=function(){function TileModel(attrs){if(!Number.isInteger(attrs.x)||!Number.isInteger(attrs.y))throw"`x` and `y` are required Integer attributes to instantiate Tile";this.model={x:void 0,y:void 0,uid:void 0,isMine:!1,isClear:!1,isFlagged:!1,adjacentMines:0},this.adjacentTiles=[[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]],this.set(attrs)}return TileModel.prototype.set=function(attrs){var attr,key;for(key in attrs)attr=attrs[key],this.model[key]=attr,this.model.uid=String(attrs.x)+"-"+String(attrs.y);return this},TileModel.prototype.toggleFlag=function(){return this.model.isFlagged=!this.model.isFlagged,this},TileModel.prototype.clear=function(){return this.model.isClear=!0,this.model.isFlagged=!1,this},TileModel.prototype.click=function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?this.toggleFlag():this.clear()):this.clear()},TileModel}()}).call(this)},{}],14:[function(require,module,exports){(function(){var EventEmitter,TileStore,Tiles,TilesCollection,assign;TilesCollection=require("../collections/TilesCollection.coffee"),EventEmitter=require("events").EventEmitter,assign=require("object-assign"),Tiles=new TilesCollection,Tiles.newGame(4,7,5),TileStore=assign({},EventEmitter.prototype,{event:"change",get:function(attrs){return Tiles.get(attrs)},getAll:function(){return Tiles.getAll()},getInfo:function(){return{win:Tiles.win,loss:Tiles.loss,numOfTiles:Tiles.all.length,numOfMines:Tiles.numOfMines,numOfFlags:Tiles.numOfFlags,numOfUncleared:Tiles.all.length-Tiles.numOfMines-Tiles.numOfClears}},randomSafeTile:function(){return Tiles.randomSafeTile()},newGame:function(x,y,mines){return Tiles.newGame(x,y,mines)},emitChange:function(){return this.emit(this.event)},addChangeListener:function(callback){return this.on(this.event,callback)},removeChangeListener:function(callback){return this.removeListener(this.event,callback)}}),module.exports=TileStore}).call(this)},{"../collections/TilesCollection.coffee":6,events:18,"object-assign":21}],15:[function(require,module,exports){arguments[4][2][0].apply(exports,arguments)},{"./lib/Dispatcher":16,dup:2}],16:[function(require,module,exports){"use strict";function Dispatcher(){this.$Dispatcher_callbacks={},this.$Dispatcher_isPending={},this.$Dispatcher_isHandled={},this.$Dispatcher_isDispatching=!1,this.$Dispatcher_pendingPayload=null}var invariant=require("./invariant"),_lastID=1,_prefix="ID_";Dispatcher.prototype.register=function(callback){var id=_prefix+_lastID++;return this.$Dispatcher_callbacks[id]=callback,id},Dispatcher.prototype.unregister=function(id){invariant(this.$Dispatcher_callbacks[id],"Dispatcher.unregister(...): `%s` does not map to a registered callback.",id),delete this.$Dispatcher_callbacks[id]},Dispatcher.prototype.waitFor=function(ids){invariant(this.$Dispatcher_isDispatching,"Dispatcher.waitFor(...): Must be invoked while dispatching.");for(var ii=0;ii<ids.length;ii++){var id=ids[ii];this.$Dispatcher_isPending[id]?invariant(this.$Dispatcher_isHandled[id],"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",id):(invariant(this.$Dispatcher_callbacks[id],"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",id),this.$Dispatcher_invokeCallback(id))}},Dispatcher.prototype.dispatch=function(payload){invariant(!this.$Dispatcher_isDispatching,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."),this.$Dispatcher_startDispatching(payload);try{for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]||this.$Dispatcher_invokeCallback(id)}finally{this.$Dispatcher_stopDispatching()}},Dispatcher.prototype.isDispatching=function(){return this.$Dispatcher_isDispatching},Dispatcher.prototype.$Dispatcher_invokeCallback=function(id){this.$Dispatcher_isPending[id]=!0,this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload),this.$Dispatcher_isHandled[id]=!0},Dispatcher.prototype.$Dispatcher_startDispatching=function(payload){for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]=!1,this.$Dispatcher_isHandled[id]=!1;this.$Dispatcher_pendingPayload=payload,this.$Dispatcher_isDispatching=!0},Dispatcher.prototype.$Dispatcher_stopDispatching=function(){this.$Dispatcher_pendingPayload=null,this.$Dispatcher_isDispatching=!1},module.exports=Dispatcher},{"./invariant":17}],17:[function(require,module,exports){"use strict";var invariant=function(condition,format,a,b,c,d,e,f){if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;error=new Error("Invariant Violation: "+format.replace(/%s/g,function(){return args[argIndex++]}))}throw error.framesToPop=1,error}};module.exports=invariant},{}],18:[function(require,module,exports){function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(arg){return"function"==typeof arg}function isNumber(arg){return"number"==typeof arg}function isObject(arg){return"object"==typeof arg&&null!==arg}function isUndefined(arg){return void 0===arg}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||0>n||isNaN(n))throw TypeError("n must be a positive number");return this._maxListeners=n,this},EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(this._events||(this._events={}),"error"===type&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if(er=arguments[1],er instanceof Error)throw er;throw TypeError('Uncaught, unspecified "error" event.')}if(handler=this._events[type],isUndefined(handler))return!1;if(isFunction(handler))switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];handler.apply(this,args)}else if(isObject(handler)){for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];for(listeners=handler.slice(),len=listeners.length,i=0;len>i;i++)listeners[i].apply(this,args)}return!0},EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",type,isFunction(listener.listener)?listener.listener:listener),this._events[type]?isObject(this._events[type])?this._events[type].push(listener):this._events[type]=[this._events[type],listener]:this._events[type]=listener,isObject(this._events[type])&&!this._events[type].warned){var m;m=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners,m&&m>0&&this._events[type].length>m&&(this._events[type].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[type].length),"function"==typeof console.trace&&console.trace())}return this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(type,listener){function g(){this.removeListener(type,g),fired||(fired=!0,listener.apply(this,arguments))}if(!isFunction(listener))throw TypeError("listener must be a function");var fired=!1;return g.listener=listener,this.on(type,g),this},EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError("listener must be a function");if(!this._events||!this._events[type])return this;if(list=this._events[type],length=list.length,position=-1,list===listener||isFunction(list.listener)&&list.listener===listener)delete this._events[type],this._events.removeListener&&this.emit("removeListener",type,listener);else if(isObject(list)){for(i=length;i-->0;)if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break}if(0>position)return this;1===list.length?(list.length=0,delete this._events[type]):list.splice(position,1),this._events.removeListener&&this.emit("removeListener",type,listener)}return this},EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[type]&&delete this._events[type],this;if(0===arguments.length){for(key in this._events)"removeListener"!==key&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events={},this}if(listeners=this._events[type],isFunction(listeners))this.removeListener(type,listeners);else for(;listeners.length;)this.removeListener(type,listeners[listeners.length-1]);return delete this._events[type],this},EventEmitter.prototype.listeners=function(type){var ret;return ret=this._events&&this._events[type]?isFunction(this._events[type])?[this._events[type]]:this._events[type].slice():[]},EventEmitter.listenerCount=function(emitter,type){var ret;return ret=emitter._events&&emitter._events[type]?isFunction(emitter._events[type])?1:emitter._events[type].length:0}},{}],19:[function(require,module,exports){arguments[4][16][0].apply(exports,arguments)},{"./invariant":20,dup:16}],20:[function(require,module,exports){arguments[4][17][0].apply(exports,arguments)},{dup:17}],21:[function(require,module,exports){"use strict";function ToObject(val){if(null==val)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(val)}module.exports=Object.assign||function(target,source){for(var from,keys,to=ToObject(target),s=1;s<arguments.length;s++){from=arguments[s],keys=Object.keys(Object(from));for(var i=0;i<keys.length;i++)to[keys[i]]=from[keys[i]]}return to}},{}]},{},[1,2]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJSZXNvdXJjZXMvY29mZmVlL0FwcC5jb2ZmZWUiLCJidWlsZC5qcyIsIm5vZGVfbW9kdWxlcy9mbHV4L2luZGV4LmpzIiwiUmVzb3VyY2VzL2NvZmZlZS9EaXNwYXRjaGVyLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvYWN0aW9ucy9UaWxlQWN0aW9ucy5jb2ZmZWUiLCJSZXNvdXJjZXMvY29mZmVlL2FjdGlvbnMvVGlsZXNBY3Rpb25zLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29sbGVjdGlvbnMvVGlsZXNDb2xsZWN0aW9uLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29tcG9uZW50cy9EYXNoYm9hcmRDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL0dhbWVDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL0luZm9Db21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL1RpbGVDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL1RpbGVzQ29tcG9uZW50LmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29tcG9uZW50cy9tb2RhbHMvTW9kYWxPdmVybGF5Q29tcG9uZW50LmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvbW9kZWxzL1RpbGVNb2RlbC5jb2ZmZWUiLCJSZXNvdXJjZXMvY29mZmVlL3N0b3Jlcy9UaWxlU3RvcmUuY29mZmVlIiwibm9kZV9tb2R1bGVzL0ZsdXgvbGliL0Rpc3BhdGNoZXIuanMiLCJub2RlX21vZHVsZXMvRmx1eC9saWIvaW52YXJpYW50LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsMSwibW9kdWxlIiwiR2FtZUNvbXBvbmVudCIsIlZpZXdDb250cm9sbGVyIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwicmVuZGVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInRoaXMiLCIuL2NvbXBvbmVudHMvR2FtZUNvbXBvbmVudC5jb2ZmZWUiLDIsIkRpc3BhdGNoZXIiLCIuL2xpYi9EaXNwYXRjaGVyIiwzLCJBcHBEaXNwYXRjaGVyIiwiVGlsZVN0b3JlIiwicmVnaXN0ZXIiLCJldmVudCIsInRpbGUiLCJ0eXBlIiwiY29uc29sZSIsImxvZyIsImdldCIsInVpZCIsInRvZ2dsZUZsYWciLCJlbWl0Q2hhbmdlIiwiY2xlYXIiLCJyYW5kb21TYWZlVGlsZSIsIm5ld0dhbWUiLCIuL3N0b3Jlcy9UaWxlU3RvcmUuY29mZmVlIiwiRmx1eCIsNCwiZGlzcGF0Y2giLCIuLi9EaXNwYXRjaGVyLmNvZmZlZSIsNSwiY2xlYXJTYWZlUmFuZG9tVGlsZSIsNiwiVGlsZU1vZGVsIiwiVGlsZXNDb2xsZWN0aW9uIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJrZXkiLCJoYXNQcm9wIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJNb2RlbCIsImNvbGxlY3Rpb24iLCJhbGwiLCJtb2RlbCIsInN1cGVyQ2xhc3MiLCJhcHBseSIsImFyZ3VtZW50cyIsImNsZWFyTmVpZ2hib3JzIiwibW92ZVVwZGF0ZSIsImNsaWNrIiwiJGV2ZW50Iiwibm9NaW5lRmlyc3RDbGljayIsIngiLCJ5IiwibWluZXMiLCJhdHRycyIsImoiLCJrIiwibWluZU51bSIsInJlZiIsInJlZjEiLCJyZWYyIiwicmVzZXQiLCJzaXplWSIsInNpemVYIiwibnVtT2ZNaW5lcyIsImFkZCIsImlzTWluZSIsInRhbGx5TWluZXMiLCJnYW1lVXBkYXRlIiwibnVtT2ZDbGVhcnMiLCJwdXNoIiwiaGFuZGxlVGlsZUNsaWNrIiwiaW5kZXgiLCJmaW5kQXR0cnMiLCJyYW5kb21JbmRleCIsInNhZmVUaWxlcyIsImlzQ2xlYXIiLCJnZXRBbGwiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhZGphY2VudFRpbGUiLCJsZW4iLCJsZW4xIiwibmVpZ2hib3JBdHRycyIsIm5laWdoYm9yTWluZSIsIm5laWdoYm9yTWluZXMiLCJuZWlnaGJvclgiLCJuZWlnaGJvclkiLCJyZXN1bHRzIiwiYWRqYWNlbnRUaWxlcyIsImFkamFjZW50TWluZXMiLCJtYXgiLCJtYXAiLCJsb3NzIiwid2luIiwibnVtT2ZGbGFncyIsImlzRmxhZ2dlZCIsIm5laWdoYm9yIiwic2hvdWxkQ2xlYXJOZWlnaGJvciIsInNob3VsZENsZWFyTmVpZ2hib3JzIiwibWF0Y2hlcyIsIm51bU9mQXR0cnMiLCJudW1PZk1hdGNoZWRBdHRycyIsInZhbCIsIi4uL21vZGVscy9UaWxlTW9kZWwuY29mZmVlIiw3LCJEYXNoYm9hcmQiLCJSIiwiVGlsZXNBY3Rpb25zIiwiRE9NIiwiY3JlYXRlQ2xhc3MiLCJkaXNwbGF5TmFtZSIsImRpdiIsImlkIiwiY2xhc3NOYW1lIiwib25DbGljayIsIi4uL2FjdGlvbnMvVGlsZXNBY3Rpb25zLmNvZmZlZSIsOCwiRGFzaGJvYXJkQ29tcG9uZW50IiwiR2FtZSIsIkluZm9Db21wb25lbnQiLCJNb2RhbE92ZXJsYXlDb21wb25lbnQiLCJUaWxlc0NvbXBvbmVudCIsImdldFN0YXRlIiwiaW5mbyIsImdldEluZm8iLCJnZXRJbml0aWFsU3RhdGUiLCJjb21wb25lbnREaWRNb3VudCIsImFkZENoYW5nZUxpc3RlbmVyIiwiX29uQ2hhbmdlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVDaGFuZ2VMaXN0ZW5lciIsIk1vZGFsT3ZlcmxheSIsImJvYXJkV3JhcHBwZXIiLCJkYXNoYm9hcmQiLCJ0aWxlcyIsInN0YXRlIiwic2V0U3RhdGUiLCIuLi9zdG9yZXMvVGlsZVN0b3JlLmNvZmZlZSIsIi4vRGFzaGJvYXJkQ29tcG9uZW50LmNvZmZlZSIsIi4vSW5mb0NvbXBvbmVudC5jb2ZmZWUiLCIuL1RpbGVzQ29tcG9uZW50LmNvZmZlZSIsIi4vbW9kYWxzL01vZGFsT3ZlcmxheUNvbXBvbmVudC5jb2ZmZWUiLDksIkluZm8iLCJ1bCIsImxpIiwicHJvcHMiLCJudW1PZlRpbGVzIiwibnVtT2ZVbmNsZWFyZWQiLDEwLCJUaWxlIiwiVGlsZUFjdGlvbnMiLCJnZXRDbGFzcyIsImNsaWNrSGFuZGxlciIsInNwYW4iLCJnZXRUZXh0IiwiZmxhZ0tleVdhc1ByZXNzZWQiLCJzaGlmdEtleSIsImFsdEtleSIsImlzRmlyc3RDb2x1bW4iLCJoYXNCZWVuRmxhZ2dlZCIsImhhc0JlZW5DbGVhcmVkIiwiaGFzTWluZSIsInNob3VsZERpc3BsYXlNaW5lIiwiaGFzWmVyb0FkamFjZW50TWluZXMiLCJ0ZXh0Iiwiam9pbiIsIi4uL2FjdGlvbnMvVGlsZUFjdGlvbnMuY29mZmVlIiwxMSwiVGlsZUNvbXBvbmVudCIsIlRpbGVzIiwiX3RoaXMiLCJpdGVtIiwiLi9UaWxlQ29tcG9uZW50LmNvZmZlZSIsMTIsMTMsIk51bWJlciIsImlzSW50ZWdlciIsInZhbHVlIiwiaXNGaW5pdGUiLCJzZXQiLCJhdHRyIiwiU3RyaW5nIiwxNCwiRXZlbnRFbWl0dGVyIiwiYXNzaWduIiwiZW1pdCIsImNhbGxiYWNrIiwib24iLCJyZW1vdmVMaXN0ZW5lciIsIi4uL2NvbGxlY3Rpb25zL1RpbGVzQ29sbGVjdGlvbi5jb2ZmZWUiLCJldmVudHMiLCJvYmplY3QtYXNzaWduIiwxNSwiZHVwIiwxNiwiJERpc3BhdGNoZXJfY2FsbGJhY2tzIiwiJERpc3BhdGNoZXJfaXNQZW5kaW5nIiwiJERpc3BhdGNoZXJfaXNIYW5kbGVkIiwiJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyIsIiREaXNwYXRjaGVyX3BlbmRpbmdQYXlsb2FkIiwiaW52YXJpYW50IiwiX2xhc3RJRCIsIl9wcmVmaXgiLCJ1bnJlZ2lzdGVyIiwid2FpdEZvciIsImlkcyIsImlpIiwiJERpc3BhdGNoZXJfaW52b2tlQ2FsbGJhY2siLCJwYXlsb2FkIiwiJERpc3BhdGNoZXJfc3RhcnREaXNwYXRjaGluZyIsIiREaXNwYXRjaGVyX3N0b3BEaXNwYXRjaGluZyIsImlzRGlzcGF0Y2hpbmciLCIuL2ludmFyaWFudCIsMTcsImNvbmRpdGlvbiIsImZvcm1hdCIsImIiLCJjIiwiZCIsImVycm9yIiwidW5kZWZpbmVkIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwxOCwiX2V2ZW50cyIsIl9tYXhMaXN0ZW5lcnMiLCJpc0Z1bmN0aW9uIiwiYXJnIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwiZGVmYXVsdE1heExpc3RlbmVycyIsInNldE1heExpc3RlbmVycyIsImlzTmFOIiwiVHlwZUVycm9yIiwiZXIiLCJoYW5kbGVyIiwibGlzdGVuZXJzIiwiQXJyYXkiLCJzbGljZSIsImFkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJtIiwibmV3TGlzdGVuZXIiLCJ3YXJuZWQiLCJ0cmFjZSIsIm9uY2UiLCJnIiwiZmlyZWQiLCJsaXN0IiwicG9zaXRpb24iLCJzcGxpY2UiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZXQiLCJsaXN0ZW5lckNvdW50IiwiZW1pdHRlciIsMTksMjAsMjEsIlRvT2JqZWN0IiwiT2JqZWN0IiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsImtleXMiLCJ0byJdLCJtYXBwaW5ncyI6IkNBQUEsUUFBQUEsR0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxRQUFBQyxHQUFBQyxFQUFBQyxHQUFBLElBQUFKLEVBQUFHLEdBQUEsQ0FBQSxJQUFBSixFQUFBSSxHQUFBLENBQUEsR0FBQUUsR0FBQSxrQkFBQUMsVUFBQUEsT0FBQSxLQUFBRixHQUFBQyxFQUFBLE1BQUFBLEdB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UUFDQVgsS0FBQXVPLFFBQUE1TixPQUVBWCxLQUFBdU8sUUFBQTVOLE1BQUEyTyxZQUlBMUQsYUFBQXlFLGNBQUEsU0FBQUMsUUFBQTNQLE1BQ0EsR0FBQXlQLElBT0EsT0FIQUEsS0FIQUUsUUFBQS9CLFNBQUErQixRQUFBL0IsUUFBQTVOLE1BRUE4TixXQUFBNkIsUUFBQS9CLFFBQUE1TixPQUNBLEVBRUEyUCxRQUFBL0IsUUFBQTVOLE1BQUFyQixPQUpBLFFoQjhoQ01pUixJQUFJLFNBQVN6UixRQUFRVSxPQUFPSixTQUNsQzJELFVBQVUsR0FBRyxJQUFJLEdBQUdELE1BQU0xRCxRQUFRMkQsYUFDL0IwSyxjQUFjLEdBQUduQixJQUFNLEtBQUtrRSxJQUFJLFNBQVMxUixRQUFRVSxPQUFPSixTQUMzRDJELFVBQVUsR0FBRyxJQUFJLEdBQUdELE1BQU0xRCxRQUFRMkQsYUFDL0J1SixJQUFNLEtBQUttRSxJQUFJLFNBQVMzUixRQUFRVSxPQUFPSixTaUJ4ekMxQyxZQUVBLFNBQUFzUixVQUFBaEssS0FDQSxHQUFBLE1BQUFBLElBQ0EsS0FBQSxJQUFBdUksV0FBQSx3REFHQSxPQUFBMEIsUUFBQWpLLEtBR0FsSCxPQUFBSixRQUFBdVIsT0FBQTlFLFFBQUEsU0FBQStFLE9BQUFDLFFBS0EsSUFBQSxHQUpBQyxNQUNBQyxLQUNBQyxHQUFBTixTQUFBRSxRQUVBbFMsRUFBQSxFQUFBQSxFQUFBcUUsVUFBQXpELE9BQUFaLElBQUEsQ0FDQW9TLEtBQUEvTixVQUFBckUsR0FDQXFTLEtBQUFKLE9BQUFJLEtBQUFKLE9BQUFHLE1BRUEsS0FBQSxHQUFBL1IsR0FBQSxFQUFBQSxFQUFBZ1MsS0FBQXpSLE9BQUFQLElBQ0FpUyxHQUFBRCxLQUFBaFMsSUFBQStSLEtBQUFDLEtBQUFoUyxJQUlBLE1BQUFpUyxlakI0ekNXLEVBQUUiLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEdhbWVDb21wb25lbnQsIFZpZXdDb250cm9sbGVyO1xuXG4gIEdhbWVDb21wb25lbnQgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvR2FtZUNvbXBvbmVudC5jb2ZmZWUnKTtcblxuICBWaWV3Q29udHJvbGxlciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2FtZUNvbXBvbmVudCwgbnVsbCk7XG5cbiAgUmVhY3QucmVuZGVyKFZpZXdDb250cm9sbGVyLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWluZXN3ZWVwZXInKSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLG51bGwsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5EaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9saWIvRGlzcGF0Y2hlcicpXG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBBcHBEaXNwYXRjaGVyLCBEaXNwYXRjaGVyLCBUaWxlU3RvcmU7XG5cbiAgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJ0ZsdXgnKS5EaXNwYXRjaGVyO1xuXG4gIEFwcERpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcigpO1xuXG4gIFRpbGVTdG9yZSA9IHJlcXVpcmUoJy4vc3RvcmVzL1RpbGVTdG9yZS5jb2ZmZWUnKTtcblxuICBBcHBEaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHRpbGU7XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlICdUSUxFX0ZMQUdfVE9HR0xFJzpcbiAgICAgICAgY29uc29sZS5sb2coJ3RpbGUgZmxhZycpO1xuICAgICAgICB0aWxlID0gVGlsZVN0b3JlLmdldCh7XG4gICAgICAgICAgdWlkOiBldmVudC51aWRcbiAgICAgICAgfSk7XG4gICAgICAgIHRpbGUudG9nZ2xlRmxhZygpO1xuICAgICAgICByZXR1cm4gVGlsZVN0b3JlLmVtaXRDaGFuZ2UoKTtcbiAgICAgIGNhc2UgJ1RJTEVfQ0xFQVInOlxuICAgICAgICBjb25zb2xlLmxvZygndGlsZSBjbGVhcicpO1xuICAgICAgICB0aWxlID0gVGlsZVN0b3JlLmdldCh7XG4gICAgICAgICAgdWlkOiBldmVudC51aWRcbiAgICAgICAgfSk7XG4gICAgICAgIHRpbGUuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIFRpbGVTdG9yZS5lbWl0Q2hhbmdlKCk7XG4gICAgICBjYXNlICdUSUxFU19DTEVBUl9TQUZFX1JBTkRPTSc6XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aWxlcyBjbGVhciBzYWZlIHJhbmRvbScpO1xuICAgICAgICB0aWxlID0gVGlsZVN0b3JlLnJhbmRvbVNhZmVUaWxlKCk7XG4gICAgICAgIGlmICh0aWxlKSB7XG4gICAgICAgICAgdGlsZS5jbGVhcigpO1xuICAgICAgICAgIHJldHVybiBUaWxlU3RvcmUuZW1pdENoYW5nZSgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnVElMRVNfTkVXX0dBTUUnOlxuICAgICAgICBjb25zb2xlLmxvZygnbmV3R2FtZScpO1xuICAgICAgICBUaWxlU3RvcmUubmV3R2FtZSg4LCA0LCAxMCk7XG4gICAgICAgIHJldHVybiBUaWxlU3RvcmUuZW1pdENoYW5nZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBBcHBEaXNwYXRjaGVyO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGlzcGF0Y2hlcjtcblxuICBEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vRGlzcGF0Y2hlci5jb2ZmZWUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB0b2dnbGVGbGFnOiBmdW5jdGlvbih1aWQpIHtcbiAgICAgIHJldHVybiBEaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1RJTEVfRkxBR19UT0dHTEUnLFxuICAgICAgICB1aWQ6IHVpZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24odWlkKSB7XG4gICAgICByZXR1cm4gRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdUSUxFX0NMRUFSJyxcbiAgICAgICAgdWlkOiB1aWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIERpc3BhdGNoZXI7XG5cbiAgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL0Rpc3BhdGNoZXIuY29mZmVlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY2xlYXJTYWZlUmFuZG9tVGlsZTogZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnY3NydCcpO1xuICAgICAgcmV0dXJuIERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnVElMRVNfQ0xFQVJfU0FGRV9SQU5ET00nXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG5ld0dhbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2coJ25ldyBnYW1lJyk7XG4gICAgICByZXR1cm4gRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdUSUxFU19ORVdfR0FNRSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIFRpbGVNb2RlbCwgVGlsZXNDb2xsZWN0aW9uLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgVGlsZU1vZGVsID0gcmVxdWlyZSgnLi4vbW9kZWxzL1RpbGVNb2RlbC5jb2ZmZWUnKTtcblxuICBUaWxlc0NvbGxlY3Rpb24gPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVGlsZXNDb2xsZWN0aW9uKCkge1xuICAgICAgdmFyIE1vZGVsLCBjb2xsZWN0aW9uO1xuICAgICAgdGhpcy5hbGwgPSBbXTtcbiAgICAgIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgdGhpcy5tb2RlbCA9IE1vZGVsID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICAgICAgZXh0ZW5kKE1vZGVsLCBzdXBlckNsYXNzKTtcblxuICAgICAgICBmdW5jdGlvbiBNb2RlbCgpIHtcbiAgICAgICAgICByZXR1cm4gTW9kZWwuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICBNb2RlbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBNb2RlbC5fX3N1cGVyX18uY2xlYXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uLmNsZWFyTmVpZ2hib3JzKHRoaXMpO1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLm1vdmVVcGRhdGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBNb2RlbC5wcm90b3R5cGUudG9nZ2xlRmxhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIE1vZGVsLl9fc3VwZXJfXy50b2dnbGVGbGFnLmNhbGwodGhpcyk7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24ubW92ZVVwZGF0ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIE1vZGVsLnByb3RvdHlwZS5jbGljayA9IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgIGNvbGxlY3Rpb24ubm9NaW5lRmlyc3RDbGljayh0aGlzKTtcbiAgICAgICAgICByZXR1cm4gTW9kZWwuX19zdXBlcl9fLmNsaWNrLmNhbGwodGhpcywgJGV2ZW50KTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gTW9kZWw7XG5cbiAgICAgIH0pKFRpbGVNb2RlbCk7XG4gICAgfVxuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5uZXdHYW1lID0gZnVuY3Rpb24oeCwgeSwgbWluZXMpIHtcbiAgICAgIHZhciBhdHRycywgaSwgaiwgaywgbWluZU51bSwgcmVmLCByZWYxLCByZWYyLCB0aWxlO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgdGhpcy5zaXplWSA9IHg7XG4gICAgICB0aGlzLnNpemVYID0geTtcbiAgICAgIHRoaXMubnVtT2ZNaW5lcyA9IG1pbmVzO1xuICAgICAgZm9yICh5ID0gaSA9IDAsIHJlZiA9IHRoaXMuc2l6ZVkgLSAxOyAwIDw9IHJlZiA/IGkgPD0gcmVmIDogaSA+PSByZWY7IHkgPSAwIDw9IHJlZiA/ICsraSA6IC0taSkge1xuICAgICAgICBmb3IgKHggPSBqID0gMCwgcmVmMSA9IHRoaXMuc2l6ZVggLSAxOyAwIDw9IHJlZjEgPyBqIDw9IHJlZjEgOiBqID49IHJlZjE7IHggPSAwIDw9IHJlZjEgPyArK2ogOiAtLWopIHtcbiAgICAgICAgICBhdHRycyA9IHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLmFkZChhdHRycyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobWluZU51bSA9IGsgPSAxLCByZWYyID0gdGhpcy5udW1PZk1pbmVzOyAxIDw9IHJlZjIgPyBrIDw9IHJlZjIgOiBrID49IHJlZjI7IG1pbmVOdW0gPSAxIDw9IHJlZjIgPyArK2sgOiAtLWspIHtcbiAgICAgICAgdGlsZSA9IHRoaXMucmFuZG9tU2FmZVRpbGUoKTtcbiAgICAgICAgdGlsZS5tb2RlbC5pc01pbmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy50YWxseU1pbmVzKCk7XG4gICAgICByZXR1cm4gdGhpcy5nYW1lVXBkYXRlKCk7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUubm9NaW5lRmlyc3RDbGljayA9IGZ1bmN0aW9uKHRpbGUpIHtcbiAgICAgIGlmICh0aGlzLm51bU9mQ2xlYXJzID09PSAwICYmIHRpbGUubW9kZWwuaXNNaW5lID09PSB0cnVlKSB7XG4gICAgICAgIHRpbGUubW9kZWwuaXNNaW5lID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmFuZG9tU2FmZVRpbGUoKS5tb2RlbC5pc01pbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnRhbGx5TWluZXMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aWxlO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICB2YXIgdGlsZTtcbiAgICAgIHRpbGUgPSBuZXcgdGhpcy5tb2RlbChtb2RlbCk7XG4gICAgICB0aGlzLmFsbC5wdXNoKHRpbGUpO1xuICAgICAgcmV0dXJuIHRpbGU7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuaGFuZGxlVGlsZUNsaWNrID0gZnVuY3Rpb24oZXZlbnQsIGluZGV4KSB7fTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuYWxsID0gW107XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5yYW5kb21TYWZlVGlsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGZpbmRBdHRycywgcmFuZG9tSW5kZXgsIHNhZmVUaWxlcztcbiAgICAgIGZpbmRBdHRycyA9IHtcbiAgICAgICAgaXNDbGVhcjogZmFsc2UsXG4gICAgICAgIGlzTWluZTogZmFsc2VcbiAgICAgIH07XG4gICAgICBzYWZlVGlsZXMgPSB0aGlzLmdldEFsbChmaW5kQXR0cnMpO1xuICAgICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzYWZlVGlsZXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiBzYWZlVGlsZXNbcmFuZG9tSW5kZXhdO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLnRhbGx5TWluZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhZGphY2VudFRpbGUsIGksIGosIGxlbiwgbGVuMSwgbmVpZ2hib3JBdHRycywgbmVpZ2hib3JNaW5lLCBuZWlnaGJvck1pbmVzLCBuZWlnaGJvclgsIG5laWdoYm9yWSwgcmVmLCByZWYxLCByZXN1bHRzLCB0aWxlO1xuICAgICAgcmVmID0gdGhpcy5hbGw7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGlsZSA9IHJlZltpXTtcbiAgICAgICAgbmVpZ2hib3JNaW5lcyA9IDA7XG4gICAgICAgIHJlZjEgPSB0aWxlLmFkamFjZW50VGlsZXM7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgIGFkamFjZW50VGlsZSA9IHJlZjFbal07XG4gICAgICAgICAgbmVpZ2hib3JYID0gdGlsZS5tb2RlbC54ICsgYWRqYWNlbnRUaWxlWzBdO1xuICAgICAgICAgIG5laWdoYm9yWSA9IHRpbGUubW9kZWwueSArIGFkamFjZW50VGlsZVsxXTtcbiAgICAgICAgICBuZWlnaGJvckF0dHJzID0ge1xuICAgICAgICAgICAgaXNNaW5lOiB0cnVlLFxuICAgICAgICAgICAgeDogbmVpZ2hib3JYLFxuICAgICAgICAgICAgeTogbmVpZ2hib3JZXG4gICAgICAgICAgfTtcbiAgICAgICAgICBuZWlnaGJvck1pbmUgPSB0aGlzLmdldChuZWlnaGJvckF0dHJzKTtcbiAgICAgICAgICBpZiAobmVpZ2hib3JNaW5lICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG5laWdoYm9yTWluZXMrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cy5wdXNoKHRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcyA9IG5laWdoYm9yTWluZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2FtZVVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGksIGxlbiwgcmVmLCB0aWxlO1xuICAgICAgdGhpcy54ID0gTWF0aC5tYXguYXBwbHkodGhpcywgdGhpcy5hbGwubWFwKGZ1bmN0aW9uKHRpbGUpIHtcbiAgICAgICAgcmV0dXJuIHRpbGUubW9kZWwueDtcbiAgICAgIH0pKTtcbiAgICAgIHRoaXMueSA9IE1hdGgubWF4LmFwcGx5KHRoaXMsIHRoaXMuYWxsLm1hcChmdW5jdGlvbih0aWxlKSB7XG4gICAgICAgIHJldHVybiB0aWxlLm1vZGVsLnk7XG4gICAgICB9KSk7XG4gICAgICB0aGlzLnggPSB0aGlzLngtLTtcbiAgICAgIHRoaXMueSA9IHRoaXMueS0tO1xuICAgICAgdGhpcy5udW1PZk1pbmVzID0gMDtcbiAgICAgIHJlZiA9IHRoaXMuYWxsO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRpbGUgPSByZWZbaV07XG4gICAgICAgIGlmICh0aWxlLm1vZGVsLmlzTWluZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMubnVtT2ZNaW5lcysrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tb3ZlVXBkYXRlKCk7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUubW92ZVVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGksIGxlbiwgcmVmLCB0aWxlO1xuICAgICAgdGhpcy5sb3NzID0gZmFsc2U7XG4gICAgICB0aGlzLndpbiA9IGZhbHNlO1xuICAgICAgdGhpcy5udW1PZkNsZWFycyA9IDA7XG4gICAgICB0aGlzLm51bU9mRmxhZ3MgPSAwO1xuICAgICAgcmVmID0gdGhpcy5hbGw7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGlsZSA9IHJlZltpXTtcbiAgICAgICAgaWYgKHRpbGUubW9kZWwuaXNDbGVhciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMubnVtT2ZDbGVhcnMrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGlsZS5tb2RlbC5pc0ZsYWdnZWQgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLm51bU9mRmxhZ3MrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGlsZS5tb2RlbC5pc01pbmUgPT09IHRydWUgJiYgdGlsZS5tb2RlbC5pc0NsZWFyID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5sb3NzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMubG9zcyA9PT0gZmFsc2UgJiYgdGhpcy5hbGwubGVuZ3RoIC0gdGhpcy5udW1PZk1pbmVzIC0gdGhpcy5udW1PZkNsZWFycyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aW4gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmNsZWFyTmVpZ2hib3JzID0gZnVuY3Rpb24odGlsZSkge1xuICAgICAgdmFyIGFkamFjZW50VGlsZSwgaSwgbGVuLCBuZWlnaGJvciwgcmVmLCByZXN1bHRzLCBzaG91bGRDbGVhck5laWdoYm9yLCBzaG91bGRDbGVhck5laWdoYm9ycztcbiAgICAgIHNob3VsZENsZWFyTmVpZ2hib3JzID0gdGlsZS5tb2RlbC5hZGphY2VudE1pbmVzID09PSAwICYmIHRpbGUubW9kZWwuaXNNaW5lID09PSBmYWxzZTtcbiAgICAgIGlmIChzaG91bGRDbGVhck5laWdoYm9ycykge1xuICAgICAgICByZWYgPSB0aWxlLmFkamFjZW50VGlsZXM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYWRqYWNlbnRUaWxlID0gcmVmW2ldO1xuICAgICAgICAgIG5laWdoYm9yID0gdGhpcy5nZXQoe1xuICAgICAgICAgICAgeDogdGlsZS5tb2RlbC54ICsgYWRqYWNlbnRUaWxlWzBdLFxuICAgICAgICAgICAgeTogdGlsZS5tb2RlbC55ICsgYWRqYWNlbnRUaWxlWzFdXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2hvdWxkQ2xlYXJOZWlnaGJvciA9IG5laWdoYm9yICYmIG5laWdoYm9yLm1vZGVsLmlzQ2xlYXIgPT09IGZhbHNlICYmIG5laWdoYm9yLm1vZGVsLmlzTWluZSA9PT0gZmFsc2U7XG4gICAgICAgICAgaWYgKHNob3VsZENsZWFyTmVpZ2hib3IpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChuZWlnaGJvci5jbGljaygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBbGwoYXR0cnMpWzBdO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgICB2YXIgaSwga2V5LCBsZW4sIG1hdGNoZXMsIG51bU9mQXR0cnMsIG51bU9mTWF0Y2hlZEF0dHJzLCByZWYsIHRpbGUsIHZhbDtcbiAgICAgIG1hdGNoZXMgPSBbXTtcbiAgICAgIGlmICghYXR0cnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsO1xuICAgICAgfVxuICAgICAgcmVmID0gdGhpcy5hbGw7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGlsZSA9IHJlZltpXTtcbiAgICAgICAgbnVtT2ZBdHRycyA9IDA7XG4gICAgICAgIG51bU9mTWF0Y2hlZEF0dHJzID0gMDtcbiAgICAgICAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICB2YWwgPSBhdHRyc1trZXldO1xuICAgICAgICAgIG51bU9mQXR0cnMrKztcbiAgICAgICAgICBpZiAodGlsZS5tb2RlbFtrZXldID09PSB2YWwpIHtcbiAgICAgICAgICAgIG51bU9mTWF0Y2hlZEF0dHJzKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChudW1PZk1hdGNoZWRBdHRycyA9PT0gbnVtT2ZBdHRycykge1xuICAgICAgICAgIG1hdGNoZXMucHVzaCh0aWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIHJldHVybiBUaWxlc0NvbGxlY3Rpb247XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGVzQ29sbGVjdGlvbjtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIERhc2hib2FyZCwgUiwgVGlsZXNBY3Rpb25zO1xuXG4gIFRpbGVzQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvVGlsZXNBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgRGFzaGJvYXJkID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnRGFzaGJvYXJkJyxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFIuZGl2KHtcbiAgICAgICAgaWQ6ICdkYXNoYm9hcmQnXG4gICAgICB9LCBbXG4gICAgICAgIFIuZGl2KHtcbiAgICAgICAgICBrZXk6ICduZXctZ2FtZScsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnbmV3LWdhbWUgYnV0dG9uJyxcbiAgICAgICAgICBvbkNsaWNrOiBUaWxlc0FjdGlvbnMubmV3R2FtZVxuICAgICAgICB9LCAnbmV3IGdhbWUnKSwgUi5kaXYoe1xuICAgICAgICAgIGtleTogJ3NlbGVjdC10aWxlJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3QtdGlsZSBidXR0b24nLFxuICAgICAgICAgIG9uQ2xpY2s6IFRpbGVzQWN0aW9ucy5jbGVhclNhZmVSYW5kb21UaWxlXG4gICAgICAgIH0sICdjbGVhciBhIHNhZmUgdGlsZScpLCBSLmRpdih7XG4gICAgICAgICAga2V5OiAnaW5zdHJ1Y3Rpb25zJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdpbnN0cnVjdGlvbnMgYnV0dG9uJ1xuICAgICAgICB9LCAnaW5zdHJ1Y3Rpb25zJylcbiAgICAgIF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBEYXNoYm9hcmQ7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEYXNoYm9hcmRDb21wb25lbnQsIERpc3BhdGNoZXIsIEdhbWUsIEluZm9Db21wb25lbnQsIE1vZGFsT3ZlcmxheUNvbXBvbmVudCwgUiwgVGlsZVN0b3JlLCBUaWxlc0NvbXBvbmVudCwgZ2V0U3RhdGU7XG5cbiAgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL0Rpc3BhdGNoZXIuY29mZmVlJyk7XG5cbiAgVGlsZVN0b3JlID0gcmVxdWlyZSgnLi4vc3RvcmVzL1RpbGVTdG9yZS5jb2ZmZWUnKTtcblxuICBUaWxlc0NvbXBvbmVudCA9IHJlcXVpcmUoJy4vVGlsZXNDb21wb25lbnQuY29mZmVlJyk7XG5cbiAgSW5mb0NvbXBvbmVudCA9IHJlcXVpcmUoJy4vSW5mb0NvbXBvbmVudC5jb2ZmZWUnKTtcblxuICBEYXNoYm9hcmRDb21wb25lbnQgPSByZXF1aXJlKCcuL0Rhc2hib2FyZENvbXBvbmVudC5jb2ZmZWUnKTtcblxuICBNb2RhbE92ZXJsYXlDb21wb25lbnQgPSByZXF1aXJlKCcuL21vZGFscy9Nb2RhbE92ZXJsYXlDb21wb25lbnQuY29mZmVlJyk7XG5cbiAgUiA9IFJlYWN0LkRPTTtcblxuICBnZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbGw6IFRpbGVTdG9yZS5nZXRBbGwoKSxcbiAgICAgIGluZm86IFRpbGVTdG9yZS5nZXRJbmZvKClcbiAgICB9O1xuICB9O1xuXG4gIEdhbWUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdHYW1lJyxcbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldFN0YXRlKCk7XG4gICAgfSxcbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVGlsZVN0b3JlLmFkZENoYW5nZUxpc3RlbmVyKHRoaXMuX29uQ2hhbmdlKTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUaWxlU3RvcmUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIodGhpcy5fb25DaGFuZ2UpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBNb2RhbE92ZXJsYXksIGJvYXJkV3JhcHBwZXIsIGRhc2hib2FyZCwgaW5mbywgdGlsZXM7XG4gICAgICBpbmZvID0gUmVhY3QuY3JlYXRlRWxlbWVudChJbmZvQ29tcG9uZW50LCB7XG4gICAgICAgIGtleTogJ2luZm8nLFxuICAgICAgICBpbmZvOiB0aGlzLnN0YXRlLmluZm9cbiAgICAgIH0pO1xuICAgICAgdGlsZXMgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVzQ29tcG9uZW50LCB7XG4gICAgICAgIGtleTogJ3RpbGVzJyxcbiAgICAgICAgdGlsZXM6IHRoaXMuc3RhdGUuYWxsXG4gICAgICB9KTtcbiAgICAgIGJvYXJkV3JhcHBwZXIgPSBSLmRpdih7XG4gICAgICAgIGlkOiAnYm9hcmQtd3JhcHBwZXInLFxuICAgICAgICBrZXk6ICdib2FyZC13cmFwcHBlcidcbiAgICAgIH0sIFtpbmZvLCB0aWxlc10pO1xuICAgICAgZGFzaGJvYXJkID0gUmVhY3QuY3JlYXRlRWxlbWVudChEYXNoYm9hcmRDb21wb25lbnQsIHtcbiAgICAgICAga2V5OiAnZGFzaGJvYXJkJ1xuICAgICAgfSk7XG4gICAgICBNb2RhbE92ZXJsYXkgPSBSZWFjdC5jcmVhdGVFbGVtZW50KE1vZGFsT3ZlcmxheUNvbXBvbmVudCwge1xuICAgICAgICBrZXk6ICdtb2RhbC1vdmVybGF5JyxcbiAgICAgICAgaW5mbzogdGhpcy5zdGF0ZS5pbmZvXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSLmRpdihudWxsLCBbYm9hcmRXcmFwcHBlciwgZGFzaGJvYXJkLCBNb2RhbE92ZXJsYXldKTtcbiAgICB9LFxuICAgIF9vbkNoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnY2hhbmdlIScpO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoZ2V0U3RhdGUoKSk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEdhbWU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBJbmZvLCBSO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgSW5mbyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0luZm8nLFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUi51bCh7XG4gICAgICAgIGlkOiAnc3RhdHMnXG4gICAgICB9LCBbXG4gICAgICAgIFIubGkoe1xuICAgICAgICAgIGtleTogJ3RpbGVzJ1xuICAgICAgICB9LCB0aGlzLnByb3BzLmluZm8ubnVtT2ZUaWxlcyArIFwiIHRpbGVzXCIpLCBSLmxpKHtcbiAgICAgICAgICBrZXk6ICdtaW5lcydcbiAgICAgICAgfSwgdGhpcy5wcm9wcy5pbmZvLm51bU9mTWluZXMgKyBcIiBtaW5lc1wiKSwgUi5saSh7XG4gICAgICAgICAga2V5OiAnZmxhZ2dlZCdcbiAgICAgICAgfSwgdGhpcy5wcm9wcy5pbmZvLm51bU9mRmxhZ3MgKyBcIiBmbGFnZ2VkIHRpbGVzXCIpLCBSLmxpKHtcbiAgICAgICAgICBrZXk6ICdjbGVhcmVkJ1xuICAgICAgICB9LCB0aGlzLnByb3BzLmluZm8ubnVtT2ZVbmNsZWFyZWQgKyBcIiBsZWZ0IHRvIGNsZWFyXCIpXG4gICAgICBdKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gSW5mbztcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIFIsIFRpbGUsIFRpbGVBY3Rpb25zO1xuXG4gIFRpbGVBY3Rpb25zID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9UaWxlQWN0aW9ucy5jb2ZmZWUnKTtcblxuICBSID0gUmVhY3QuRE9NO1xuXG4gIFRpbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdUaWxlJyxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFIubGkoe1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3MoKSxcbiAgICAgICAgb25DbGljazogdGhpcy5jbGlja0hhbmRsZXJcbiAgICAgIH0sIFIuc3BhbihudWxsLCB0aGlzLmdldFRleHQoKSkpO1xuICAgIH0sXG4gICAgY2xpY2tIYW5kbGVyOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgIHZhciBmbGFnS2V5V2FzUHJlc3NlZDtcbiAgICAgIGlmICghJGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBUaWxlQWN0aW9ucy5jbGVhcih0aGlzLnByb3BzLnRpbGUubW9kZWwudWlkKTtcbiAgICAgIH1cbiAgICAgIGZsYWdLZXlXYXNQcmVzc2VkID0gJGV2ZW50LnNoaWZ0S2V5ID09PSB0cnVlIHx8ICRldmVudC5hbHRLZXkgPT09IHRydWU7XG4gICAgICBpZiAoZmxhZ0tleVdhc1ByZXNzZWQpIHtcbiAgICAgICAgcmV0dXJuIFRpbGVBY3Rpb25zLnRvZ2dsZUZsYWcodGhpcy5wcm9wcy50aWxlLm1vZGVsLnVpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVGlsZUFjdGlvbnMuY2xlYXIodGhpcy5wcm9wcy50aWxlLm1vZGVsLnVpZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc0ZpcnN0Q29sdW1uOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpbGUubW9kZWwueCA9PT0gMDtcbiAgICB9LFxuICAgIGhhc0JlZW5GbGFnZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpbGUubW9kZWwuaXNDbGVhciAhPT0gdHJ1ZSAmJiB0aGlzLnByb3BzLnRpbGUubW9kZWwuaXNGbGFnZ2VkID09PSB0cnVlO1xuICAgIH0sXG4gICAgaGFzQmVlbkNsZWFyZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGlsZS5tb2RlbC5pc0NsZWFyID09PSB0cnVlO1xuICAgIH0sXG4gICAgaGFzTWluZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy50aWxlLm1vZGVsLmlzTWluZSA9PT0gdHJ1ZTtcbiAgICB9LFxuICAgIHNob3VsZERpc3BsYXlNaW5lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhc01pbmUoKSAmJiB0aGlzLmhhc0JlZW5DbGVhcmVkKCk7XG4gICAgfSxcbiAgICBoYXNaZXJvQWRqYWNlbnRNaW5lczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy50aWxlLm1vZGVsLmFkamFjZW50TWluZXMgPT09IDAgJiYgIXRoaXMuaGFzTWluZSgpO1xuICAgIH0sXG4gICAgZ2V0VGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGV4dDtcbiAgICAgIHRleHQgPSB0aGlzLnByb3BzLnRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcztcbiAgICAgIGlmICh0aGlzLmhhc0JlZW5GbGFnZ2VkKCkpIHtcbiAgICAgICAgdGV4dCA9ICc/JztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zaG91bGREaXNwbGF5TWluZSgpKSB7XG4gICAgICAgIHRleHQgPSAnWCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9LFxuICAgIGdldENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbJ3RpbGUnLCB0aGlzLmlzRmlyc3RDb2x1bW4oKSA/ICdudGgnIDogdm9pZCAwLCB0aGlzLmhhc0JlZW5DbGVhcmVkKCkgPyAnY2xlYXInIDogdm9pZCAwLCB0aGlzLmhhc0JlZW5GbGFnZ2VkKCkgPyAnZmxhZ2dlZCcgOiB2b2lkIDAsIHRoaXMuc2hvdWxkRGlzcGxheU1pbmUoKSA/ICdtaW5lJyA6IHZvaWQgMCwgdGhpcy5oYXNaZXJvQWRqYWNlbnRNaW5lcygpID8gJ2NsZWFyIHplcm8nIDogdm9pZCAwXS5qb2luKCcgJyk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBSLCBUaWxlQ29tcG9uZW50LCBUaWxlcztcblxuICBUaWxlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9UaWxlQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgVGlsZXMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdUaWxlcycsXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0aWxlcztcbiAgICAgIHRpbGVzID0gdGhpcy5wcm9wcy50aWxlcy5tYXAoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICByZWY6IGl0ZW0ubW9kZWwudWlkLFxuICAgICAgICAgICAgdGlsZTogaXRlbVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgcmV0dXJuIFIudWwoe1xuICAgICAgICBpZDogJ2JvYXJkJ1xuICAgICAgfSwgdGlsZXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaWxlcztcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIE1vZGFsT3ZlcmxheSwgUjtcblxuICBSID0gUmVhY3QuRE9NO1xuXG4gIE1vZGFsT3ZlcmxheSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ01vZGFsT3ZlcmxheScsXG4gICAgZ2V0Q2xhc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2codGhpcy5wcm9wcy5pbmZvLmxvc3MsIHRoaXMucHJvcHMuaW5mby53aW4pO1xuICAgICAgaWYgKHRoaXMucHJvcHMuaW5mby5sb3NzIHx8IHRoaXMucHJvcHMuaW5mby53aW4pIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdoaWRlJztcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUi5kaXYoe1xuICAgICAgICBpZDogJ292ZXJsYXknLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3MoKVxuICAgICAgfSwgbnVsbCk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IE1vZGFsT3ZlcmxheTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIFRpbGVNb2RlbDtcblxuICBOdW1iZXIuaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGVNb2RlbCA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBUaWxlTW9kZWwoYXR0cnMpIHtcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhdHRycy54KSB8fCAhTnVtYmVyLmlzSW50ZWdlcihhdHRycy55KSkge1xuICAgICAgICB0aHJvdyBcImB4YCBhbmQgYHlgIGFyZSByZXF1aXJlZCBJbnRlZ2VyIGF0dHJpYnV0ZXMgdG8gaW5zdGFudGlhdGUgVGlsZVwiO1xuICAgICAgfVxuICAgICAgdGhpcy5tb2RlbCA9IHtcbiAgICAgICAgeDogdm9pZCAwLFxuICAgICAgICB5OiB2b2lkIDAsXG4gICAgICAgIHVpZDogdm9pZCAwLFxuICAgICAgICBpc01pbmU6IGZhbHNlLFxuICAgICAgICBpc0NsZWFyOiBmYWxzZSxcbiAgICAgICAgaXNGbGFnZ2VkOiBmYWxzZSxcbiAgICAgICAgYWRqYWNlbnRNaW5lczogMFxuICAgICAgfTtcbiAgICAgIHRoaXMuYWRqYWNlbnRUaWxlcyA9IFtbLTEsIC0xXSwgWzAsIC0xXSwgWzEsIC0xXSwgWy0xLCAwXSwgWzEsIDBdLCBbLTEsIDFdLCBbMCwgMV0sIFsxLCAxXV07XG4gICAgICB0aGlzLnNldChhdHRycyk7XG4gICAgfVxuXG4gICAgVGlsZU1vZGVsLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihhdHRycykge1xuICAgICAgdmFyIGF0dHIsIGtleTtcbiAgICAgIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGF0dHIgPSBhdHRyc1trZXldO1xuICAgICAgICB0aGlzLm1vZGVsW2tleV0gPSBhdHRyO1xuICAgICAgICB0aGlzLm1vZGVsLnVpZCA9IFN0cmluZyhhdHRycy54KSArICctJyArIFN0cmluZyhhdHRycy55KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBUaWxlTW9kZWwucHJvdG90eXBlLnRvZ2dsZUZsYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubW9kZWwuaXNGbGFnZ2VkID0gIXRoaXMubW9kZWwuaXNGbGFnZ2VkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFRpbGVNb2RlbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubW9kZWwuaXNDbGVhciA9IHRydWU7XG4gICAgICB0aGlzLm1vZGVsLmlzRmxhZ2dlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFRpbGVNb2RlbC5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgIHZhciBmbGFnS2V5V2FzUHJlc3NlZDtcbiAgICAgIGlmICghJGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsZWFyKCk7XG4gICAgICB9XG4gICAgICBmbGFnS2V5V2FzUHJlc3NlZCA9ICRldmVudC5zaGlmdEtleSA9PT0gdHJ1ZSB8fCAkZXZlbnQuYWx0S2V5ID09PSB0cnVlO1xuICAgICAgaWYgKGZsYWdLZXlXYXNQcmVzc2VkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUZsYWcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBUaWxlTW9kZWw7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEV2ZW50RW1pdHRlciwgVGlsZVN0b3JlLCBUaWxlcywgVGlsZXNDb2xsZWN0aW9uLCBhc3NpZ247XG5cbiAgVGlsZXNDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMvVGlsZXNDb2xsZWN0aW9uLmNvZmZlZScpO1xuXG4gIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuICBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbiAgVGlsZXMgPSBuZXcgVGlsZXNDb2xsZWN0aW9uKCk7XG5cbiAgVGlsZXMubmV3R2FtZSg0LCA3LCA1KTtcblxuICBUaWxlU3RvcmUgPSBhc3NpZ24oe30sIEV2ZW50RW1pdHRlci5wcm90b3R5cGUsIHtcbiAgICBldmVudDogJ2NoYW5nZScsXG4gICAgZ2V0OiBmdW5jdGlvbihhdHRycykge1xuICAgICAgcmV0dXJuIFRpbGVzLmdldChhdHRycyk7XG4gICAgfSxcbiAgICBnZXRBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFRpbGVzLmdldEFsbCgpO1xuICAgIH0sXG4gICAgZ2V0SW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aW46IFRpbGVzLndpbixcbiAgICAgICAgbG9zczogVGlsZXMubG9zcyxcbiAgICAgICAgbnVtT2ZUaWxlczogVGlsZXMuYWxsLmxlbmd0aCxcbiAgICAgICAgbnVtT2ZNaW5lczogVGlsZXMubnVtT2ZNaW5lcyxcbiAgICAgICAgbnVtT2ZGbGFnczogVGlsZXMubnVtT2ZGbGFncyxcbiAgICAgICAgbnVtT2ZVbmNsZWFyZWQ6IFRpbGVzLmFsbC5sZW5ndGggLSBUaWxlcy5udW1PZk1pbmVzIC0gVGlsZXMubnVtT2ZDbGVhcnNcbiAgICAgIH07XG4gICAgfSxcbiAgICByYW5kb21TYWZlVGlsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVGlsZXMucmFuZG9tU2FmZVRpbGUoKTtcbiAgICB9LFxuICAgIG5ld0dhbWU6IGZ1bmN0aW9uKHgsIHksIG1pbmVzKSB7XG4gICAgICByZXR1cm4gVGlsZXMubmV3R2FtZSh4LCB5LCBtaW5lcyk7XG4gICAgfSxcbiAgICBlbWl0Q2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtaXQodGhpcy5ldmVudCk7XG4gICAgfSxcbiAgICBhZGRDaGFuZ2VMaXN0ZW5lcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLm9uKHRoaXMuZXZlbnQsIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIHJlbW92ZUNoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGlzdGVuZXIodGhpcy5ldmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaWxlU3RvcmU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERpc3BhdGNoZXJcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG52YXIgX2xhc3RJRCA9IDE7XG52YXIgX3ByZWZpeCA9ICdJRF8nO1xuXG4vKipcbiAqIERpc3BhdGNoZXIgaXMgdXNlZCB0byBicm9hZGNhc3QgcGF5bG9hZHMgdG8gcmVnaXN0ZXJlZCBjYWxsYmFja3MuIFRoaXMgaXNcbiAqIGRpZmZlcmVudCBmcm9tIGdlbmVyaWMgcHViLXN1YiBzeXN0ZW1zIGluIHR3byB3YXlzOlxuICpcbiAqICAgMSkgQ2FsbGJhY2tzIGFyZSBub3Qgc3Vic2NyaWJlZCB0byBwYXJ0aWN1bGFyIGV2ZW50cy4gRXZlcnkgcGF5bG9hZCBpc1xuICogICAgICBkaXNwYXRjaGVkIHRvIGV2ZXJ5IHJlZ2lzdGVyZWQgY2FsbGJhY2suXG4gKiAgIDIpIENhbGxiYWNrcyBjYW4gYmUgZGVmZXJyZWQgaW4gd2hvbGUgb3IgcGFydCB1bnRpbCBvdGhlciBjYWxsYmFja3MgaGF2ZVxuICogICAgICBiZWVuIGV4ZWN1dGVkLlxuICpcbiAqIEZvciBleGFtcGxlLCBjb25zaWRlciB0aGlzIGh5cG90aGV0aWNhbCBmbGlnaHQgZGVzdGluYXRpb24gZm9ybSwgd2hpY2hcbiAqIHNlbGVjdHMgYSBkZWZhdWx0IGNpdHkgd2hlbiBhIGNvdW50cnkgaXMgc2VsZWN0ZWQ6XG4gKlxuICogICB2YXIgZmxpZ2h0RGlzcGF0Y2hlciA9IG5ldyBEaXNwYXRjaGVyKCk7XG4gKlxuICogICAvLyBLZWVwcyB0cmFjayBvZiB3aGljaCBjb3VudHJ5IGlzIHNlbGVjdGVkXG4gKiAgIHZhciBDb3VudHJ5U3RvcmUgPSB7Y291bnRyeTogbnVsbH07XG4gKlxuICogICAvLyBLZWVwcyB0cmFjayBvZiB3aGljaCBjaXR5IGlzIHNlbGVjdGVkXG4gKiAgIHZhciBDaXR5U3RvcmUgPSB7Y2l0eTogbnVsbH07XG4gKlxuICogICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgYmFzZSBmbGlnaHQgcHJpY2Ugb2YgdGhlIHNlbGVjdGVkIGNpdHlcbiAqICAgdmFyIEZsaWdodFByaWNlU3RvcmUgPSB7cHJpY2U6IG51bGx9XG4gKlxuICogV2hlbiBhIHVzZXIgY2hhbmdlcyB0aGUgc2VsZWN0ZWQgY2l0eSwgd2UgZGlzcGF0Y2ggdGhlIHBheWxvYWQ6XG4gKlxuICogICBmbGlnaHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAqICAgICBhY3Rpb25UeXBlOiAnY2l0eS11cGRhdGUnLFxuICogICAgIHNlbGVjdGVkQ2l0eTogJ3BhcmlzJ1xuICogICB9KTtcbiAqXG4gKiBUaGlzIHBheWxvYWQgaXMgZGlnZXN0ZWQgYnkgYENpdHlTdG9yZWA6XG4gKlxuICogICBmbGlnaHREaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAqICAgICBpZiAocGF5bG9hZC5hY3Rpb25UeXBlID09PSAnY2l0eS11cGRhdGUnKSB7XG4gKiAgICAgICBDaXR5U3RvcmUuY2l0eSA9IHBheWxvYWQuc2VsZWN0ZWRDaXR5O1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogV2hlbiB0aGUgdXNlciBzZWxlY3RzIGEgY291bnRyeSwgd2UgZGlzcGF0Y2ggdGhlIHBheWxvYWQ6XG4gKlxuICogICBmbGlnaHREaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAqICAgICBhY3Rpb25UeXBlOiAnY291bnRyeS11cGRhdGUnLFxuICogICAgIHNlbGVjdGVkQ291bnRyeTogJ2F1c3RyYWxpYSdcbiAqICAgfSk7XG4gKlxuICogVGhpcyBwYXlsb2FkIGlzIGRpZ2VzdGVkIGJ5IGJvdGggc3RvcmVzOlxuICpcbiAqICAgIENvdW50cnlTdG9yZS5kaXNwYXRjaFRva2VuID0gZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XG4gKiAgICAgaWYgKHBheWxvYWQuYWN0aW9uVHlwZSA9PT0gJ2NvdW50cnktdXBkYXRlJykge1xuICogICAgICAgQ291bnRyeVN0b3JlLmNvdW50cnkgPSBwYXlsb2FkLnNlbGVjdGVkQ291bnRyeTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFdoZW4gdGhlIGNhbGxiYWNrIHRvIHVwZGF0ZSBgQ291bnRyeVN0b3JlYCBpcyByZWdpc3RlcmVkLCB3ZSBzYXZlIGEgcmVmZXJlbmNlXG4gKiB0byB0aGUgcmV0dXJuZWQgdG9rZW4uIFVzaW5nIHRoaXMgdG9rZW4gd2l0aCBgd2FpdEZvcigpYCwgd2UgY2FuIGd1YXJhbnRlZVxuICogdGhhdCBgQ291bnRyeVN0b3JlYCBpcyB1cGRhdGVkIGJlZm9yZSB0aGUgY2FsbGJhY2sgdGhhdCB1cGRhdGVzIGBDaXR5U3RvcmVgXG4gKiBuZWVkcyB0byBxdWVyeSBpdHMgZGF0YS5cbiAqXG4gKiAgIENpdHlTdG9yZS5kaXNwYXRjaFRva2VuID0gZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XG4gKiAgICAgaWYgKHBheWxvYWQuYWN0aW9uVHlwZSA9PT0gJ2NvdW50cnktdXBkYXRlJykge1xuICogICAgICAgLy8gYENvdW50cnlTdG9yZS5jb3VudHJ5YCBtYXkgbm90IGJlIHVwZGF0ZWQuXG4gKiAgICAgICBmbGlnaHREaXNwYXRjaGVyLndhaXRGb3IoW0NvdW50cnlTdG9yZS5kaXNwYXRjaFRva2VuXSk7XG4gKiAgICAgICAvLyBgQ291bnRyeVN0b3JlLmNvdW50cnlgIGlzIG5vdyBndWFyYW50ZWVkIHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogICAgICAgLy8gU2VsZWN0IHRoZSBkZWZhdWx0IGNpdHkgZm9yIHRoZSBuZXcgY291bnRyeVxuICogICAgICAgQ2l0eVN0b3JlLmNpdHkgPSBnZXREZWZhdWx0Q2l0eUZvckNvdW50cnkoQ291bnRyeVN0b3JlLmNvdW50cnkpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIHVzYWdlIG9mIGB3YWl0Rm9yKClgIGNhbiBiZSBjaGFpbmVkLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgIEZsaWdodFByaWNlU3RvcmUuZGlzcGF0Y2hUb2tlbiA9XG4gKiAgICAgZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XG4gKiAgICAgICBzd2l0Y2ggKHBheWxvYWQuYWN0aW9uVHlwZSkge1xuICogICAgICAgICBjYXNlICdjb3VudHJ5LXVwZGF0ZSc6XG4gKiAgICAgICAgICAgZmxpZ2h0RGlzcGF0Y2hlci53YWl0Rm9yKFtDaXR5U3RvcmUuZGlzcGF0Y2hUb2tlbl0pO1xuICogICAgICAgICAgIEZsaWdodFByaWNlU3RvcmUucHJpY2UgPVxuICogICAgICAgICAgICAgZ2V0RmxpZ2h0UHJpY2VTdG9yZShDb3VudHJ5U3RvcmUuY291bnRyeSwgQ2l0eVN0b3JlLmNpdHkpO1xuICogICAgICAgICAgIGJyZWFrO1xuICpcbiAqICAgICAgICAgY2FzZSAnY2l0eS11cGRhdGUnOlxuICogICAgICAgICAgIEZsaWdodFByaWNlU3RvcmUucHJpY2UgPVxuICogICAgICAgICAgICAgRmxpZ2h0UHJpY2VTdG9yZShDb3VudHJ5U3RvcmUuY291bnRyeSwgQ2l0eVN0b3JlLmNpdHkpO1xuICogICAgICAgICAgIGJyZWFrO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIGBjb3VudHJ5LXVwZGF0ZWAgcGF5bG9hZCB3aWxsIGJlIGd1YXJhbnRlZWQgdG8gaW52b2tlIHRoZSBzdG9yZXMnXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcyBpbiBvcmRlcjogYENvdW50cnlTdG9yZWAsIGBDaXR5U3RvcmVgLCB0aGVuXG4gKiBgRmxpZ2h0UHJpY2VTdG9yZWAuXG4gKi9cblxuICBmdW5jdGlvbiBEaXNwYXRjaGVyKCkge1xuICAgIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzID0ge307XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc1BlbmRpbmcgPSB7fTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzSGFuZGxlZCA9IHt9O1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfcGVuZGluZ1BheWxvYWQgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2l0aCBldmVyeSBkaXNwYXRjaGVkIHBheWxvYWQuIFJldHVybnNcbiAgICogYSB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYHdhaXRGb3IoKWAuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIGlkID0gX3ByZWZpeCArIF9sYXN0SUQrKztcbiAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF0gPSBjYWxsYmFjaztcbiAgICByZXR1cm4gaWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjYWxsYmFjayBiYXNlZCBvbiBpdHMgdG9rZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUudW5yZWdpc3Rlcj1mdW5jdGlvbihpZCkge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzW2lkXSxcbiAgICAgICdEaXNwYXRjaGVyLnVucmVnaXN0ZXIoLi4uKTogYCVzYCBkb2VzIG5vdCBtYXAgdG8gYSByZWdpc3RlcmVkIGNhbGxiYWNrLicsXG4gICAgICBpZFxuICAgICk7XG4gICAgZGVsZXRlIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzW2lkXTtcbiAgfTtcblxuICAvKipcbiAgICogV2FpdHMgZm9yIHRoZSBjYWxsYmFja3Mgc3BlY2lmaWVkIHRvIGJlIGludm9rZWQgYmVmb3JlIGNvbnRpbnVpbmcgZXhlY3V0aW9uXG4gICAqIG9mIHRoZSBjdXJyZW50IGNhbGxiYWNrLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIGJ5IGEgY2FsbGJhY2sgaW5cbiAgICogcmVzcG9uc2UgdG8gYSBkaXNwYXRjaGVkIHBheWxvYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gaWRzXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS53YWl0Rm9yPWZ1bmN0aW9uKGlkcykge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyxcbiAgICAgICdEaXNwYXRjaGVyLndhaXRGb3IoLi4uKTogTXVzdCBiZSBpbnZva2VkIHdoaWxlIGRpc3BhdGNoaW5nLidcbiAgICApO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpZHMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgaWQgPSBpZHNbaWldO1xuICAgICAgaWYgKHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nW2lkXSkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0hhbmRsZWRbaWRdLFxuICAgICAgICAgICdEaXNwYXRjaGVyLndhaXRGb3IoLi4uKTogQ2lyY3VsYXIgZGVwZW5kZW5jeSBkZXRlY3RlZCB3aGlsZSAnICtcbiAgICAgICAgICAnd2FpdGluZyBmb3IgYCVzYC4nLFxuICAgICAgICAgIGlkXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaW52YXJpYW50KFxuICAgICAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF0sXG4gICAgICAgICdEaXNwYXRjaGVyLndhaXRGb3IoLi4uKTogYCVzYCBkb2VzIG5vdCBtYXAgdG8gYSByZWdpc3RlcmVkIGNhbGxiYWNrLicsXG4gICAgICAgIGlkXG4gICAgICApO1xuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pbnZva2VDYWxsYmFjayhpZCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGEgcGF5bG9hZCB0byBhbGwgcmVnaXN0ZXJlZCBjYWxsYmFja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXlsb2FkXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5kaXNwYXRjaD1mdW5jdGlvbihwYXlsb2FkKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgIXRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyxcbiAgICAgICdEaXNwYXRjaC5kaXNwYXRjaCguLi4pOiBDYW5ub3QgZGlzcGF0Y2ggaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLidcbiAgICApO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfc3RhcnREaXNwYXRjaGluZyhwYXlsb2FkKTtcbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgaWQgaW4gdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3MpIHtcbiAgICAgICAgaWYgKHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nW2lkXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJERpc3BhdGNoZXJfaW52b2tlQ2FsbGJhY2soaWQpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLiREaXNwYXRjaGVyX3N0b3BEaXNwYXRjaGluZygpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSXMgdGhpcyBEaXNwYXRjaGVyIGN1cnJlbnRseSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLmlzRGlzcGF0Y2hpbmc9ZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZztcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbCB0aGUgY2FsbGJhY2sgc3RvcmVkIHdpdGggdGhlIGdpdmVuIGlkLiBBbHNvIGRvIHNvbWUgaW50ZXJuYWxcbiAgICogYm9va2tlZXBpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLiREaXNwYXRjaGVyX2ludm9rZUNhbGxiYWNrPWZ1bmN0aW9uKGlkKSB7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc1BlbmRpbmdbaWRdID0gdHJ1ZTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF0odGhpcy4kRGlzcGF0Y2hlcl9wZW5kaW5nUGF5bG9hZCk7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0hhbmRsZWRbaWRdID0gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHVwIGJvb2trZWVwaW5nIG5lZWRlZCB3aGVuIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGF5bG9hZFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLiREaXNwYXRjaGVyX3N0YXJ0RGlzcGF0Y2hpbmc9ZnVuY3Rpb24ocGF5bG9hZCkge1xuICAgIGZvciAodmFyIGlkIGluIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzKSB7XG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2lzUGVuZGluZ1tpZF0gPSBmYWxzZTtcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfaXNIYW5kbGVkW2lkXSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLiREaXNwYXRjaGVyX3BlbmRpbmdQYXlsb2FkID0gcGF5bG9hZDtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGVhciBib29ra2VlcGluZyB1c2VkIGZvciBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS4kRGlzcGF0Y2hlcl9zdG9wRGlzcGF0Y2hpbmc9ZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9wZW5kaW5nUGF5bG9hZCA9IG51bGw7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIH07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBEaXNwYXRjaGVyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW52YXJpYW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAoZmFsc2UpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnSW52YXJpYW50IFZpb2xhdGlvbjogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LicpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgdmFyIG07XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSAwO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKGVtaXR0ZXIuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gMTtcbiAgZWxzZVxuICAgIHJldCA9IGVtaXR0ZXIuX2V2ZW50c1t0eXBlXS5sZW5ndGg7XG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIga2V5cztcblx0dmFyIHRvID0gVG9PYmplY3QodGFyZ2V0KTtcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBhcmd1bWVudHNbc107XG5cdFx0a2V5cyA9IE9iamVjdC5rZXlzKE9iamVjdChmcm9tKSk7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRvW2tleXNbaV1dID0gZnJvbVtrZXlzW2ldXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9