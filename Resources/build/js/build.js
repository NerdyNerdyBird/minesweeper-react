!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){(function(){var ComponentTiles,ViewController;ComponentTiles=require("./components/TilesComponent.coffee"),ViewController=React.createElement(ComponentTiles,null),React.render(ViewController,document.getElementById("game"))}).call(this)},{"./components/TilesComponent.coffee":7}],2:[function(require,module,exports){module.exports.Dispatcher=require("./lib/Dispatcher")},{"./lib/Dispatcher":14}],3:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("Flux").Dispatcher,module.exports=new Dispatcher}).call(this)},{Flux:10}],4:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={toggleFlag:function(uid){return Dispatcher.dispatch({type:"TILE_FLAG_TOGGLE",uid:uid})},clear:function(uid){return Dispatcher.dispatch({type:"TILE_CLEAR",uid:uid})}}}).call(this)},{"../Dispatcher.coffee":3}],5:[function(require,module,exports){(function(){var TileModel,TilesCollection,extend=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child},hasProp={}.hasOwnProperty;TileModel=require("../models/TileModel.coffee"),TilesCollection=function(){function TilesCollection(){var Model,collection;this.all=[],collection=this,this.model=Model=function(superClass){function Model(){return Model.__super__.constructor.apply(this,arguments)}return extend(Model,superClass),Model.prototype.clear=function(){return Model.__super__.clear.call(this),collection.clearNeighbors(this),collection.moveUpdate()},Model.prototype.toggleFlag=function(){return Model.__super__.toggleFlag.call(this),collection.moveUpdate()},Model.prototype.click=function($event){return collection.noMineFirstClick(this),Model.__super__.click.call(this,$event)},Model}(TileModel),this.newGame()}return TilesCollection.prototype.newGame=function(){var attrs,i,j,k,mineNum,ref,ref1,ref2,tile,x,y;for(this.reset(),this.sizeY=4,this.sizeX=7,this.numOfMines=5,y=i=0,ref=this.sizeY-1;ref>=0?ref>=i:i>=ref;y=ref>=0?++i:--i)for(x=j=0,ref1=this.sizeX-1;ref1>=0?ref1>=j:j>=ref1;x=ref1>=0?++j:--j)attrs={x:x,y:y},this.add(attrs);for(mineNum=k=1,ref2=this.numOfMines;ref2>=1?ref2>=k:k>=ref2;mineNum=ref2>=1?++k:--k)tile=this.randomSafeTile(),tile.model.isMine=!0;return this.tallyMines(),this.gameUpdate()},TilesCollection.prototype.noMineFirstClick=function(tile){return 0===this.numOfClears&&tile.model.isMine===!0&&(tile.model.isMine=!1,this.randomSafeTile().model.isMine=!0,this.tallyMines()),tile},TilesCollection.prototype.add=function(model){var tile;return tile=new this.model(model),this.all.push(tile),tile},TilesCollection.prototype.handleTileClick=function(event,index){},TilesCollection.prototype.reset=function(){return this.all=[],this},TilesCollection.prototype.get=function(attrs){return this.getAll(attrs)[0]},TilesCollection.prototype.getAll=function(attrs){var i,key,len,matches,numOfAttrs,numOfMatchedAttrs,ref,tile,val;if(matches=[],!attrs)return this.all;for(ref=this.all,i=0,len=ref.length;len>i;i++){tile=ref[i],numOfAttrs=0,numOfMatchedAttrs=0;for(key in attrs)val=attrs[key],numOfAttrs++,tile.model[key]===val&&numOfMatchedAttrs++;numOfMatchedAttrs===numOfAttrs&&matches.push(tile)}return matches},TilesCollection.prototype.randomSafeTile=function(){var findAttrs,randomIndex,safeTiles;return findAttrs={isClear:!1,isMine:!1},safeTiles=this.getAll(findAttrs),randomIndex=Math.floor(Math.random()*safeTiles.length),safeTiles[randomIndex]},TilesCollection.prototype.tallyMines=function(){var adjacentTile,i,j,len,len1,neighborAttrs,neighborMine,neighborMines,neighborX,neighborY,ref,ref1,results,tile;for(ref=this.all,results=[],i=0,len=ref.length;len>i;i++){for(tile=ref[i],neighborMines=0,ref1=tile.adjacentTiles,j=0,len1=ref1.length;len1>j;j++)adjacentTile=ref1[j],neighborX=tile.model.x+adjacentTile[0],neighborY=tile.model.y+adjacentTile[1],neighborAttrs={isMine:!0,x:neighborX,y:neighborY},neighborMine=this.get(neighborAttrs),void 0!==neighborMine&&neighborMines++;results.push(tile.model.adjacentMines=neighborMines)}return results},TilesCollection.prototype.gameUpdate=function(){var i,len,ref,tile;for(this.x=Math.max.apply(this,this.all.map(function(tile){return tile.model.x})),this.y=Math.max.apply(this,this.all.map(function(tile){return tile.model.y})),this.x=this.x--,this.y=this.y--,this.numOfMines=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isMine===!0&&this.numOfMines++;return this.moveUpdate()},TilesCollection.prototype.moveUpdate=function(){var i,len,ref,tile;for(this.loss=!1,this.win=!1,this.numOfClears=0,this.numOfFlags=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isClear===!0&&this.numOfClears++,tile.model.isFlagged===!0&&this.numOfFlags++,tile.model.isMine===!0&&tile.model.isClear===!0&&(this.loss=!0);return this.loss===!1&&this.all.length-this.numOfMines-this.numOfClears===0?this.win=!0:void 0},TilesCollection.prototype.clearNeighbors=function(tile){var adjacentTile,i,len,neighbor,ref,results,shouldClearNeighbor,shouldClearNeighbors;if(shouldClearNeighbors=0===tile.model.adjacentMines&&tile.model.isMine===!1){for(ref=tile.adjacentTiles,results=[],i=0,len=ref.length;len>i;i++)adjacentTile=ref[i],neighbor=this.get({x:tile.model.x+adjacentTile[0],y:tile.model.y+adjacentTile[1]}),shouldClearNeighbor=neighbor&&neighbor.model.isClear===!1&&neighbor.model.isMine===!1,results.push(shouldClearNeighbor?neighbor.click():void 0);return results}},TilesCollection}(),module.exports=TilesCollection}).call(this)},{"../models/TileModel.coffee":8}],6:[function(require,module,exports){(function(){var R,Tile,TileActions;TileActions=require("../actions/TileActions.coffee"),R=React.DOM,Tile=React.createClass({displayName:"Tile",componentDidMount:function(){return this.props.tile.model.index=this.props.index},render:function(){return R.li({className:this.getClass(),onClick:this.clickHandler},R.span(null,this.getText()))},clickHandler:function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?TileActions.toggleFlag(this.props.tile.model.uid):TileActions.clear(this.props.tile.model.uid)):TileActions.clear(this.props.tile.model.uid)},isFirstColumn:function(){return 0===this.props.tile.model.x},hasBeenFlagged:function(){return this.props.tile.model.isClear!==!0&&this.props.tile.model.isFlagged===!0},hasBeenCleared:function(){return this.props.tile.model.isClear===!0},hasMine:function(){return this.props.tile.model.isMine===!0},shouldDisplayMine:function(){return this.hasMine()&&this.hasBeenCleared()},hasZeroAdjacentMines:function(){return 0===this.props.tile.model.adjacentMines&&!this.hasMine()},getText:function(){var text;return text=this.props.tile.model.adjacentMines,this.hasBeenFlagged()?text="?":this.shouldDisplayMine()&&(text="X"),text},getClass:function(){return["tile",this.isFirstColumn()?"nth":void 0,this.hasBeenCleared()?"clear":void 0,this.hasBeenFlagged()?"flagged":void 0,this.shouldDisplayMine()?"mine":void 0,this.hasZeroAdjacentMines()?"clear zero":void 0].join(" ")}}),module.exports=Tile}).call(this)},{"../actions/TileActions.coffee":4}],7:[function(require,module,exports){(function(){var Dispatcher,R,TileComponent,TileStore,Tiles,getState;TileComponent=require("./TileComponent.coffee"),Dispatcher=require("../Dispatcher.coffee"),TileStore=require("../stores/TileStore.coffee"),R=React.DOM,getState=function(){return{all:TileStore.getAll()}},Tiles=React.createClass({displayName:"Tiles",getInitialState:function(){return getState()},componentDidMount:function(){return TileStore.addChangeListener(this._onChange)},componentWillUnmount:function(){return TileStore.removeChangeListener(this._onChange)},render:function(){var tiles;return tiles=this.state.all.map(function(_this){return function(item,index){return React.createElement(TileComponent,{key:index,ref:item.model.uid,tile:item})}}(this)),R.ul({id:"board"},tiles)},_onChange:function(){return console.log("change!"),this.setState(getState())}}),module.exports=Tiles}).call(this)},{"../Dispatcher.coffee":3,"../stores/TileStore.coffee":9,"./TileComponent.coffee":6}],8:[function(require,module,exports){(function(){var TileModel;Number.isInteger=Number.isInteger||function(value){return"number"==typeof value&&isFinite(value)&&Math.floor(value)===value},module.exports=TileModel=function(){function TileModel(attrs){if(!Number.isInteger(attrs.x)||!Number.isInteger(attrs.y))throw"`x` and `y` are required Integer attributes to instantiate Tile";this.model={x:void 0,y:void 0,uid:void 0,isMine:!1,isClear:!1,isFlagged:!1,adjacentMines:0},this.adjacentTiles=[[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]],this.set(attrs)}return TileModel.prototype.set=function(attrs){var attr,key;for(key in attrs)attr=attrs[key],this.model[key]=attr,this.model.uid=String(attrs.x)+"-"+String(attrs.y);return this},TileModel.prototype.toggleFlag=function(){return this.model.isFlagged=!this.model.isFlagged,this},TileModel.prototype.clear=function(){return this.model.isClear=!0,this.model.isFlagged=!1,this},TileModel.prototype.click=function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?this.toggleFlag():this.clear()):this.clear()},TileModel}()}).call(this)},{}],9:[function(require,module,exports){(function(){var Dispatcher,EventEmitter,Tiles,TilesCollection,TodoStore,assign;TilesCollection=require("../collections/TilesCollection.coffee"),Dispatcher=require("../Dispatcher.coffee"),EventEmitter=require("events").EventEmitter,assign=require("object-assign"),Tiles=new TilesCollection,TodoStore=assign({},EventEmitter.prototype,{event:"change",getAll:function(){return Tiles.getAll()},emitChange:function(){return this.emit(this.event)},addChangeListener:function(callback){return this.on(this.event,callback)},removeChangeListener:function(callback){return this.removeListener(this.event,callback)}}),Dispatcher.register(function(event){var tile;switch(event.type){case"TILE_FLAG_TOGGLE":return tile=Tiles.get({uid:event.uid}),tile.toggleFlag(),TodoStore.emitChange(),console.log("tile flag");case"TILE_CLEAR":return tile=Tiles.get({uid:event.uid}),tile.clear(),TodoStore.emitChange(),console.log("tile clear")}}),module.exports=TodoStore}).call(this)},{"../Dispatcher.coffee":3,"../collections/TilesCollection.coffee":5,events:13,"object-assign":16}],10:[function(require,module,exports){arguments[4][2][0].apply(exports,arguments)},{"./lib/Dispatcher":11,dup:2}],11:[function(require,module,exports){"use strict";function Dispatcher(){this.$Dispatcher_callbacks={},this.$Dispatcher_isPending={},this.$Dispatcher_isHandled={},this.$Dispatcher_isDispatching=!1,this.$Dispatcher_pendingPayload=null}var invariant=require("./invariant"),_lastID=1,_prefix="ID_";Dispatcher.prototype.register=function(callback){var id=_prefix+_lastID++;return this.$Dispatcher_callbacks[id]=callback,id},Dispatcher.prototype.unregister=function(id){invariant(this.$Dispatcher_callbacks[id],"Dispatcher.unregister(...): `%s` does not map to a registered callback.",id),delete this.$Dispatcher_callbacks[id]},Dispatcher.prototype.waitFor=function(ids){invariant(this.$Dispatcher_isDispatching,"Dispatcher.waitFor(...): Must be invoked while dispatching.");for(var ii=0;ii<ids.length;ii++){var id=ids[ii];this.$Dispatcher_isPending[id]?invariant(this.$Dispatcher_isHandled[id],"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",id):(invariant(this.$Dispatcher_callbacks[id],"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",id),this.$Dispatcher_invokeCallback(id))}},Dispatcher.prototype.dispatch=function(payload){invariant(!this.$Dispatcher_isDispatching,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."),this.$Dispatcher_startDispatching(payload);try{for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]||this.$Dispatcher_invokeCallback(id)}finally{this.$Dispatcher_stopDispatching()}},Dispatcher.prototype.isDispatching=function(){return this.$Dispatcher_isDispatching},Dispatcher.prototype.$Dispatcher_invokeCallback=function(id){this.$Dispatcher_isPending[id]=!0,this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload),this.$Dispatcher_isHandled[id]=!0},Dispatcher.prototype.$Dispatcher_startDispatching=function(payload){for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]=!1,this.$Dispatcher_isHandled[id]=!1;this.$Dispatcher_pendingPayload=payload,this.$Dispatcher_isDispatching=!0},Dispatcher.prototype.$Dispatcher_stopDispatching=function(){this.$Dispatcher_pendingPayload=null,this.$Dispatcher_isDispatching=!1},module.exports=Dispatcher},{"./invariant":12}],12:[function(require,module,exports){"use strict";var invariant=function(condition,format,a,b,c,d,e,f){if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;error=new Error("Invariant Violation: "+format.replace(/%s/g,function(){return args[argIndex++]}))}throw error.framesToPop=1,error}};module.exports=invariant},{}],13:[function(require,module,exports){function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(arg){return"function"==typeof arg}function isNumber(arg){return"number"==typeof arg}function isObject(arg){return"object"==typeof arg&&null!==arg}function isUndefined(arg){return void 0===arg}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||0>n||isNaN(n))throw TypeError("n must be a positive number");return this._maxListeners=n,this},EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(this._events||(this._events={}),"error"===type&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if(er=arguments[1],er instanceof Error)throw er;throw TypeError('Uncaught, unspecified "error" event.')}if(handler=this._events[type],isUndefined(handler))return!1;if(isFunction(handler))switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];handler.apply(this,args)}else if(isObject(handler)){for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];for(listeners=handler.slice(),len=listeners.length,i=0;len>i;i++)listeners[i].apply(this,args)}return!0},EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",type,isFunction(listener.listener)?listener.listener:listener),this._events[type]?isObject(this._events[type])?this._events[type].push(listener):this._events[type]=[this._events[type],listener]:this._events[type]=listener,isObject(this._events[type])&&!this._events[type].warned){var m;m=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners,m&&m>0&&this._events[type].length>m&&(this._events[type].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[type].length),"function"==typeof console.trace&&console.trace())}return this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(type,listener){function g(){this.removeListener(type,g),fired||(fired=!0,listener.apply(this,arguments))}if(!isFunction(listener))throw TypeError("listener must be a function");var fired=!1;return g.listener=listener,this.on(type,g),this},EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError("listener must be a function");if(!this._events||!this._events[type])return this;if(list=this._events[type],length=list.length,position=-1,list===listener||isFunction(list.listener)&&list.listener===listener)delete this._events[type],this._events.removeListener&&this.emit("removeListener",type,listener);else if(isObject(list)){for(i=length;i-->0;)if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break}if(0>position)return this;1===list.length?(list.length=0,delete this._events[type]):list.splice(position,1),this._events.removeListener&&this.emit("removeListener",type,listener)}return this},EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[type]&&delete this._events[type],this;if(0===arguments.length){for(key in this._events)"removeListener"!==key&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events={},this}if(listeners=this._events[type],isFunction(listeners))this.removeListener(type,listeners);else for(;listeners.length;)this.removeListener(type,listeners[listeners.length-1]);return delete this._events[type],this},EventEmitter.prototype.listeners=function(type){var ret;return ret=this._events&&this._events[type]?isFunction(this._events[type])?[this._events[type]]:this._events[type].slice():[]},EventEmitter.listenerCount=function(emitter,type){var ret;return ret=emitter._events&&emitter._events[type]?isFunction(emitter._events[type])?1:emitter._events[type].length:0}},{}],14:[function(require,module,exports){arguments[4][11][0].apply(exports,arguments)},{"./invariant":15,dup:11}],15:[function(require,module,exports){arguments[4][12][0].apply(exports,arguments)},{dup:12}],16:[function(require,module,exports){"use strict";function ToObject(val){if(null==val)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(val)}module.exports=Object.assign||function(target,source){for(var from,keys,to=ToObject(target),s=1;s<arguments.length;s++){from=arguments[s],keys=Object.keys(Object(from));for(var i=0;i<keys.length;i++)to[keys[i]]=from[keys[i]]}return to}},{}]},{},[1,2]);
//# sourceMappingURL=data:application/json;base64,