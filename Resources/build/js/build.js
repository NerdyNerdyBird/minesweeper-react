!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){(function(){var GameComponent,ViewController;GameComponent=require("./components/GameComponent.coffee"),ViewController=React.createElement(GameComponent,null),React.render(ViewController,document.getElementById("minesweeper"))}).call(this)},{"./components/GameComponent.coffee":10}],2:[function(require,module,exports){module.exports.Dispatcher=require("./lib/Dispatcher")},{"./lib/Dispatcher":24}],3:[function(require,module,exports){(function(){var AppDispatcher,Dispatcher,ModalStore,TileStore,changeModal,onTilesChange;Dispatcher=require("Flux").Dispatcher,AppDispatcher=new Dispatcher,TileStore=require("./stores/TileStore.coffee"),ModalStore=require("./stores/ModalStore.coffee"),changeModal=function(name){return name?ModalStore.toggle(name):ModalStore.reset(),ModalStore.emitChange()},onTilesChange=function(){var info;return info=TileStore.getInfo(),(info.win||info.loss)&&ModalActions.toggle("newGame"),TileStore.emitChange()},AppDispatcher.register(function(event){var tile;switch(event.type){case"TILE_FLAG_TOGGLE":return console.log("tile flag"),tile=TileStore.get({uid:event.uid}),tile.toggleFlag(),onTilesChange();case"TILE_CLEAR":return console.log("tile clear"),tile=TileStore.get({uid:event.uid}),tile.clear(),onTilesChange();case"TILES_CLEAR_SAFE_RANDOM":if(console.log("tiles clear safe random"),tile=TileStore.randomSafeTile())return tile.clear(),onTilesChange();break;case"TILES_NEW_GAME":return console.log("newGame"),TileStore.newGame(8,4,10),onTilesChange(),changeModal("newGame");case"MODAL_TOGGLE":return ModalStore.toggle(event.name),ModalStore.emitChange();case"MODAL_RESET":return console.log,changeModal()}}),module.exports=AppDispatcher}).call(this)},{"./stores/ModalStore.coffee":18,"./stores/TileStore.coffee":19,Flux:20}],4:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={toggle:function(name){return console.log(name),Dispatcher.dispatch({type:"MODAL_TOGGLE",name:name})},reset:function(){return Dispatcher.dispatch({type:"MODAL_RESET"})}}}).call(this)},{"../Dispatcher.coffee":3}],5:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={toggleFlag:function(uid){return Dispatcher.dispatch({type:"TILE_FLAG_TOGGLE",uid:uid})},clear:function(uid){return Dispatcher.dispatch({type:"TILE_CLEAR",uid:uid})}}}).call(this)},{"../Dispatcher.coffee":3}],6:[function(require,module,exports){(function(){var Dispatcher;Dispatcher=require("../Dispatcher.coffee"),module.exports={clearSafeRandomTile:function(){return console.log("csrt"),Dispatcher.dispatch({type:"TILES_CLEAR_SAFE_RANDOM"})},newGame:function(){return console.log("new game"),Dispatcher.dispatch({type:"TILES_NEW_GAME"})}}}).call(this)},{"../Dispatcher.coffee":3}],7:[function(require,module,exports){(function(){var ModalsCollection;ModalsCollection=function(){function ModalsCollection(){this.show={}}return ModalsCollection.prototype.set=function(fileName){return this.show[fileName]=!1,this},ModalsCollection.prototype.toggle=function(name){var isBeingShown,modalName,ref,results;ref=this.show,results=[];for(modalName in ref)isBeingShown=ref[modalName],results.push(modalName===name?this.show[modalName]=!isBeingShown:isBeingShown=!1);return results},ModalsCollection.prototype.reset=function(){var key,ref,showModal;ref=this.show;for(key in ref)showModal=ref[key],this.show[key]=!1;return this},ModalsCollection}(),module.exports=ModalsCollection}).call(this)},{}],8:[function(require,module,exports){(function(){var TileModel,TilesCollection,extend=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child},hasProp={}.hasOwnProperty;TileModel=require("../models/TileModel.coffee"),TilesCollection=function(){function TilesCollection(){var Model,collection;this.all=[],collection=this,this.model=Model=function(superClass){function Model(){return Model.__super__.constructor.apply(this,arguments)}return extend(Model,superClass),Model.prototype.clear=function(){return Model.__super__.clear.call(this),collection.clearNeighbors(this),collection.moveUpdate()},Model.prototype.toggleFlag=function(){return Model.__super__.toggleFlag.call(this),collection.moveUpdate()},Model.prototype.click=function($event){return collection.noMineFirstClick(this),Model.__super__.click.call(this,$event)},Model}(TileModel)}return TilesCollection.prototype.newGame=function(x,y,mines){var attrs,i,j,k,mineNum,ref,ref1,ref2,tile;for(this.reset(),this.sizeY=x,this.sizeX=y,this.numOfMines=mines,y=i=0,ref=this.sizeY-1;ref>=0?ref>=i:i>=ref;y=ref>=0?++i:--i)for(x=j=0,ref1=this.sizeX-1;ref1>=0?ref1>=j:j>=ref1;x=ref1>=0?++j:--j)attrs={x:x,y:y},this.add(attrs);for(mineNum=k=1,ref2=this.numOfMines;ref2>=1?ref2>=k:k>=ref2;mineNum=ref2>=1?++k:--k)tile=this.randomSafeTile(),tile.model.isMine=!0;return this.tallyMines(),this.gameUpdate()},TilesCollection.prototype.noMineFirstClick=function(tile){return 0===this.numOfClears&&tile.model.isMine===!0&&(tile.model.isMine=!1,this.randomSafeTile().model.isMine=!0,this.tallyMines()),tile},TilesCollection.prototype.add=function(model){var tile;return tile=new this.model(model),this.all.push(tile),tile},TilesCollection.prototype.handleTileClick=function(event,index){},TilesCollection.prototype.reset=function(){return this.all=[],this},TilesCollection.prototype.randomSafeTile=function(){var findAttrs,randomIndex,safeTiles;return findAttrs={isClear:!1,isMine:!1},safeTiles=this.getAll(findAttrs),randomIndex=Math.floor(Math.random()*safeTiles.length),safeTiles[randomIndex]},TilesCollection.prototype.tallyMines=function(){var adjacentTile,i,j,len,len1,neighborAttrs,neighborMine,neighborMines,neighborX,neighborY,ref,ref1,results,tile;for(ref=this.all,results=[],i=0,len=ref.length;len>i;i++){for(tile=ref[i],neighborMines=0,ref1=tile.adjacentTiles,j=0,len1=ref1.length;len1>j;j++)adjacentTile=ref1[j],neighborX=tile.model.x+adjacentTile[0],neighborY=tile.model.y+adjacentTile[1],neighborAttrs={isMine:!0,x:neighborX,y:neighborY},neighborMine=this.get(neighborAttrs),void 0!==neighborMine&&neighborMines++;results.push(tile.model.adjacentMines=neighborMines)}return results},TilesCollection.prototype.gameUpdate=function(){var i,len,ref,tile;for(this.x=Math.max.apply(this,this.all.map(function(tile){return tile.model.x})),this.y=Math.max.apply(this,this.all.map(function(tile){return tile.model.y})),this.x=this.x--,this.y=this.y--,this.numOfMines=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isMine===!0&&this.numOfMines++;return this.moveUpdate()},TilesCollection.prototype.moveUpdate=function(){var i,len,ref,tile;for(this.loss=!1,this.win=!1,this.numOfClears=0,this.numOfFlags=0,ref=this.all,i=0,len=ref.length;len>i;i++)tile=ref[i],tile.model.isClear===!0&&this.numOfClears++,tile.model.isFlagged===!0&&this.numOfFlags++,tile.model.isMine===!0&&tile.model.isClear===!0&&(this.loss=!0);return this.loss===!1&&this.all.length-this.numOfMines-this.numOfClears===0?this.win=!0:void 0},TilesCollection.prototype.clearNeighbors=function(tile){var adjacentTile,i,len,neighbor,ref,results,shouldClearNeighbor,shouldClearNeighbors;if(shouldClearNeighbors=0===tile.model.adjacentMines&&tile.model.isMine===!1){for(ref=tile.adjacentTiles,results=[],i=0,len=ref.length;len>i;i++)adjacentTile=ref[i],neighbor=this.get({x:tile.model.x+adjacentTile[0],y:tile.model.y+adjacentTile[1]}),shouldClearNeighbor=neighbor&&neighbor.model.isClear===!1&&neighbor.model.isMine===!1,results.push(shouldClearNeighbor?neighbor.click():void 0);return results}},TilesCollection.prototype.get=function(attrs){return this.getAll(attrs)[0]},TilesCollection.prototype.getAll=function(attrs){var i,key,len,matches,numOfAttrs,numOfMatchedAttrs,ref,tile,val;if(matches=[],!attrs)return this.all;for(ref=this.all,i=0,len=ref.length;len>i;i++){tile=ref[i],numOfAttrs=0,numOfMatchedAttrs=0;for(key in attrs)val=attrs[key],numOfAttrs++,tile.model[key]===val&&numOfMatchedAttrs++;numOfMatchedAttrs===numOfAttrs&&matches.push(tile)}return matches},TilesCollection}(),module.exports=TilesCollection}).call(this)},{"../models/TileModel.coffee":17}],9:[function(require,module,exports){(function(){var Dashboard,ModalActions,R,TilesActions;ModalActions=require("../actions/ModalActions.coffee"),TilesActions=require("../actions/TilesActions.coffee"),R=React.DOM,Dashboard=React.createClass({displayName:"Dashboard",render:function(){return R.div({id:"dashboard"},[R.div({key:"new-game",className:"new-game button",onClick:function(){return ModalActions.toggle("newGame")}},"new game"),R.div({key:"select-tile",className:"select-tile button",onClick:TilesActions.clearSafeRandomTile},"clear a safe tile"),R.div({key:"instructions",className:"instructions button",onClick:function(){return ModalActions.toggle("instructions")}},"instructions")])}}),module.exports=Dashboard}).call(this)},{"../actions/ModalActions.coffee":4,"../actions/TilesActions.coffee":6}],10:[function(require,module,exports){(function(){var DashboardComponent,Dispatcher,Game,InfoComponent,ModalActions,ModalOverlayComponent,ModalStore,R,TileStore,TilesComponent,assign,getModalStoreState,getState,getTileStoreState;Dispatcher=require("../Dispatcher.coffee"),TileStore=require("../stores/TileStore.coffee"),ModalStore=require("../stores/ModalStore.coffee"),ModalActions=require("../actions/ModalActions.coffee"),TilesComponent=require("./TilesComponent.coffee"),InfoComponent=require("./InfoComponent.coffee"),DashboardComponent=require("./DashboardComponent.coffee"),ModalOverlayComponent=require("./modals/ModalOverlayComponent.coffee"),assign=require("object-assign"),R=React.DOM,getState=function(){return assign({},getTileStoreState(),getModalStoreState())},getTileStoreState=function(){return{all:TileStore.getAll(),info:TileStore.getInfo()}},getModalStoreState=function(){return{modals:ModalStore.getAll()}},Game=React.createClass({displayName:"Game",getInitialState:function(){return getState()},componentDidMount:function(){return TileStore.addChangeListener(this._onTileStoreChange),ModalStore.addChangeListener(this._onModalStoreChange)},componentWillUnmount:function(){return TileStore.removeChangeListener(this._onTileStoreChange),ModalStore.removeChangeListener(this._onModalStoreChange)},_onTileStoreChange:function(){var tilesState;return tilesState=getTileStoreState(),this.setState(tilesState),console.log("tile store change!")},_onModalStoreChange:function(){return this.setState(getModalStoreState()),console.log("modeal change!")},render:function(){var boardWrappper,dashboard,info,overlays,tiles;return info=React.createElement(InfoComponent,{key:"info",info:this.state.info}),tiles=React.createElement(TilesComponent,{key:"tiles",tiles:this.state.all}),boardWrappper=R.div({id:"board-wrappper",key:"board-wrappper"},[info,tiles]),dashboard=React.createElement(DashboardComponent,{key:"dashboard"}),overlays=React.createElement(ModalOverlayComponent,{key:"modal-overlay",info:this.state.info,modals:this.state.modals}),R.div(null,[overlays,boardWrappper,dashboard])}}),module.exports=Game}).call(this)},{"../Dispatcher.coffee":3,"../actions/ModalActions.coffee":4,"../stores/ModalStore.coffee":18,"../stores/TileStore.coffee":19,"./DashboardComponent.coffee":9,"./InfoComponent.coffee":11,"./TilesComponent.coffee":13,"./modals/ModalOverlayComponent.coffee":16,"object-assign":26}],11:[function(require,module,exports){(function(){var Info,R;R=React.DOM,Info=React.createClass({displayName:"Info",render:function(){return R.ul({id:"stats"},[R.li({key:"tiles"},this.props.info.numOfTiles+" tiles"),R.li({key:"mines"},this.props.info.numOfMines+" mines"),R.li({key:"flagged"},this.props.info.numOfFlags+" flagged tiles"),R.li({key:"cleared"},this.props.info.numOfUncleared+" left to clear")])}}),module.exports=Info}).call(this)},{}],12:[function(require,module,exports){(function(){var R,Tile,TileActions;TileActions=require("../actions/TileActions.coffee"),R=React.DOM,Tile=React.createClass({displayName:"Tile",render:function(){return R.li({className:this.getClass(),onClick:this.clickHandler},R.span(null,this.getText()))},clickHandler:function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?TileActions.toggleFlag(this.props.tile.model.uid):TileActions.clear(this.props.tile.model.uid)):TileActions.clear(this.props.tile.model.uid)},isFirstColumn:function(){return 0===this.props.tile.model.x},hasBeenFlagged:function(){return this.props.tile.model.isClear!==!0&&this.props.tile.model.isFlagged===!0},hasBeenCleared:function(){return this.props.tile.model.isClear===!0},hasMine:function(){return this.props.tile.model.isMine===!0},shouldDisplayMine:function(){return this.hasMine()&&this.hasBeenCleared()},hasZeroAdjacentMines:function(){return 0===this.props.tile.model.adjacentMines&&!this.hasMine()},getText:function(){var text;return text=this.props.tile.model.adjacentMines,this.hasBeenFlagged()?text="?":this.shouldDisplayMine()&&(text="X"),text},getClass:function(){return["tile",this.isFirstColumn()?"nth":void 0,this.hasBeenCleared()?"clear":void 0,this.hasBeenFlagged()?"flagged":void 0,this.shouldDisplayMine()?"mine":void 0,this.hasZeroAdjacentMines()?"clear zero":void 0].join(" ")}}),module.exports=Tile}).call(this)},{"../actions/TileActions.coffee":5}],13:[function(require,module,exports){(function(){var R,TileComponent,Tiles;TileComponent=require("./TileComponent.coffee"),R=React.DOM,Tiles=React.createClass({displayName:"Tiles",render:function(){var tiles;return tiles=this.props.tiles.map(function(_this){return function(item,index){return React.createElement(TileComponent,{key:index,ref:item.model.uid,tile:item})}}(this)),R.ul({id:"board"},tiles)}}),module.exports=Tiles}).call(this)},{"./TileComponent.coffee":12}],14:[function(require,module,exports){(function(){var ModalActions,ModalOverlay,R;ModalActions=require("../../actions/ModalActions.coffee"),R=React.DOM,ModalOverlay=React.createClass({displayName:"ModalInstructions",getClass:function(){var classes;return classes=["message"],this.props.show||classes.push("hide"),classes.join(" ")},clickHandler:function(){return ModalActions.toggle("instructions")},render:function(){var button,controls,description;return description=R.div({key:"instructions-description"},[R.div({key:"instructions-header",className:"border-bottom"},"how to play"),R.div({key:"instructions-details",className:"border-bottom"},["the game is played by revealing tiles of the grid.","if a selected tile contains a mine, the player loses the game.","otherwise, a digit is revealed in the tile, indicating the number","of mines located in the eight adjacent tiles."].join(" ")),R.div({key:"instructions-commands"},R.span({className:"code"},"click"),R.span(null," to reveal the squares of the grid.")),R.div({className:"border-bottom"},"(your first click will never land on a mine)")]),controls=R.div({key:"instructions-controls"},[R.span({className:"code"},"shift + click"),R.span(null," or "),R.span({className:"code"},"alt + click"),R.span(null,' will "flag" a tile, helping you to remember where you think a mine is hidden')]),button=R.div({key:"instructions-button"},R.div({className:"button",onClick:this.clickHandler},"got it!")),R.div({key:"instructions-modal",className:this.getClass()},[description,controls,button])}}),module.exports=ModalOverlay}).call(this)},{"../../actions/ModalActions.coffee":4}],15:[function(require,module,exports){(function(){var ModalActions,ModalOverlay,R,TilesActions;ModalActions=require("../../actions/ModalActions.coffee"),TilesActions=require("../../actions/TilesActions.coffee"),R=React.DOM,ModalOverlay=React.createClass({displayName:"ModalNewGame",getClass:function(){var classes;return classes=["message"],this.props.show||classes.push("hide"),classes.join(" ")},getTitleText:function(){return!this.props.show||this.props.win||this.props.loss?this.props.win&&!this.props.loss?"you won!":this.props.win||this.props.win?void 0:"you lost...":"new game?"},clickHandlerNewGame:function(){return TilesActions.newGame()},clickHandlerExitModal:function(){return ModalActions.reset()},renderButtons:function(){var buttons;return buttons=[R.div({className:"button",onClick:this.clickHandlerNewGame},"start!")],this.props.loss||buttons.push(R.div({className:"button",onClick:this.clickHandlerExitModal},"resume!")),R.div(null,buttons)},render:function(){var title;return title=R.div(null,R.div({className:"border-bottom"},R.div({className:"title"},this.getTitleText()))),R.div({key:"modal",className:this.getClass()},[title,this.renderButtons()])}}),module.exports=ModalOverlay}).call(this)},{"../../actions/ModalActions.coffee":4,"../../actions/TilesActions.coffee":6}],16:[function(require,module,exports){(function(){var InstructionsComponent,ModalActions,ModalOverlay,NewGameComponent,R;ModalActions=require("../../actions/ModalActions.coffee"),InstructionsComponent=require("./ModalInstructionsComponent.coffee"),NewGameComponent=require("./ModalNewGameComponent.coffee"),R=React.DOM,ModalOverlay=React.createClass({displayName:"ModalOverlay",getClass:function(){return this.props.modals.newGame?"":this.props.modals.instructions?"":"hide"},resetHandler:function(){return this.props.info.loss||this.props.info.win?void 0:ModalActions.reset()},instructionsHandler:function(){return ModalActions.toggle("instructions")},render:function(){var overlay;return overlay=R.div({id:"overlay",key:"overlay",className:this.getClass(),onClick:this.resetHandler},null),R.div(null,[overlay,React.createElement(InstructionsComponent,{key:"modal-instructions",show:this.props.modals.instructions}),React.createElement(NewGameComponent,{key:"modal-new-game",show:this.props.modals.newGame,win:this.props.info.win,loss:this.props.info.loss})])}}),module.exports=ModalOverlay}).call(this)},{"../../actions/ModalActions.coffee":4,"./ModalInstructionsComponent.coffee":14,"./ModalNewGameComponent.coffee":15}],17:[function(require,module,exports){(function(){var TileModel;Number.isInteger=Number.isInteger||function(value){return"number"==typeof value&&isFinite(value)&&Math.floor(value)===value},module.exports=TileModel=function(){function TileModel(attrs){if(!Number.isInteger(attrs.x)||!Number.isInteger(attrs.y))throw"`x` and `y` are required Integer attributes to instantiate Tile";this.model={x:void 0,y:void 0,uid:void 0,isMine:!1,isClear:!1,isFlagged:!1,adjacentMines:0},this.adjacentTiles=[[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]],this.set(attrs)}return TileModel.prototype.set=function(attrs){var attr,key;for(key in attrs)attr=attrs[key],this.model[key]=attr,this.model.uid=String(attrs.x)+"-"+String(attrs.y);return this},TileModel.prototype.toggleFlag=function(){return this.model.isFlagged=!this.model.isFlagged,this},TileModel.prototype.clear=function(){return this.model.isClear=!0,this.model.isFlagged=!1,this},TileModel.prototype.click=function($event){var flagKeyWasPressed;return $event?(flagKeyWasPressed=$event.shiftKey===!0||$event.altKey===!0,flagKeyWasPressed?this.toggleFlag():this.clear()):this.clear()},TileModel}()}).call(this)},{}],18:[function(require,module,exports){(function(){var EventEmitter,ModalStore,Modals,ModalsCollection,assign;ModalsCollection=require("../collections/ModalsCollection.coffee"),EventEmitter=require("events").EventEmitter,assign=require("object-assign"),Modals=new ModalsCollection,Modals.set("newGame"),Modals.set("instructions"),ModalStore=assign({},EventEmitter.prototype,{event:"event",getAll:function(){return Modals.show},reset:function(){return Modals.reset()},toggle:function(modalName){return Modals.toggle(modalName)},emitChange:function(){return this.emit(this.event)},addChangeListener:function(callback){return this.on(this.event,callback)},removeChangeListener:function(callback){return this.removeListener(this.event,callback)}}),module.exports=ModalStore}).call(this)},{"../collections/ModalsCollection.coffee":7,events:23,"object-assign":26}],19:[function(require,module,exports){(function(){var EventEmitter,TileStore,Tiles,TilesCollection,assign;TilesCollection=require("../collections/TilesCollection.coffee"),EventEmitter=require("events").EventEmitter,assign=require("object-assign"),Tiles=new TilesCollection,Tiles.newGame(4,7,5),TileStore=assign({},EventEmitter.prototype,{event:"change",get:function(attrs){return Tiles.get(attrs)},getAll:function(){return Tiles.getAll()},getInfo:function(){return{win:Tiles.win,loss:Tiles.loss,numOfTiles:Tiles.all.length,numOfMines:Tiles.numOfMines,numOfFlags:Tiles.numOfFlags,numOfUncleared:Tiles.all.length-Tiles.numOfMines-Tiles.numOfClears}},randomSafeTile:function(){return Tiles.randomSafeTile()},newGame:function(x,y,mines){return Tiles.newGame(x,y,mines)},emitChange:function(){return this.emit(this.event)},addChangeListener:function(callback){return this.on(this.event,callback)},removeChangeListener:function(callback){return this.removeListener(this.event,callback)}}),module.exports=TileStore}).call(this)},{"../collections/TilesCollection.coffee":8,events:23,"object-assign":26}],20:[function(require,module,exports){arguments[4][2][0].apply(exports,arguments)},{"./lib/Dispatcher":21,dup:2}],21:[function(require,module,exports){"use strict";function Dispatcher(){this.$Dispatcher_callbacks={},this.$Dispatcher_isPending={},this.$Dispatcher_isHandled={},this.$Dispatcher_isDispatching=!1,this.$Dispatcher_pendingPayload=null}var invariant=require("./invariant"),_lastID=1,_prefix="ID_";Dispatcher.prototype.register=function(callback){var id=_prefix+_lastID++;return this.$Dispatcher_callbacks[id]=callback,id},Dispatcher.prototype.unregister=function(id){invariant(this.$Dispatcher_callbacks[id],"Dispatcher.unregister(...): `%s` does not map to a registered callback.",id),delete this.$Dispatcher_callbacks[id]},Dispatcher.prototype.waitFor=function(ids){invariant(this.$Dispatcher_isDispatching,"Dispatcher.waitFor(...): Must be invoked while dispatching.");for(var ii=0;ii<ids.length;ii++){var id=ids[ii];this.$Dispatcher_isPending[id]?invariant(this.$Dispatcher_isHandled[id],"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",id):(invariant(this.$Dispatcher_callbacks[id],"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",id),this.$Dispatcher_invokeCallback(id))}},Dispatcher.prototype.dispatch=function(payload){invariant(!this.$Dispatcher_isDispatching,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."),this.$Dispatcher_startDispatching(payload);try{for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]||this.$Dispatcher_invokeCallback(id)}finally{this.$Dispatcher_stopDispatching()}},Dispatcher.prototype.isDispatching=function(){return this.$Dispatcher_isDispatching},Dispatcher.prototype.$Dispatcher_invokeCallback=function(id){this.$Dispatcher_isPending[id]=!0,this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload),this.$Dispatcher_isHandled[id]=!0},Dispatcher.prototype.$Dispatcher_startDispatching=function(payload){for(var id in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[id]=!1,this.$Dispatcher_isHandled[id]=!1;this.$Dispatcher_pendingPayload=payload,this.$Dispatcher_isDispatching=!0},Dispatcher.prototype.$Dispatcher_stopDispatching=function(){this.$Dispatcher_pendingPayload=null,this.$Dispatcher_isDispatching=!1},module.exports=Dispatcher},{"./invariant":22}],22:[function(require,module,exports){"use strict";var invariant=function(condition,format,a,b,c,d,e,f){if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;error=new Error("Invariant Violation: "+format.replace(/%s/g,function(){return args[argIndex++]}))}throw error.framesToPop=1,error}};module.exports=invariant},{}],23:[function(require,module,exports){function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(arg){return"function"==typeof arg}function isNumber(arg){return"number"==typeof arg}function isObject(arg){return"object"==typeof arg&&null!==arg}function isUndefined(arg){return void 0===arg}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||0>n||isNaN(n))throw TypeError("n must be a positive number");return this._maxListeners=n,this},EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(this._events||(this._events={}),"error"===type&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if(er=arguments[1],er instanceof Error)throw er;throw TypeError('Uncaught, unspecified "error" event.')}if(handler=this._events[type],isUndefined(handler))return!1;if(isFunction(handler))switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];handler.apply(this,args)}else if(isObject(handler)){for(len=arguments.length,args=new Array(len-1),i=1;len>i;i++)args[i-1]=arguments[i];for(listeners=handler.slice(),len=listeners.length,i=0;len>i;i++)listeners[i].apply(this,args)}return!0},EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",type,isFunction(listener.listener)?listener.listener:listener),this._events[type]?isObject(this._events[type])?this._events[type].push(listener):this._events[type]=[this._events[type],listener]:this._events[type]=listener,isObject(this._events[type])&&!this._events[type].warned){var m;m=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners,m&&m>0&&this._events[type].length>m&&(this._events[type].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[type].length),"function"==typeof console.trace&&console.trace())}return this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(type,listener){function g(){this.removeListener(type,g),fired||(fired=!0,listener.apply(this,arguments))}if(!isFunction(listener))throw TypeError("listener must be a function");var fired=!1;return g.listener=listener,this.on(type,g),this},EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError("listener must be a function");if(!this._events||!this._events[type])return this;if(list=this._events[type],length=list.length,position=-1,list===listener||isFunction(list.listener)&&list.listener===listener)delete this._events[type],this._events.removeListener&&this.emit("removeListener",type,listener);else if(isObject(list)){for(i=length;i-->0;)if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break}if(0>position)return this;1===list.length?(list.length=0,delete this._events[type]):list.splice(position,1),this._events.removeListener&&this.emit("removeListener",type,listener)}return this},EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[type]&&delete this._events[type],this;if(0===arguments.length){for(key in this._events)"removeListener"!==key&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events={},this}if(listeners=this._events[type],isFunction(listeners))this.removeListener(type,listeners);else for(;listeners.length;)this.removeListener(type,listeners[listeners.length-1]);return delete this._events[type],this},EventEmitter.prototype.listeners=function(type){var ret;return ret=this._events&&this._events[type]?isFunction(this._events[type])?[this._events[type]]:this._events[type].slice():[]},EventEmitter.listenerCount=function(emitter,type){var ret;return ret=emitter._events&&emitter._events[type]?isFunction(emitter._events[type])?1:emitter._events[type].length:0}},{}],24:[function(require,module,exports){arguments[4][21][0].apply(exports,arguments)},{"./invariant":25,dup:21}],25:[function(require,module,exports){arguments[4][22][0].apply(exports,arguments)},{dup:22}],26:[function(require,module,exports){"use strict";function ToObject(val){if(null==val)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(val)}module.exports=Object.assign||function(target,source){for(var from,keys,to=ToObject(target),s=1;s<arguments.length;s++){from=arguments[s],keys=Object.keys(Object(from));for(var i=0;i<keys.length;i++)to[keys[i]]=from[keys[i]]}return to}},{}]},{},[1,2]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJSZXNvdXJjZXMvY29mZmVlL0FwcC5jb2ZmZWUiLCJidWlsZC5qcyIsIm5vZGVfbW9kdWxlcy9mbHV4L2luZGV4LmpzIiwiUmVzb3VyY2VzL2NvZmZlZS9EaXNwYXRjaGVyLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvYWN0aW9ucy9Nb2RhbEFjdGlvbnMuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9hY3Rpb25zL1RpbGVBY3Rpb25zLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvYWN0aW9ucy9UaWxlc0FjdGlvbnMuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb2xsZWN0aW9ucy9Nb2RhbHNDb2xsZWN0aW9uLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29sbGVjdGlvbnMvVGlsZXNDb2xsZWN0aW9uLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29tcG9uZW50cy9EYXNoYm9hcmRDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL0dhbWVDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL0luZm9Db21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL1RpbGVDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL1RpbGVzQ29tcG9uZW50LmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvY29tcG9uZW50cy9tb2RhbHMvTW9kYWxJbnN0cnVjdGlvbnNDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL21vZGFscy9Nb2RhbE5ld0dhbWVDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9jb21wb25lbnRzL21vZGFscy9Nb2RhbE92ZXJsYXlDb21wb25lbnQuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9tb2RlbHMvVGlsZU1vZGVsLmNvZmZlZSIsIlJlc291cmNlcy9jb2ZmZWUvc3RvcmVzL01vZGFsU3RvcmUuY29mZmVlIiwiUmVzb3VyY2VzL2NvZmZlZS9zdG9yZXMvVGlsZVN0b3JlLmNvZmZlZSIsIm5vZGVfbW9kdWxlcy9GbHV4L2xpYi9EaXNwYXRjaGVyLmpzIiwibm9kZV9tb2R1bGVzL0ZsdXgvbGliL2ludmFyaWFudC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsIkdhbWVDb21wb25lbnQiLCJWaWV3Q29udHJvbGxlciIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsInJlbmRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0aGlzIiwiLi9jb21wb25lbnRzL0dhbWVDb21wb25lbnQuY29mZmVlIiwyLCJEaXNwYXRjaGVyIiwiLi9saWIvRGlzcGF0Y2hlciIsMywiQXBwRGlzcGF0Y2hlciIsIk1vZGFsU3RvcmUiLCJUaWxlU3RvcmUiLCJjaGFuZ2VNb2RhbCIsIm9uVGlsZXNDaGFuZ2UiLCJuYW1lIiwidG9nZ2xlIiwicmVzZXQiLCJlbWl0Q2hhbmdlIiwiaW5mbyIsImdldEluZm8iLCJ3aW4iLCJsb3NzIiwiTW9kYWxBY3Rpb25zIiwicmVnaXN0ZXIiLCJldmVudCIsInRpbGUiLCJ0eXBlIiwiY29uc29sZSIsImxvZyIsImdldCIsInVpZCIsInRvZ2dsZUZsYWciLCJjbGVhciIsInJhbmRvbVNhZmVUaWxlIiwibmV3R2FtZSIsIi4vc3RvcmVzL01vZGFsU3RvcmUuY29mZmVlIiwiLi9zdG9yZXMvVGlsZVN0b3JlLmNvZmZlZSIsIkZsdXgiLDQsImRpc3BhdGNoIiwiLi4vRGlzcGF0Y2hlci5jb2ZmZWUiLDUsNiwiY2xlYXJTYWZlUmFuZG9tVGlsZSIsNywiTW9kYWxzQ29sbGVjdGlvbiIsInNob3ciLCJwcm90b3R5cGUiLCJzZXQiLCJmaWxlTmFtZSIsImlzQmVpbmdTaG93biIsIm1vZGFsTmFtZSIsInJlZiIsInJlc3VsdHMiLCJwdXNoIiwia2V5Iiwic2hvd01vZGFsIiw4LCJUaWxlTW9kZWwiLCJUaWxlc0NvbGxlY3Rpb24iLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsImhhc1Byb3AiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsIk1vZGVsIiwiY29sbGVjdGlvbiIsImFsbCIsIm1vZGVsIiwic3VwZXJDbGFzcyIsImFwcGx5IiwiYXJndW1lbnRzIiwiY2xlYXJOZWlnaGJvcnMiLCJtb3ZlVXBkYXRlIiwiY2xpY2siLCIkZXZlbnQiLCJub01pbmVGaXJzdENsaWNrIiwieCIsInkiLCJtaW5lcyIsImF0dHJzIiwiaiIsImsiLCJtaW5lTnVtIiwicmVmMSIsInJlZjIiLCJzaXplWSIsInNpemVYIiwibnVtT2ZNaW5lcyIsImFkZCIsImlzTWluZSIsInRhbGx5TWluZXMiLCJnYW1lVXBkYXRlIiwibnVtT2ZDbGVhcnMiLCJoYW5kbGVUaWxlQ2xpY2siLCJpbmRleCIsImZpbmRBdHRycyIsInJhbmRvbUluZGV4Iiwic2FmZVRpbGVzIiwiaXNDbGVhciIsImdldEFsbCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImFkamFjZW50VGlsZSIsImxlbiIsImxlbjEiLCJuZWlnaGJvckF0dHJzIiwibmVpZ2hib3JNaW5lIiwibmVpZ2hib3JNaW5lcyIsIm5laWdoYm9yWCIsIm5laWdoYm9yWSIsImFkamFjZW50VGlsZXMiLCJhZGphY2VudE1pbmVzIiwibWF4IiwibWFwIiwibnVtT2ZGbGFncyIsImlzRmxhZ2dlZCIsIm5laWdoYm9yIiwic2hvdWxkQ2xlYXJOZWlnaGJvciIsInNob3VsZENsZWFyTmVpZ2hib3JzIiwibWF0Y2hlcyIsIm51bU9mQXR0cnMiLCJudW1PZk1hdGNoZWRBdHRycyIsInZhbCIsIi4uL21vZGVscy9UaWxlTW9kZWwuY29mZmVlIiw5LCJEYXNoYm9hcmQiLCJSIiwiVGlsZXNBY3Rpb25zIiwiRE9NIiwiY3JlYXRlQ2xhc3MiLCJkaXNwbGF5TmFtZSIsImRpdiIsImlkIiwiY2xhc3NOYW1lIiwib25DbGljayIsIi4uL2FjdGlvbnMvTW9kYWxBY3Rpb25zLmNvZmZlZSIsIi4uL2FjdGlvbnMvVGlsZXNBY3Rpb25zLmNvZmZlZSIsMTAsIkRhc2hib2FyZENvbXBvbmVudCIsIkdhbWUiLCJJbmZvQ29tcG9uZW50IiwiTW9kYWxPdmVybGF5Q29tcG9uZW50IiwiVGlsZXNDb21wb25lbnQiLCJhc3NpZ24iLCJnZXRNb2RhbFN0b3JlU3RhdGUiLCJnZXRTdGF0ZSIsImdldFRpbGVTdG9yZVN0YXRlIiwibW9kYWxzIiwiZ2V0SW5pdGlhbFN0YXRlIiwiY29tcG9uZW50RGlkTW91bnQiLCJhZGRDaGFuZ2VMaXN0ZW5lciIsIl9vblRpbGVTdG9yZUNoYW5nZSIsIl9vbk1vZGFsU3RvcmVDaGFuZ2UiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZUNoYW5nZUxpc3RlbmVyIiwidGlsZXNTdGF0ZSIsInNldFN0YXRlIiwiYm9hcmRXcmFwcHBlciIsImRhc2hib2FyZCIsIm92ZXJsYXlzIiwidGlsZXMiLCJzdGF0ZSIsIi4uL3N0b3Jlcy9Nb2RhbFN0b3JlLmNvZmZlZSIsIi4uL3N0b3Jlcy9UaWxlU3RvcmUuY29mZmVlIiwiLi9EYXNoYm9hcmRDb21wb25lbnQuY29mZmVlIiwiLi9JbmZvQ29tcG9uZW50LmNvZmZlZSIsIi4vVGlsZXNDb21wb25lbnQuY29mZmVlIiwiLi9tb2RhbHMvTW9kYWxPdmVybGF5Q29tcG9uZW50LmNvZmZlZSIsIm9iamVjdC1hc3NpZ24iLDExLCJJbmZvIiwidWwiLCJsaSIsInByb3BzIiwibnVtT2ZUaWxlcyIsIm51bU9mVW5jbGVhcmVkIiwxMiwiVGlsZSIsIlRpbGVBY3Rpb25zIiwiZ2V0Q2xhc3MiLCJjbGlja0hhbmRsZXIiLCJzcGFuIiwiZ2V0VGV4dCIsImZsYWdLZXlXYXNQcmVzc2VkIiwic2hpZnRLZXkiLCJhbHRLZXkiLCJpc0ZpcnN0Q29sdW1uIiwiaGFzQmVlbkZsYWdnZWQiLCJoYXNCZWVuQ2xlYXJlZCIsImhhc01pbmUiLCJzaG91bGREaXNwbGF5TWluZSIsImhhc1plcm9BZGphY2VudE1pbmVzIiwidGV4dCIsImpvaW4iLCIuLi9hY3Rpb25zL1RpbGVBY3Rpb25zLmNvZmZlZSIsMTMsIlRpbGVDb21wb25lbnQiLCJUaWxlcyIsIl90aGlzIiwiaXRlbSIsIi4vVGlsZUNvbXBvbmVudC5jb2ZmZWUiLDE0LCJNb2RhbE92ZXJsYXkiLCJjbGFzc2VzIiwiYnV0dG9uIiwiY29udHJvbHMiLCJkZXNjcmlwdGlvbiIsIi4uLy4uL2FjdGlvbnMvTW9kYWxBY3Rpb25zLmNvZmZlZSIsMTUsImdldFRpdGxlVGV4dCIsImNsaWNrSGFuZGxlck5ld0dhbWUiLCJjbGlja0hhbmRsZXJFeGl0TW9kYWwiLCJyZW5kZXJCdXR0b25zIiwiYnV0dG9ucyIsInRpdGxlIiwiLi4vLi4vYWN0aW9ucy9UaWxlc0FjdGlvbnMuY29mZmVlIiwxNiwiSW5zdHJ1Y3Rpb25zQ29tcG9uZW50IiwiTmV3R2FtZUNvbXBvbmVudCIsImluc3RydWN0aW9ucyIsInJlc2V0SGFuZGxlciIsImluc3RydWN0aW9uc0hhbmRsZXIiLCJvdmVybGF5IiwiLi9Nb2RhbEluc3RydWN0aW9uc0NvbXBvbmVudC5jb2ZmZWUiLCIuL01vZGFsTmV3R2FtZUNvbXBvbmVudC5jb2ZmZWUiLDE3LCJOdW1iZXIiLCJpc0ludGVnZXIiLCJ2YWx1ZSIsImlzRmluaXRlIiwiYXR0ciIsIlN0cmluZyIsMTgsIkV2ZW50RW1pdHRlciIsIk1vZGFscyIsImVtaXQiLCJjYWxsYmFjayIsIm9uIiwicmVtb3ZlTGlzdGVuZXIiLCIuLi9jb2xsZWN0aW9ucy9Nb2RhbHNDb2xsZWN0aW9uLmNvZmZlZSIsImV2ZW50cyIsMTksIi4uL2NvbGxlY3Rpb25zL1RpbGVzQ29sbGVjdGlvbi5jb2ZmZWUiLDIwLCJkdXAiLDIxLCIkRGlzcGF0Y2hlcl9jYWxsYmFja3MiLCIkRGlzcGF0Y2hlcl9pc1BlbmRpbmciLCIkRGlzcGF0Y2hlcl9pc0hhbmRsZWQiLCIkRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nIiwiJERpc3BhdGNoZXJfcGVuZGluZ1BheWxvYWQiLCJpbnZhcmlhbnQiLCJfbGFzdElEIiwiX3ByZWZpeCIsInVucmVnaXN0ZXIiLCJ3YWl0Rm9yIiwiaWRzIiwiaWkiLCIkRGlzcGF0Y2hlcl9pbnZva2VDYWxsYmFjayIsInBheWxvYWQiLCIkRGlzcGF0Y2hlcl9zdGFydERpc3BhdGNoaW5nIiwiJERpc3BhdGNoZXJfc3RvcERpc3BhdGNoaW5nIiwiaXNEaXNwYXRjaGluZyIsIi4vaW52YXJpYW50IiwyMiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYiIsImMiLCJkIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLDIzLCJfZXZlbnRzIiwiX21heExpc3RlbmVycyIsImlzRnVuY3Rpb24iLCJhcmciLCJpc051bWJlciIsImlzT2JqZWN0IiwiaXNVbmRlZmluZWQiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwic2V0TWF4TGlzdGVuZXJzIiwiaXNOYU4iLCJUeXBlRXJyb3IiLCJlciIsImhhbmRsZXIiLCJsaXN0ZW5lcnMiLCJBcnJheSIsInNsaWNlIiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsIm0iLCJuZXdMaXN0ZW5lciIsIndhcm5lZCIsInRyYWNlIiwib25jZSIsImciLCJmaXJlZCIsImxpc3QiLCJwb3NpdGlvbiIsInNwbGljZSIsInJlbW92ZUFsbExpc3RlbmVycyIsInJldCIsImxpc3RlbmVyQ291bnQiLCJlbWl0dGVyIiwyNCwyNSwyNiwiVG9PYmplY3QiLCJPYmplY3QiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9t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LEdBQUEvVSxHQUFBLEVBQUFBLEVBQUFnVixLQUFBelUsT0FBQVAsSUFDQWlWLEdBQUFELEtBQUFoVixJQUFBK1UsS0FBQUMsS0FBQWhWLElBSUEsTUFBQWlWLGV0QjJvRFcsRUFBRSIsImZpbGUiOiJidWlsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgR2FtZUNvbXBvbmVudCwgVmlld0NvbnRyb2xsZXI7XG5cbiAgR2FtZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9HYW1lQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIFZpZXdDb250cm9sbGVyID0gUmVhY3QuY3JlYXRlRWxlbWVudChHYW1lQ29tcG9uZW50LCBudWxsKTtcblxuICBSZWFjdC5yZW5kZXIoVmlld0NvbnRyb2xsZXIsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaW5lc3dlZXBlcicpKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsbnVsbCwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbm1vZHVsZS5leHBvcnRzLkRpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2xpYi9EaXNwYXRjaGVyJylcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEFwcERpc3BhdGNoZXIsIERpc3BhdGNoZXIsIE1vZGFsU3RvcmUsIFRpbGVTdG9yZSwgY2hhbmdlTW9kYWwsIG9uVGlsZXNDaGFuZ2U7XG5cbiAgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJ0ZsdXgnKS5EaXNwYXRjaGVyO1xuXG4gIEFwcERpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcigpO1xuXG4gIFRpbGVTdG9yZSA9IHJlcXVpcmUoJy4vc3RvcmVzL1RpbGVTdG9yZS5jb2ZmZWUnKTtcblxuICBNb2RhbFN0b3JlID0gcmVxdWlyZSgnLi9zdG9yZXMvTW9kYWxTdG9yZS5jb2ZmZWUnKTtcblxuICBjaGFuZ2VNb2RhbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIE1vZGFsU3RvcmUucmVzZXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTW9kYWxTdG9yZS50b2dnbGUobmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBNb2RhbFN0b3JlLmVtaXRDaGFuZ2UoKTtcbiAgfTtcblxuICBvblRpbGVzQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluZm87XG4gICAgaW5mbyA9IFRpbGVTdG9yZS5nZXRJbmZvKCk7XG4gICAgaWYgKGluZm8ud2luIHx8IGluZm8ubG9zcykge1xuICAgICAgTW9kYWxBY3Rpb25zLnRvZ2dsZSgnbmV3R2FtZScpO1xuICAgIH1cbiAgICByZXR1cm4gVGlsZVN0b3JlLmVtaXRDaGFuZ2UoKTtcbiAgfTtcblxuICBBcHBEaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHRpbGU7XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlICdUSUxFX0ZMQUdfVE9HR0xFJzpcbiAgICAgICAgY29uc29sZS5sb2coJ3RpbGUgZmxhZycpO1xuICAgICAgICB0aWxlID0gVGlsZVN0b3JlLmdldCh7XG4gICAgICAgICAgdWlkOiBldmVudC51aWRcbiAgICAgICAgfSk7XG4gICAgICAgIHRpbGUudG9nZ2xlRmxhZygpO1xuICAgICAgICByZXR1cm4gb25UaWxlc0NoYW5nZSgpO1xuICAgICAgY2FzZSAnVElMRV9DTEVBUic6XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aWxlIGNsZWFyJyk7XG4gICAgICAgIHRpbGUgPSBUaWxlU3RvcmUuZ2V0KHtcbiAgICAgICAgICB1aWQ6IGV2ZW50LnVpZFxuICAgICAgICB9KTtcbiAgICAgICAgdGlsZS5jbGVhcigpO1xuICAgICAgICByZXR1cm4gb25UaWxlc0NoYW5nZSgpO1xuICAgICAgY2FzZSAnVElMRVNfQ0xFQVJfU0FGRV9SQU5ET00nOlxuICAgICAgICBjb25zb2xlLmxvZygndGlsZXMgY2xlYXIgc2FmZSByYW5kb20nKTtcbiAgICAgICAgdGlsZSA9IFRpbGVTdG9yZS5yYW5kb21TYWZlVGlsZSgpO1xuICAgICAgICBpZiAodGlsZSkge1xuICAgICAgICAgIHRpbGUuY2xlYXIoKTtcbiAgICAgICAgICByZXR1cm4gb25UaWxlc0NoYW5nZSgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnVElMRVNfTkVXX0dBTUUnOlxuICAgICAgICBjb25zb2xlLmxvZygnbmV3R2FtZScpO1xuICAgICAgICBUaWxlU3RvcmUubmV3R2FtZSg4LCA0LCAxMCk7XG4gICAgICAgIG9uVGlsZXNDaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZU1vZGFsKCduZXdHYW1lJyk7XG4gICAgICBjYXNlICdNT0RBTF9UT0dHTEUnOlxuICAgICAgICBNb2RhbFN0b3JlLnRvZ2dsZShldmVudC5uYW1lKTtcbiAgICAgICAgcmV0dXJuIE1vZGFsU3RvcmUuZW1pdENoYW5nZSgpO1xuICAgICAgY2FzZSAnTU9EQUxfUkVTRVQnOlxuICAgICAgICBjb25zb2xlLmxvZztcbiAgICAgICAgcmV0dXJuIGNoYW5nZU1vZGFsKCk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEFwcERpc3BhdGNoZXI7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEaXNwYXRjaGVyO1xuXG4gIERpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9EaXNwYXRjaGVyLmNvZmZlZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHRvZ2dsZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgY29uc29sZS5sb2cobmFtZSk7XG4gICAgICByZXR1cm4gRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdNT0RBTF9UT0dHTEUnLFxuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ01PREFMX1JFU0VUJ1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGlzcGF0Y2hlcjtcblxuICBEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vRGlzcGF0Y2hlci5jb2ZmZWUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB0b2dnbGVGbGFnOiBmdW5jdGlvbih1aWQpIHtcbiAgICAgIHJldHVybiBEaXNwYXRjaGVyLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1RJTEVfRkxBR19UT0dHTEUnLFxuICAgICAgICB1aWQ6IHVpZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24odWlkKSB7XG4gICAgICByZXR1cm4gRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdUSUxFX0NMRUFSJyxcbiAgICAgICAgdWlkOiB1aWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIERpc3BhdGNoZXI7XG5cbiAgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL0Rpc3BhdGNoZXIuY29mZmVlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY2xlYXJTYWZlUmFuZG9tVGlsZTogZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnY3NydCcpO1xuICAgICAgcmV0dXJuIERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnVElMRVNfQ0xFQVJfU0FGRV9SQU5ET00nXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG5ld0dhbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2coJ25ldyBnYW1lJyk7XG4gICAgICByZXR1cm4gRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdUSUxFU19ORVdfR0FNRSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIE1vZGFsc0NvbGxlY3Rpb247XG5cbiAgTW9kYWxzQ29sbGVjdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBNb2RhbHNDb2xsZWN0aW9uKCkge1xuICAgICAgdGhpcy5zaG93ID0ge307XG4gICAgfVxuXG4gICAgTW9kYWxzQ29sbGVjdGlvbi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oZmlsZU5hbWUpIHtcbiAgICAgIHRoaXMuc2hvd1tmaWxlTmFtZV0gPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBNb2RhbHNDb2xsZWN0aW9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgaXNCZWluZ1Nob3duLCBtb2RhbE5hbWUsIHJlZiwgcmVzdWx0cztcbiAgICAgIHJlZiA9IHRoaXMuc2hvdztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAobW9kYWxOYW1lIGluIHJlZikge1xuICAgICAgICBpc0JlaW5nU2hvd24gPSByZWZbbW9kYWxOYW1lXTtcbiAgICAgICAgaWYgKG1vZGFsTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnNob3dbbW9kYWxOYW1lXSA9ICFpc0JlaW5nU2hvd24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChpc0JlaW5nU2hvd24gPSBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBNb2RhbHNDb2xsZWN0aW9uLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGtleSwgcmVmLCBzaG93TW9kYWw7XG4gICAgICByZWYgPSB0aGlzLnNob3c7XG4gICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgc2hvd01vZGFsID0gcmVmW2tleV07XG4gICAgICAgIHRoaXMuc2hvd1trZXldID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIE1vZGFsc0NvbGxlY3Rpb247XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IE1vZGFsc0NvbGxlY3Rpb247XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBUaWxlTW9kZWwsIFRpbGVzQ29sbGVjdGlvbixcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFRpbGVNb2RlbCA9IHJlcXVpcmUoJy4uL21vZGVscy9UaWxlTW9kZWwuY29mZmVlJyk7XG5cbiAgVGlsZXNDb2xsZWN0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFRpbGVzQ29sbGVjdGlvbigpIHtcbiAgICAgIHZhciBNb2RlbCwgY29sbGVjdGlvbjtcbiAgICAgIHRoaXMuYWxsID0gW107XG4gICAgICBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgIHRoaXMubW9kZWwgPSBNb2RlbCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgICAgIGV4dGVuZChNb2RlbCwgc3VwZXJDbGFzcyk7XG5cbiAgICAgICAgZnVuY3Rpb24gTW9kZWwoKSB7XG4gICAgICAgICAgcmV0dXJuIE1vZGVsLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgTW9kZWwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgTW9kZWwuX19zdXBlcl9fLmNsZWFyLmNhbGwodGhpcyk7XG4gICAgICAgICAgY29sbGVjdGlvbi5jbGVhck5laWdoYm9ycyh0aGlzKTtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5tb3ZlVXBkYXRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgTW9kZWwucHJvdG90eXBlLnRvZ2dsZUZsYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBNb2RlbC5fX3N1cGVyX18udG9nZ2xlRmxhZy5jYWxsKHRoaXMpO1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLm1vdmVVcGRhdGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBNb2RlbC5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICBjb2xsZWN0aW9uLm5vTWluZUZpcnN0Q2xpY2sodGhpcyk7XG4gICAgICAgICAgcmV0dXJuIE1vZGVsLl9fc3VwZXJfXy5jbGljay5jYWxsKHRoaXMsICRldmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIE1vZGVsO1xuXG4gICAgICB9KShUaWxlTW9kZWwpO1xuICAgIH1cblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUubmV3R2FtZSA9IGZ1bmN0aW9uKHgsIHksIG1pbmVzKSB7XG4gICAgICB2YXIgYXR0cnMsIGksIGosIGssIG1pbmVOdW0sIHJlZiwgcmVmMSwgcmVmMiwgdGlsZTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIHRoaXMuc2l6ZVkgPSB4O1xuICAgICAgdGhpcy5zaXplWCA9IHk7XG4gICAgICB0aGlzLm51bU9mTWluZXMgPSBtaW5lcztcbiAgICAgIGZvciAoeSA9IGkgPSAwLCByZWYgPSB0aGlzLnNpemVZIC0gMTsgMCA8PSByZWYgPyBpIDw9IHJlZiA6IGkgPj0gcmVmOyB5ID0gMCA8PSByZWYgPyArK2kgOiAtLWkpIHtcbiAgICAgICAgZm9yICh4ID0gaiA9IDAsIHJlZjEgPSB0aGlzLnNpemVYIC0gMTsgMCA8PSByZWYxID8gaiA8PSByZWYxIDogaiA+PSByZWYxOyB4ID0gMCA8PSByZWYxID8gKytqIDogLS1qKSB7XG4gICAgICAgICAgYXR0cnMgPSB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5hZGQoYXR0cnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKG1pbmVOdW0gPSBrID0gMSwgcmVmMiA9IHRoaXMubnVtT2ZNaW5lczsgMSA8PSByZWYyID8gayA8PSByZWYyIDogayA+PSByZWYyOyBtaW5lTnVtID0gMSA8PSByZWYyID8gKytrIDogLS1rKSB7XG4gICAgICAgIHRpbGUgPSB0aGlzLnJhbmRvbVNhZmVUaWxlKCk7XG4gICAgICAgIHRpbGUubW9kZWwuaXNNaW5lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudGFsbHlNaW5lcygpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2FtZVVwZGF0ZSgpO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLm5vTWluZUZpcnN0Q2xpY2sgPSBmdW5jdGlvbih0aWxlKSB7XG4gICAgICBpZiAodGhpcy5udW1PZkNsZWFycyA9PT0gMCAmJiB0aWxlLm1vZGVsLmlzTWluZSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aWxlLm1vZGVsLmlzTWluZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJhbmRvbVNhZmVUaWxlKCkubW9kZWwuaXNNaW5lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50YWxseU1pbmVzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGlsZTtcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgdmFyIHRpbGU7XG4gICAgICB0aWxlID0gbmV3IHRoaXMubW9kZWwobW9kZWwpO1xuICAgICAgdGhpcy5hbGwucHVzaCh0aWxlKTtcbiAgICAgIHJldHVybiB0aWxlO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmhhbmRsZVRpbGVDbGljayA9IGZ1bmN0aW9uKGV2ZW50LCBpbmRleCkge307XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmFsbCA9IFtdO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFRpbGVzQ29sbGVjdGlvbi5wcm90b3R5cGUucmFuZG9tU2FmZVRpbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBmaW5kQXR0cnMsIHJhbmRvbUluZGV4LCBzYWZlVGlsZXM7XG4gICAgICBmaW5kQXR0cnMgPSB7XG4gICAgICAgIGlzQ2xlYXI6IGZhbHNlLFxuICAgICAgICBpc01pbmU6IGZhbHNlXG4gICAgICB9O1xuICAgICAgc2FmZVRpbGVzID0gdGhpcy5nZXRBbGwoZmluZEF0dHJzKTtcbiAgICAgIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2FmZVRpbGVzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gc2FmZVRpbGVzW3JhbmRvbUluZGV4XTtcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS50YWxseU1pbmVzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYWRqYWNlbnRUaWxlLCBpLCBqLCBsZW4sIGxlbjEsIG5laWdoYm9yQXR0cnMsIG5laWdoYm9yTWluZSwgbmVpZ2hib3JNaW5lcywgbmVpZ2hib3JYLCBuZWlnaGJvclksIHJlZiwgcmVmMSwgcmVzdWx0cywgdGlsZTtcbiAgICAgIHJlZiA9IHRoaXMuYWxsO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRpbGUgPSByZWZbaV07XG4gICAgICAgIG5laWdoYm9yTWluZXMgPSAwO1xuICAgICAgICByZWYxID0gdGlsZS5hZGphY2VudFRpbGVzO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICBhZGphY2VudFRpbGUgPSByZWYxW2pdO1xuICAgICAgICAgIG5laWdoYm9yWCA9IHRpbGUubW9kZWwueCArIGFkamFjZW50VGlsZVswXTtcbiAgICAgICAgICBuZWlnaGJvclkgPSB0aWxlLm1vZGVsLnkgKyBhZGphY2VudFRpbGVbMV07XG4gICAgICAgICAgbmVpZ2hib3JBdHRycyA9IHtcbiAgICAgICAgICAgIGlzTWluZTogdHJ1ZSxcbiAgICAgICAgICAgIHg6IG5laWdoYm9yWCxcbiAgICAgICAgICAgIHk6IG5laWdoYm9yWVxuICAgICAgICAgIH07XG4gICAgICAgICAgbmVpZ2hib3JNaW5lID0gdGhpcy5nZXQobmVpZ2hib3JBdHRycyk7XG4gICAgICAgICAgaWYgKG5laWdoYm9yTWluZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBuZWlnaGJvck1pbmVzKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMucHVzaCh0aWxlLm1vZGVsLmFkamFjZW50TWluZXMgPSBuZWlnaGJvck1pbmVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmdhbWVVcGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBsZW4sIHJlZiwgdGlsZTtcbiAgICAgIHRoaXMueCA9IE1hdGgubWF4LmFwcGx5KHRoaXMsIHRoaXMuYWxsLm1hcChmdW5jdGlvbih0aWxlKSB7XG4gICAgICAgIHJldHVybiB0aWxlLm1vZGVsLng7XG4gICAgICB9KSk7XG4gICAgICB0aGlzLnkgPSBNYXRoLm1heC5hcHBseSh0aGlzLCB0aGlzLmFsbC5tYXAoZnVuY3Rpb24odGlsZSkge1xuICAgICAgICByZXR1cm4gdGlsZS5tb2RlbC55O1xuICAgICAgfSkpO1xuICAgICAgdGhpcy54ID0gdGhpcy54LS07XG4gICAgICB0aGlzLnkgPSB0aGlzLnktLTtcbiAgICAgIHRoaXMubnVtT2ZNaW5lcyA9IDA7XG4gICAgICByZWYgPSB0aGlzLmFsbDtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aWxlID0gcmVmW2ldO1xuICAgICAgICBpZiAodGlsZS5tb2RlbC5pc01pbmUgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLm51bU9mTWluZXMrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubW92ZVVwZGF0ZSgpO1xuICAgIH07XG5cbiAgICBUaWxlc0NvbGxlY3Rpb24ucHJvdG90eXBlLm1vdmVVcGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBsZW4sIHJlZiwgdGlsZTtcbiAgICAgIHRoaXMubG9zcyA9IGZhbHNlO1xuICAgICAgdGhpcy53aW4gPSBmYWxzZTtcbiAgICAgIHRoaXMubnVtT2ZDbGVhcnMgPSAwO1xuICAgICAgdGhpcy5udW1PZkZsYWdzID0gMDtcbiAgICAgIHJlZiA9IHRoaXMuYWxsO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRpbGUgPSByZWZbaV07XG4gICAgICAgIGlmICh0aWxlLm1vZGVsLmlzQ2xlYXIgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLm51bU9mQ2xlYXJzKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbGUubW9kZWwuaXNGbGFnZ2VkID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5udW1PZkZsYWdzKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbGUubW9kZWwuaXNNaW5lID09PSB0cnVlICYmIHRpbGUubW9kZWwuaXNDbGVhciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMubG9zcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmxvc3MgPT09IGZhbHNlICYmIHRoaXMuYWxsLmxlbmd0aCAtIHRoaXMubnVtT2ZNaW5lcyAtIHRoaXMubnVtT2ZDbGVhcnMgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5jbGVhck5laWdoYm9ycyA9IGZ1bmN0aW9uKHRpbGUpIHtcbiAgICAgIHZhciBhZGphY2VudFRpbGUsIGksIGxlbiwgbmVpZ2hib3IsIHJlZiwgcmVzdWx0cywgc2hvdWxkQ2xlYXJOZWlnaGJvciwgc2hvdWxkQ2xlYXJOZWlnaGJvcnM7XG4gICAgICBzaG91bGRDbGVhck5laWdoYm9ycyA9IHRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcyA9PT0gMCAmJiB0aWxlLm1vZGVsLmlzTWluZSA9PT0gZmFsc2U7XG4gICAgICBpZiAoc2hvdWxkQ2xlYXJOZWlnaGJvcnMpIHtcbiAgICAgICAgcmVmID0gdGlsZS5hZGphY2VudFRpbGVzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGFkamFjZW50VGlsZSA9IHJlZltpXTtcbiAgICAgICAgICBuZWlnaGJvciA9IHRoaXMuZ2V0KHtcbiAgICAgICAgICAgIHg6IHRpbGUubW9kZWwueCArIGFkamFjZW50VGlsZVswXSxcbiAgICAgICAgICAgIHk6IHRpbGUubW9kZWwueSArIGFkamFjZW50VGlsZVsxXVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNob3VsZENsZWFyTmVpZ2hib3IgPSBuZWlnaGJvciAmJiBuZWlnaGJvci5tb2RlbC5pc0NsZWFyID09PSBmYWxzZSAmJiBuZWlnaGJvci5tb2RlbC5pc01pbmUgPT09IGZhbHNlO1xuICAgICAgICAgIGlmIChzaG91bGRDbGVhck5laWdoYm9yKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2gobmVpZ2hib3IuY2xpY2soKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2b2lkIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihhdHRycykge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsKGF0dHJzKVswXTtcbiAgICB9O1xuXG4gICAgVGlsZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihhdHRycykge1xuICAgICAgdmFyIGksIGtleSwgbGVuLCBtYXRjaGVzLCBudW1PZkF0dHJzLCBudW1PZk1hdGNoZWRBdHRycywgcmVmLCB0aWxlLCB2YWw7XG4gICAgICBtYXRjaGVzID0gW107XG4gICAgICBpZiAoIWF0dHJzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsbDtcbiAgICAgIH1cbiAgICAgIHJlZiA9IHRoaXMuYWxsO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRpbGUgPSByZWZbaV07XG4gICAgICAgIG51bU9mQXR0cnMgPSAwO1xuICAgICAgICBudW1PZk1hdGNoZWRBdHRycyA9IDA7XG4gICAgICAgIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgICAgICAgdmFsID0gYXR0cnNba2V5XTtcbiAgICAgICAgICBudW1PZkF0dHJzKys7XG4gICAgICAgICAgaWYgKHRpbGUubW9kZWxba2V5XSA9PT0gdmFsKSB7XG4gICAgICAgICAgICBudW1PZk1hdGNoZWRBdHRycysrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtT2ZNYXRjaGVkQXR0cnMgPT09IG51bU9mQXR0cnMpIHtcbiAgICAgICAgICBtYXRjaGVzLnB1c2godGlsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgIH07XG5cbiAgICByZXR1cm4gVGlsZXNDb2xsZWN0aW9uO1xuXG4gIH0pKCk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaWxlc0NvbGxlY3Rpb247XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEYXNoYm9hcmQsIE1vZGFsQWN0aW9ucywgUiwgVGlsZXNBY3Rpb25zO1xuXG4gIE1vZGFsQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvTW9kYWxBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFRpbGVzQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvVGlsZXNBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgRGFzaGJvYXJkID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnRGFzaGJvYXJkJyxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFIuZGl2KHtcbiAgICAgICAgaWQ6ICdkYXNoYm9hcmQnXG4gICAgICB9LCBbXG4gICAgICAgIFIuZGl2KHtcbiAgICAgICAgICBrZXk6ICduZXctZ2FtZScsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnbmV3LWdhbWUgYnV0dG9uJyxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBNb2RhbEFjdGlvbnMudG9nZ2xlKCduZXdHYW1lJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAnbmV3IGdhbWUnKSwgUi5kaXYoe1xuICAgICAgICAgIGtleTogJ3NlbGVjdC10aWxlJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3QtdGlsZSBidXR0b24nLFxuICAgICAgICAgIG9uQ2xpY2s6IFRpbGVzQWN0aW9ucy5jbGVhclNhZmVSYW5kb21UaWxlXG4gICAgICAgIH0sICdjbGVhciBhIHNhZmUgdGlsZScpLCBSLmRpdih7XG4gICAgICAgICAga2V5OiAnaW5zdHJ1Y3Rpb25zJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdpbnN0cnVjdGlvbnMgYnV0dG9uJyxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBNb2RhbEFjdGlvbnMudG9nZ2xlKCdpbnN0cnVjdGlvbnMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sICdpbnN0cnVjdGlvbnMnKVxuICAgICAgXSk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IERhc2hib2FyZDtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIERhc2hib2FyZENvbXBvbmVudCwgRGlzcGF0Y2hlciwgR2FtZSwgSW5mb0NvbXBvbmVudCwgTW9kYWxBY3Rpb25zLCBNb2RhbE92ZXJsYXlDb21wb25lbnQsIE1vZGFsU3RvcmUsIFIsIFRpbGVTdG9yZSwgVGlsZXNDb21wb25lbnQsIGFzc2lnbiwgZ2V0TW9kYWxTdG9yZVN0YXRlLCBnZXRTdGF0ZSwgZ2V0VGlsZVN0b3JlU3RhdGU7XG5cbiAgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL0Rpc3BhdGNoZXIuY29mZmVlJyk7XG5cbiAgVGlsZVN0b3JlID0gcmVxdWlyZSgnLi4vc3RvcmVzL1RpbGVTdG9yZS5jb2ZmZWUnKTtcblxuICBNb2RhbFN0b3JlID0gcmVxdWlyZSgnLi4vc3RvcmVzL01vZGFsU3RvcmUuY29mZmVlJyk7XG5cbiAgTW9kYWxBY3Rpb25zID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9Nb2RhbEFjdGlvbnMuY29mZmVlJyk7XG5cbiAgVGlsZXNDb21wb25lbnQgPSByZXF1aXJlKCcuL1RpbGVzQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIEluZm9Db21wb25lbnQgPSByZXF1aXJlKCcuL0luZm9Db21wb25lbnQuY29mZmVlJyk7XG5cbiAgRGFzaGJvYXJkQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9EYXNoYm9hcmRDb21wb25lbnQuY29mZmVlJyk7XG5cbiAgTW9kYWxPdmVybGF5Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9tb2RhbHMvTW9kYWxPdmVybGF5Q29tcG9uZW50LmNvZmZlZScpO1xuXG4gIGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxuICBSID0gUmVhY3QuRE9NO1xuXG4gIGdldFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFzc2lnbih7fSwgZ2V0VGlsZVN0b3JlU3RhdGUoKSwgZ2V0TW9kYWxTdG9yZVN0YXRlKCkpO1xuICB9O1xuXG4gIGdldFRpbGVTdG9yZVN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFsbDogVGlsZVN0b3JlLmdldEFsbCgpLFxuICAgICAgaW5mbzogVGlsZVN0b3JlLmdldEluZm8oKVxuICAgIH07XG4gIH07XG5cbiAgZ2V0TW9kYWxTdG9yZVN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vZGFsczogTW9kYWxTdG9yZS5nZXRBbGwoKVxuICAgIH07XG4gIH07XG5cbiAgR2FtZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0dhbWUnLFxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0U3RhdGUoKTtcbiAgICB9LFxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgIFRpbGVTdG9yZS5hZGRDaGFuZ2VMaXN0ZW5lcih0aGlzLl9vblRpbGVTdG9yZUNoYW5nZSk7XG4gICAgICByZXR1cm4gTW9kYWxTdG9yZS5hZGRDaGFuZ2VMaXN0ZW5lcih0aGlzLl9vbk1vZGFsU3RvcmVDaGFuZ2UpO1xuICAgIH0sXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgVGlsZVN0b3JlLnJlbW92ZUNoYW5nZUxpc3RlbmVyKHRoaXMuX29uVGlsZVN0b3JlQ2hhbmdlKTtcbiAgICAgIHJldHVybiBNb2RhbFN0b3JlLnJlbW92ZUNoYW5nZUxpc3RlbmVyKHRoaXMuX29uTW9kYWxTdG9yZUNoYW5nZSk7XG4gICAgfSxcbiAgICBfb25UaWxlU3RvcmVDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRpbGVzU3RhdGU7XG4gICAgICB0aWxlc1N0YXRlID0gZ2V0VGlsZVN0b3JlU3RhdGUoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUodGlsZXNTdGF0ZSk7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coJ3RpbGUgc3RvcmUgY2hhbmdlIScpO1xuICAgIH0sXG4gICAgX29uTW9kYWxTdG9yZUNoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGdldE1vZGFsU3RvcmVTdGF0ZSgpKTtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZygnbW9kZWFsIGNoYW5nZSEnKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYm9hcmRXcmFwcHBlciwgZGFzaGJvYXJkLCBpbmZvLCBvdmVybGF5cywgdGlsZXM7XG4gICAgICBpbmZvID0gUmVhY3QuY3JlYXRlRWxlbWVudChJbmZvQ29tcG9uZW50LCB7XG4gICAgICAgIGtleTogJ2luZm8nLFxuICAgICAgICBpbmZvOiB0aGlzLnN0YXRlLmluZm9cbiAgICAgIH0pO1xuICAgICAgdGlsZXMgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVzQ29tcG9uZW50LCB7XG4gICAgICAgIGtleTogJ3RpbGVzJyxcbiAgICAgICAgdGlsZXM6IHRoaXMuc3RhdGUuYWxsXG4gICAgICB9KTtcbiAgICAgIGJvYXJkV3JhcHBwZXIgPSBSLmRpdih7XG4gICAgICAgIGlkOiAnYm9hcmQtd3JhcHBwZXInLFxuICAgICAgICBrZXk6ICdib2FyZC13cmFwcHBlcidcbiAgICAgIH0sIFtpbmZvLCB0aWxlc10pO1xuICAgICAgZGFzaGJvYXJkID0gUmVhY3QuY3JlYXRlRWxlbWVudChEYXNoYm9hcmRDb21wb25lbnQsIHtcbiAgICAgICAga2V5OiAnZGFzaGJvYXJkJ1xuICAgICAgfSk7XG4gICAgICBvdmVybGF5cyA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWxPdmVybGF5Q29tcG9uZW50LCB7XG4gICAgICAgIGtleTogJ21vZGFsLW92ZXJsYXknLFxuICAgICAgICBpbmZvOiB0aGlzLnN0YXRlLmluZm8sXG4gICAgICAgIG1vZGFsczogdGhpcy5zdGF0ZS5tb2RhbHNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFIuZGl2KG51bGwsIFtvdmVybGF5cywgYm9hcmRXcmFwcHBlciwgZGFzaGJvYXJkXSk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEdhbWU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBJbmZvLCBSO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgSW5mbyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0luZm8nLFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUi51bCh7XG4gICAgICAgIGlkOiAnc3RhdHMnXG4gICAgICB9LCBbXG4gICAgICAgIFIubGkoe1xuICAgICAgICAgIGtleTogJ3RpbGVzJ1xuICAgICAgICB9LCB0aGlzLnByb3BzLmluZm8ubnVtT2ZUaWxlcyArIFwiIHRpbGVzXCIpLCBSLmxpKHtcbiAgICAgICAgICBrZXk6ICdtaW5lcydcbiAgICAgICAgfSwgdGhpcy5wcm9wcy5pbmZvLm51bU9mTWluZXMgKyBcIiBtaW5lc1wiKSwgUi5saSh7XG4gICAgICAgICAga2V5OiAnZmxhZ2dlZCdcbiAgICAgICAgfSwgdGhpcy5wcm9wcy5pbmZvLm51bU9mRmxhZ3MgKyBcIiBmbGFnZ2VkIHRpbGVzXCIpLCBSLmxpKHtcbiAgICAgICAgICBrZXk6ICdjbGVhcmVkJ1xuICAgICAgICB9LCB0aGlzLnByb3BzLmluZm8ubnVtT2ZVbmNsZWFyZWQgKyBcIiBsZWZ0IHRvIGNsZWFyXCIpXG4gICAgICBdKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gSW5mbztcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIFIsIFRpbGUsIFRpbGVBY3Rpb25zO1xuXG4gIFRpbGVBY3Rpb25zID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9UaWxlQWN0aW9ucy5jb2ZmZWUnKTtcblxuICBSID0gUmVhY3QuRE9NO1xuXG4gIFRpbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdUaWxlJyxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFIubGkoe1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0Q2xhc3MoKSxcbiAgICAgICAgb25DbGljazogdGhpcy5jbGlja0hhbmRsZXJcbiAgICAgIH0sIFIuc3BhbihudWxsLCB0aGlzLmdldFRleHQoKSkpO1xuICAgIH0sXG4gICAgY2xpY2tIYW5kbGVyOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgIHZhciBmbGFnS2V5V2FzUHJlc3NlZDtcbiAgICAgIGlmICghJGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBUaWxlQWN0aW9ucy5jbGVhcih0aGlzLnByb3BzLnRpbGUubW9kZWwudWlkKTtcbiAgICAgIH1cbiAgICAgIGZsYWdLZXlXYXNQcmVzc2VkID0gJGV2ZW50LnNoaWZ0S2V5ID09PSB0cnVlIHx8ICRldmVudC5hbHRLZXkgPT09IHRydWU7XG4gICAgICBpZiAoZmxhZ0tleVdhc1ByZXNzZWQpIHtcbiAgICAgICAgcmV0dXJuIFRpbGVBY3Rpb25zLnRvZ2dsZUZsYWcodGhpcy5wcm9wcy50aWxlLm1vZGVsLnVpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVGlsZUFjdGlvbnMuY2xlYXIodGhpcy5wcm9wcy50aWxlLm1vZGVsLnVpZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc0ZpcnN0Q29sdW1uOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpbGUubW9kZWwueCA9PT0gMDtcbiAgICB9LFxuICAgIGhhc0JlZW5GbGFnZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpbGUubW9kZWwuaXNDbGVhciAhPT0gdHJ1ZSAmJiB0aGlzLnByb3BzLnRpbGUubW9kZWwuaXNGbGFnZ2VkID09PSB0cnVlO1xuICAgIH0sXG4gICAgaGFzQmVlbkNsZWFyZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGlsZS5tb2RlbC5pc0NsZWFyID09PSB0cnVlO1xuICAgIH0sXG4gICAgaGFzTWluZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy50aWxlLm1vZGVsLmlzTWluZSA9PT0gdHJ1ZTtcbiAgICB9LFxuICAgIHNob3VsZERpc3BsYXlNaW5lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhc01pbmUoKSAmJiB0aGlzLmhhc0JlZW5DbGVhcmVkKCk7XG4gICAgfSxcbiAgICBoYXNaZXJvQWRqYWNlbnRNaW5lczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy50aWxlLm1vZGVsLmFkamFjZW50TWluZXMgPT09IDAgJiYgIXRoaXMuaGFzTWluZSgpO1xuICAgIH0sXG4gICAgZ2V0VGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGV4dDtcbiAgICAgIHRleHQgPSB0aGlzLnByb3BzLnRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcztcbiAgICAgIGlmICh0aGlzLmhhc0JlZW5GbGFnZ2VkKCkpIHtcbiAgICAgICAgdGV4dCA9ICc/JztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zaG91bGREaXNwbGF5TWluZSgpKSB7XG4gICAgICAgIHRleHQgPSAnWCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9LFxuICAgIGdldENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbJ3RpbGUnLCB0aGlzLmlzRmlyc3RDb2x1bW4oKSA/ICdudGgnIDogdm9pZCAwLCB0aGlzLmhhc0JlZW5DbGVhcmVkKCkgPyAnY2xlYXInIDogdm9pZCAwLCB0aGlzLmhhc0JlZW5GbGFnZ2VkKCkgPyAnZmxhZ2dlZCcgOiB2b2lkIDAsIHRoaXMuc2hvdWxkRGlzcGxheU1pbmUoKSA/ICdtaW5lJyA6IHZvaWQgMCwgdGhpcy5oYXNaZXJvQWRqYWNlbnRNaW5lcygpID8gJ2NsZWFyIHplcm8nIDogdm9pZCAwXS5qb2luKCcgJyk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRpbGU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBSLCBUaWxlQ29tcG9uZW50LCBUaWxlcztcblxuICBUaWxlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9UaWxlQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgVGlsZXMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdUaWxlcycsXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0aWxlcztcbiAgICAgIHRpbGVzID0gdGhpcy5wcm9wcy50aWxlcy5tYXAoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbGVDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICByZWY6IGl0ZW0ubW9kZWwudWlkLFxuICAgICAgICAgICAgdGlsZTogaXRlbVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgcmV0dXJuIFIudWwoe1xuICAgICAgICBpZDogJ2JvYXJkJ1xuICAgICAgfSwgdGlsZXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaWxlcztcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIE1vZGFsQWN0aW9ucywgTW9kYWxPdmVybGF5LCBSO1xuXG4gIE1vZGFsQWN0aW9ucyA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvTW9kYWxBY3Rpb25zLmNvZmZlZScpO1xuXG4gIFIgPSBSZWFjdC5ET007XG5cbiAgTW9kYWxPdmVybGF5ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnTW9kYWxJbnN0cnVjdGlvbnMnLFxuICAgIGdldENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjbGFzc2VzO1xuICAgICAgY2xhc3NlcyA9IFsnbWVzc2FnZSddO1xuICAgICAgaWYgKCF0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdoaWRlJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG4gICAgfSxcbiAgICBjbGlja0hhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1vZGFsQWN0aW9ucy50b2dnbGUoJ2luc3RydWN0aW9ucycpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBidXR0b24sIGNvbnRyb2xzLCBkZXNjcmlwdGlvbjtcbiAgICAgIGRlc2NyaXB0aW9uID0gUi5kaXYoe1xuICAgICAgICBrZXk6ICdpbnN0cnVjdGlvbnMtZGVzY3JpcHRpb24nXG4gICAgICB9LCBbXG4gICAgICAgIFIuZGl2KHtcbiAgICAgICAgICBrZXk6ICdpbnN0cnVjdGlvbnMtaGVhZGVyJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdib3JkZXItYm90dG9tJ1xuICAgICAgICB9LCAnaG93IHRvIHBsYXknKSwgUi5kaXYoe1xuICAgICAgICAgIGtleTogJ2luc3RydWN0aW9ucy1kZXRhaWxzJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICdib3JkZXItYm90dG9tJ1xuICAgICAgICB9LCBbJ3RoZSBnYW1lIGlzIHBsYXllZCBieSByZXZlYWxpbmcgdGlsZXMgb2YgdGhlIGdyaWQuJywgJ2lmIGEgc2VsZWN0ZWQgdGlsZSBjb250YWlucyBhIG1pbmUsIHRoZSBwbGF5ZXIgbG9zZXMgdGhlIGdhbWUuJywgJ290aGVyd2lzZSwgYSBkaWdpdCBpcyByZXZlYWxlZCBpbiB0aGUgdGlsZSwgaW5kaWNhdGluZyB0aGUgbnVtYmVyJywgJ29mIG1pbmVzIGxvY2F0ZWQgaW4gdGhlIGVpZ2h0IGFkamFjZW50IHRpbGVzLiddLmpvaW4oJyAnKSksIFIuZGl2KHtcbiAgICAgICAgICBrZXk6ICdpbnN0cnVjdGlvbnMtY29tbWFuZHMnXG4gICAgICAgIH0sIFIuc3Bhbih7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnY29kZSdcbiAgICAgICAgfSwgJ2NsaWNrJyksIFIuc3BhbihudWxsLCAnIHRvIHJldmVhbCB0aGUgc3F1YXJlcyBvZiB0aGUgZ3JpZC4nKSksIFIuZGl2KHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdib3JkZXItYm90dG9tJ1xuICAgICAgICB9LCAnKHlvdXIgZmlyc3QgY2xpY2sgd2lsbCBuZXZlciBsYW5kIG9uIGEgbWluZSknKVxuICAgICAgXSk7XG4gICAgICBjb250cm9scyA9IFIuZGl2KHtcbiAgICAgICAga2V5OiAnaW5zdHJ1Y3Rpb25zLWNvbnRyb2xzJ1xuICAgICAgfSwgW1xuICAgICAgICBSLnNwYW4oe1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2NvZGUnXG4gICAgICAgIH0sICdzaGlmdCArIGNsaWNrJyksIFIuc3BhbihudWxsLCAnIG9yICcpLCBSLnNwYW4oe1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2NvZGUnXG4gICAgICAgIH0sICdhbHQgKyBjbGljaycpLCBSLnNwYW4obnVsbCwgJyB3aWxsIFwiZmxhZ1wiIGEgdGlsZSwgaGVscGluZyB5b3UgdG8gcmVtZW1iZXIgd2hlcmUgeW91IHRoaW5rIGEgbWluZSBpcyBoaWRkZW4nKVxuICAgICAgXSk7XG4gICAgICBidXR0b24gPSBSLmRpdih7XG4gICAgICAgIGtleTogJ2luc3RydWN0aW9ucy1idXR0b24nXG4gICAgICB9LCBSLmRpdih7XG4gICAgICAgIGNsYXNzTmFtZTogJ2J1dHRvbicsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuY2xpY2tIYW5kbGVyXG4gICAgICB9LCAnZ290IGl0IScpKTtcbiAgICAgIHJldHVybiBSLmRpdih7XG4gICAgICAgIGtleTogJ2luc3RydWN0aW9ucy1tb2RhbCcsXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5nZXRDbGFzcygpXG4gICAgICB9LCBbZGVzY3JpcHRpb24sIGNvbnRyb2xzLCBidXR0b25dKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gTW9kYWxPdmVybGF5O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgTW9kYWxBY3Rpb25zLCBNb2RhbE92ZXJsYXksIFIsIFRpbGVzQWN0aW9ucztcblxuICBNb2RhbEFjdGlvbnMgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL01vZGFsQWN0aW9ucy5jb2ZmZWUnKTtcblxuICBUaWxlc0FjdGlvbnMgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL1RpbGVzQWN0aW9ucy5jb2ZmZWUnKTtcblxuICBSID0gUmVhY3QuRE9NO1xuXG4gIE1vZGFsT3ZlcmxheSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ01vZGFsTmV3R2FtZScsXG4gICAgZ2V0Q2xhc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNsYXNzZXM7XG4gICAgICBjbGFzc2VzID0gWydtZXNzYWdlJ107XG4gICAgICBpZiAoIXRoaXMucHJvcHMuc2hvdykge1xuICAgICAgICBjbGFzc2VzLnB1c2goJ2hpZGUnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcbiAgICB9LFxuICAgIGdldFRpdGxlVGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5zaG93ICYmICF0aGlzLnByb3BzLndpbiAmJiAhdGhpcy5wcm9wcy5sb3NzKSB7XG4gICAgICAgIHJldHVybiAnbmV3IGdhbWU/JztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy53aW4gJiYgIXRoaXMucHJvcHMubG9zcykge1xuICAgICAgICByZXR1cm4gJ3lvdSB3b24hJztcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMucHJvcHMud2luICYmICF0aGlzLnByb3BzLndpbikge1xuICAgICAgICByZXR1cm4gJ3lvdSBsb3N0Li4uJztcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsaWNrSGFuZGxlck5ld0dhbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFRpbGVzQWN0aW9ucy5uZXdHYW1lKCk7XG4gICAgfSxcbiAgICBjbGlja0hhbmRsZXJFeGl0TW9kYWw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1vZGFsQWN0aW9ucy5yZXNldCgpO1xuICAgIH0sXG4gICAgcmVuZGVyQnV0dG9uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYnV0dG9ucztcbiAgICAgIGJ1dHRvbnMgPSBbXG4gICAgICAgIFIuZGl2KHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdidXR0b24nLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuY2xpY2tIYW5kbGVyTmV3R2FtZVxuICAgICAgICB9LCAnc3RhcnQhJylcbiAgICAgIF07XG4gICAgICBpZiAoIXRoaXMucHJvcHMubG9zcykge1xuICAgICAgICBidXR0b25zLnB1c2goUi5kaXYoe1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2J1dHRvbicsXG4gICAgICAgICAgb25DbGljazogdGhpcy5jbGlja0hhbmRsZXJFeGl0TW9kYWxcbiAgICAgICAgfSwgJ3Jlc3VtZSEnKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUi5kaXYobnVsbCwgYnV0dG9ucyk7XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRpdGxlO1xuICAgICAgdGl0bGUgPSBSLmRpdihudWxsLCBSLmRpdih7XG4gICAgICAgIGNsYXNzTmFtZTogJ2JvcmRlci1ib3R0b20nXG4gICAgICB9LCBSLmRpdih7XG4gICAgICAgIGNsYXNzTmFtZTogJ3RpdGxlJ1xuICAgICAgfSwgdGhpcy5nZXRUaXRsZVRleHQoKSkpKTtcbiAgICAgIHJldHVybiBSLmRpdih7XG4gICAgICAgIGtleTogJ21vZGFsJyxcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmdldENsYXNzKClcbiAgICAgIH0sIFt0aXRsZSwgdGhpcy5yZW5kZXJCdXR0b25zKCldKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gTW9kYWxPdmVybGF5O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgSW5zdHJ1Y3Rpb25zQ29tcG9uZW50LCBNb2RhbEFjdGlvbnMsIE1vZGFsT3ZlcmxheSwgTmV3R2FtZUNvbXBvbmVudCwgUjtcblxuICBNb2RhbEFjdGlvbnMgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL01vZGFsQWN0aW9ucy5jb2ZmZWUnKTtcblxuICBJbnN0cnVjdGlvbnNDb21wb25lbnQgPSByZXF1aXJlKCcuL01vZGFsSW5zdHJ1Y3Rpb25zQ29tcG9uZW50LmNvZmZlZScpO1xuXG4gIE5ld0dhbWVDb21wb25lbnQgPSByZXF1aXJlKCcuL01vZGFsTmV3R2FtZUNvbXBvbmVudC5jb2ZmZWUnKTtcblxuICBSID0gUmVhY3QuRE9NO1xuXG4gIE1vZGFsT3ZlcmxheSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ01vZGFsT3ZlcmxheScsXG4gICAgZ2V0Q2xhc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMubW9kYWxzLm5ld0dhbWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm1vZGFscy5pbnN0cnVjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdoaWRlJztcbiAgICB9LFxuICAgIHJlc2V0SGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuaW5mby5sb3NzICYmICF0aGlzLnByb3BzLmluZm8ud2luKSB7XG4gICAgICAgIHJldHVybiBNb2RhbEFjdGlvbnMucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluc3RydWN0aW9uc0hhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1vZGFsQWN0aW9ucy50b2dnbGUoJ2luc3RydWN0aW9ucycpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvdmVybGF5O1xuICAgICAgb3ZlcmxheSA9IFIuZGl2KHtcbiAgICAgICAgaWQ6ICdvdmVybGF5JyxcbiAgICAgICAga2V5OiAnb3ZlcmxheScsXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5nZXRDbGFzcygpLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLnJlc2V0SGFuZGxlclxuICAgICAgfSwgbnVsbCk7XG4gICAgICByZXR1cm4gUi5kaXYobnVsbCwgW1xuICAgICAgICBvdmVybGF5LCBSZWFjdC5jcmVhdGVFbGVtZW50KEluc3RydWN0aW9uc0NvbXBvbmVudCwge1xuICAgICAgICAgIGtleTogJ21vZGFsLWluc3RydWN0aW9ucycsXG4gICAgICAgICAgc2hvdzogdGhpcy5wcm9wcy5tb2RhbHMuaW5zdHJ1Y3Rpb25zXG4gICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KE5ld0dhbWVDb21wb25lbnQsIHtcbiAgICAgICAgICBrZXk6ICdtb2RhbC1uZXctZ2FtZScsXG4gICAgICAgICAgc2hvdzogdGhpcy5wcm9wcy5tb2RhbHMubmV3R2FtZSxcbiAgICAgICAgICB3aW46IHRoaXMucHJvcHMuaW5mby53aW4sXG4gICAgICAgICAgbG9zczogdGhpcy5wcm9wcy5pbmZvLmxvc3NcbiAgICAgICAgfSlcbiAgICAgIF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBNb2RhbE92ZXJsYXk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBUaWxlTW9kZWw7XG5cbiAgTnVtYmVyLmlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIgfHwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBUaWxlTW9kZWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVGlsZU1vZGVsKGF0dHJzKSB7XG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYXR0cnMueCkgfHwgIU51bWJlci5pc0ludGVnZXIoYXR0cnMueSkpIHtcbiAgICAgICAgdGhyb3cgXCJgeGAgYW5kIGB5YCBhcmUgcmVxdWlyZWQgSW50ZWdlciBhdHRyaWJ1dGVzIHRvIGluc3RhbnRpYXRlIFRpbGVcIjtcbiAgICAgIH1cbiAgICAgIHRoaXMubW9kZWwgPSB7XG4gICAgICAgIHg6IHZvaWQgMCxcbiAgICAgICAgeTogdm9pZCAwLFxuICAgICAgICB1aWQ6IHZvaWQgMCxcbiAgICAgICAgaXNNaW5lOiBmYWxzZSxcbiAgICAgICAgaXNDbGVhcjogZmFsc2UsXG4gICAgICAgIGlzRmxhZ2dlZDogZmFsc2UsXG4gICAgICAgIGFkamFjZW50TWluZXM6IDBcbiAgICAgIH07XG4gICAgICB0aGlzLmFkamFjZW50VGlsZXMgPSBbWy0xLCAtMV0sIFswLCAtMV0sIFsxLCAtMV0sIFstMSwgMF0sIFsxLCAwXSwgWy0xLCAxXSwgWzAsIDFdLCBbMSwgMV1dO1xuICAgICAgdGhpcy5zZXQoYXR0cnMpO1xuICAgIH1cblxuICAgIFRpbGVNb2RlbC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oYXR0cnMpIHtcbiAgICAgIHZhciBhdHRyLCBrZXk7XG4gICAgICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgICAgICBhdHRyID0gYXR0cnNba2V5XTtcbiAgICAgICAgdGhpcy5tb2RlbFtrZXldID0gYXR0cjtcbiAgICAgICAgdGhpcy5tb2RlbC51aWQgPSBTdHJpbmcoYXR0cnMueCkgKyAnLScgKyBTdHJpbmcoYXR0cnMueSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVGlsZU1vZGVsLnByb3RvdHlwZS50b2dnbGVGbGFnID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLm1vZGVsLmlzRmxhZ2dlZCA9ICF0aGlzLm1vZGVsLmlzRmxhZ2dlZDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBUaWxlTW9kZWwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLm1vZGVsLmlzQ2xlYXIgPSB0cnVlO1xuICAgICAgdGhpcy5tb2RlbC5pc0ZsYWdnZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBUaWxlTW9kZWwucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICB2YXIgZmxhZ0tleVdhc1ByZXNzZWQ7XG4gICAgICBpZiAoISRldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhcigpO1xuICAgICAgfVxuICAgICAgZmxhZ0tleVdhc1ByZXNzZWQgPSAkZXZlbnQuc2hpZnRLZXkgPT09IHRydWUgfHwgJGV2ZW50LmFsdEtleSA9PT0gdHJ1ZTtcbiAgICAgIGlmIChmbGFnS2V5V2FzUHJlc3NlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVGbGFnKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhcigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gVGlsZU1vZGVsO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBFdmVudEVtaXR0ZXIsIE1vZGFsU3RvcmUsIE1vZGFscywgTW9kYWxzQ29sbGVjdGlvbiwgYXNzaWduO1xuXG4gIE1vZGFsc0NvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9jb2xsZWN0aW9ucy9Nb2RhbHNDb2xsZWN0aW9uLmNvZmZlZScpO1xuXG4gIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuICBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbiAgTW9kYWxzID0gbmV3IE1vZGFsc0NvbGxlY3Rpb24oKTtcblxuICBNb2RhbHMuc2V0KCduZXdHYW1lJyk7XG5cbiAgTW9kYWxzLnNldCgnaW5zdHJ1Y3Rpb25zJyk7XG5cbiAgTW9kYWxTdG9yZSA9IGFzc2lnbih7fSwgRXZlbnRFbWl0dGVyLnByb3RvdHlwZSwge1xuICAgIGV2ZW50OiAnZXZlbnQnLFxuICAgIGdldEFsbDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTW9kYWxzLnNob3c7XG4gICAgfSxcbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTW9kYWxzLnJlc2V0KCk7XG4gICAgfSxcbiAgICB0b2dnbGU6IGZ1bmN0aW9uKG1vZGFsTmFtZSkge1xuICAgICAgcmV0dXJuIE1vZGFscy50b2dnbGUobW9kYWxOYW1lKTtcbiAgICB9LFxuICAgIGVtaXRDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdCh0aGlzLmV2ZW50KTtcbiAgICB9LFxuICAgIGFkZENoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMub24odGhpcy5ldmVudCwgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2hhbmdlTGlzdGVuZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMaXN0ZW5lcih0aGlzLmV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IE1vZGFsU3RvcmU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBFdmVudEVtaXR0ZXIsIFRpbGVTdG9yZSwgVGlsZXMsIFRpbGVzQ29sbGVjdGlvbiwgYXNzaWduO1xuXG4gIFRpbGVzQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2NvbGxlY3Rpb25zL1RpbGVzQ29sbGVjdGlvbi5jb2ZmZWUnKTtcblxuICBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbiAgYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG4gIFRpbGVzID0gbmV3IFRpbGVzQ29sbGVjdGlvbigpO1xuXG4gIFRpbGVzLm5ld0dhbWUoNCwgNywgNSk7XG5cbiAgVGlsZVN0b3JlID0gYXNzaWduKHt9LCBFdmVudEVtaXR0ZXIucHJvdG90eXBlLCB7XG4gICAgZXZlbnQ6ICdjaGFuZ2UnLFxuICAgIGdldDogZnVuY3Rpb24oYXR0cnMpIHtcbiAgICAgIHJldHVybiBUaWxlcy5nZXQoYXR0cnMpO1xuICAgIH0sXG4gICAgZ2V0QWxsOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUaWxlcy5nZXRBbGwoKTtcbiAgICB9LFxuICAgIGdldEluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2luOiBUaWxlcy53aW4sXG4gICAgICAgIGxvc3M6IFRpbGVzLmxvc3MsXG4gICAgICAgIG51bU9mVGlsZXM6IFRpbGVzLmFsbC5sZW5ndGgsXG4gICAgICAgIG51bU9mTWluZXM6IFRpbGVzLm51bU9mTWluZXMsXG4gICAgICAgIG51bU9mRmxhZ3M6IFRpbGVzLm51bU9mRmxhZ3MsXG4gICAgICAgIG51bU9mVW5jbGVhcmVkOiBUaWxlcy5hbGwubGVuZ3RoIC0gVGlsZXMubnVtT2ZNaW5lcyAtIFRpbGVzLm51bU9mQ2xlYXJzXG4gICAgICB9O1xuICAgIH0sXG4gICAgcmFuZG9tU2FmZVRpbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFRpbGVzLnJhbmRvbVNhZmVUaWxlKCk7XG4gICAgfSxcbiAgICBuZXdHYW1lOiBmdW5jdGlvbih4LCB5LCBtaW5lcykge1xuICAgICAgcmV0dXJuIFRpbGVzLm5ld0dhbWUoeCwgeSwgbWluZXMpO1xuICAgIH0sXG4gICAgZW1pdENoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0KHRoaXMuZXZlbnQpO1xuICAgIH0sXG4gICAgYWRkQ2hhbmdlTGlzdGVuZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5vbih0aGlzLmV2ZW50LCBjYWxsYmFjayk7XG4gICAgfSxcbiAgICByZW1vdmVDaGFuZ2VMaXN0ZW5lcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbW92ZUxpc3RlbmVyKHRoaXMuZXZlbnQsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gVGlsZVN0b3JlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEaXNwYXRjaGVyXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxudmFyIF9sYXN0SUQgPSAxO1xudmFyIF9wcmVmaXggPSAnSURfJztcblxuLyoqXG4gKiBEaXNwYXRjaGVyIGlzIHVzZWQgdG8gYnJvYWRjYXN0IHBheWxvYWRzIHRvIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLiBUaGlzIGlzXG4gKiBkaWZmZXJlbnQgZnJvbSBnZW5lcmljIHB1Yi1zdWIgc3lzdGVtcyBpbiB0d28gd2F5czpcbiAqXG4gKiAgIDEpIENhbGxiYWNrcyBhcmUgbm90IHN1YnNjcmliZWQgdG8gcGFydGljdWxhciBldmVudHMuIEV2ZXJ5IHBheWxvYWQgaXNcbiAqICAgICAgZGlzcGF0Y2hlZCB0byBldmVyeSByZWdpc3RlcmVkIGNhbGxiYWNrLlxuICogICAyKSBDYWxsYmFja3MgY2FuIGJlIGRlZmVycmVkIGluIHdob2xlIG9yIHBhcnQgdW50aWwgb3RoZXIgY2FsbGJhY2tzIGhhdmVcbiAqICAgICAgYmVlbiBleGVjdXRlZC5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgY29uc2lkZXIgdGhpcyBoeXBvdGhldGljYWwgZmxpZ2h0IGRlc3RpbmF0aW9uIGZvcm0sIHdoaWNoXG4gKiBzZWxlY3RzIGEgZGVmYXVsdCBjaXR5IHdoZW4gYSBjb3VudHJ5IGlzIHNlbGVjdGVkOlxuICpcbiAqICAgdmFyIGZsaWdodERpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcigpO1xuICpcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2Ygd2hpY2ggY291bnRyeSBpcyBzZWxlY3RlZFxuICogICB2YXIgQ291bnRyeVN0b3JlID0ge2NvdW50cnk6IG51bGx9O1xuICpcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2Ygd2hpY2ggY2l0eSBpcyBzZWxlY3RlZFxuICogICB2YXIgQ2l0eVN0b3JlID0ge2NpdHk6IG51bGx9O1xuICpcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIGJhc2UgZmxpZ2h0IHByaWNlIG9mIHRoZSBzZWxlY3RlZCBjaXR5XG4gKiAgIHZhciBGbGlnaHRQcmljZVN0b3JlID0ge3ByaWNlOiBudWxsfVxuICpcbiAqIFdoZW4gYSB1c2VyIGNoYW5nZXMgdGhlIHNlbGVjdGVkIGNpdHksIHdlIGRpc3BhdGNoIHRoZSBwYXlsb2FkOlxuICpcbiAqICAgZmxpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gKiAgICAgYWN0aW9uVHlwZTogJ2NpdHktdXBkYXRlJyxcbiAqICAgICBzZWxlY3RlZENpdHk6ICdwYXJpcydcbiAqICAgfSk7XG4gKlxuICogVGhpcyBwYXlsb2FkIGlzIGRpZ2VzdGVkIGJ5IGBDaXR5U3RvcmVgOlxuICpcbiAqICAgZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XG4gKiAgICAgaWYgKHBheWxvYWQuYWN0aW9uVHlwZSA9PT0gJ2NpdHktdXBkYXRlJykge1xuICogICAgICAgQ2l0eVN0b3JlLmNpdHkgPSBwYXlsb2FkLnNlbGVjdGVkQ2l0eTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIGNvdW50cnksIHdlIGRpc3BhdGNoIHRoZSBwYXlsb2FkOlxuICpcbiAqICAgZmxpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gKiAgICAgYWN0aW9uVHlwZTogJ2NvdW50cnktdXBkYXRlJyxcbiAqICAgICBzZWxlY3RlZENvdW50cnk6ICdhdXN0cmFsaWEnXG4gKiAgIH0pO1xuICpcbiAqIFRoaXMgcGF5bG9hZCBpcyBkaWdlc3RlZCBieSBib3RoIHN0b3JlczpcbiAqXG4gKiAgICBDb3VudHJ5U3RvcmUuZGlzcGF0Y2hUb2tlbiA9IGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgIGlmIChwYXlsb2FkLmFjdGlvblR5cGUgPT09ICdjb3VudHJ5LXVwZGF0ZScpIHtcbiAqICAgICAgIENvdW50cnlTdG9yZS5jb3VudHJ5ID0gcGF5bG9hZC5zZWxlY3RlZENvdW50cnk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBXaGVuIHRoZSBjYWxsYmFjayB0byB1cGRhdGUgYENvdW50cnlTdG9yZWAgaXMgcmVnaXN0ZXJlZCwgd2Ugc2F2ZSBhIHJlZmVyZW5jZVxuICogdG8gdGhlIHJldHVybmVkIHRva2VuLiBVc2luZyB0aGlzIHRva2VuIHdpdGggYHdhaXRGb3IoKWAsIHdlIGNhbiBndWFyYW50ZWVcbiAqIHRoYXQgYENvdW50cnlTdG9yZWAgaXMgdXBkYXRlZCBiZWZvcmUgdGhlIGNhbGxiYWNrIHRoYXQgdXBkYXRlcyBgQ2l0eVN0b3JlYFxuICogbmVlZHMgdG8gcXVlcnkgaXRzIGRhdGEuXG4gKlxuICogICBDaXR5U3RvcmUuZGlzcGF0Y2hUb2tlbiA9IGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgIGlmIChwYXlsb2FkLmFjdGlvblR5cGUgPT09ICdjb3VudHJ5LXVwZGF0ZScpIHtcbiAqICAgICAgIC8vIGBDb3VudHJ5U3RvcmUuY291bnRyeWAgbWF5IG5vdCBiZSB1cGRhdGVkLlxuICogICAgICAgZmxpZ2h0RGlzcGF0Y2hlci53YWl0Rm9yKFtDb3VudHJ5U3RvcmUuZGlzcGF0Y2hUb2tlbl0pO1xuICogICAgICAgLy8gYENvdW50cnlTdG9yZS5jb3VudHJ5YCBpcyBub3cgZ3VhcmFudGVlZCB0byBiZSB1cGRhdGVkLlxuICpcbiAqICAgICAgIC8vIFNlbGVjdCB0aGUgZGVmYXVsdCBjaXR5IGZvciB0aGUgbmV3IGNvdW50cnlcbiAqICAgICAgIENpdHlTdG9yZS5jaXR5ID0gZ2V0RGVmYXVsdENpdHlGb3JDb3VudHJ5KENvdW50cnlTdG9yZS5jb3VudHJ5KTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSB1c2FnZSBvZiBgd2FpdEZvcigpYCBjYW4gYmUgY2hhaW5lZCwgZm9yIGV4YW1wbGU6XG4gKlxuICogICBGbGlnaHRQcmljZVN0b3JlLmRpc3BhdGNoVG9rZW4gPVxuICogICAgIGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgICAgc3dpdGNoIChwYXlsb2FkLmFjdGlvblR5cGUpIHtcbiAqICAgICAgICAgY2FzZSAnY291bnRyeS11cGRhdGUnOlxuICogICAgICAgICAgIGZsaWdodERpc3BhdGNoZXIud2FpdEZvcihbQ2l0eVN0b3JlLmRpc3BhdGNoVG9rZW5dKTtcbiAqICAgICAgICAgICBGbGlnaHRQcmljZVN0b3JlLnByaWNlID1cbiAqICAgICAgICAgICAgIGdldEZsaWdodFByaWNlU3RvcmUoQ291bnRyeVN0b3JlLmNvdW50cnksIENpdHlTdG9yZS5jaXR5KTtcbiAqICAgICAgICAgICBicmVhaztcbiAqXG4gKiAgICAgICAgIGNhc2UgJ2NpdHktdXBkYXRlJzpcbiAqICAgICAgICAgICBGbGlnaHRQcmljZVN0b3JlLnByaWNlID1cbiAqICAgICAgICAgICAgIEZsaWdodFByaWNlU3RvcmUoQ291bnRyeVN0b3JlLmNvdW50cnksIENpdHlTdG9yZS5jaXR5KTtcbiAqICAgICAgICAgICBicmVhaztcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSBgY291bnRyeS11cGRhdGVgIHBheWxvYWQgd2lsbCBiZSBndWFyYW50ZWVkIHRvIGludm9rZSB0aGUgc3RvcmVzJ1xuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MgaW4gb3JkZXI6IGBDb3VudHJ5U3RvcmVgLCBgQ2l0eVN0b3JlYCwgdGhlblxuICogYEZsaWdodFByaWNlU3RvcmVgLlxuICovXG5cbiAgZnVuY3Rpb24gRGlzcGF0Y2hlcigpIHtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrcyA9IHt9O1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nID0ge307XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0hhbmRsZWQgPSB7fTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX3BlbmRpbmdQYXlsb2FkID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdpdGggZXZlcnkgZGlzcGF0Y2hlZCBwYXlsb2FkLiBSZXR1cm5zXG4gICAqIGEgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGB3YWl0Rm9yKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5yZWdpc3Rlcj1mdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBpZCA9IF9wcmVmaXggKyBfbGFzdElEKys7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3NbaWRdID0gY2FsbGJhY2s7XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgY2FsbGJhY2sgYmFzZWQgb24gaXRzIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLnVucmVnaXN0ZXI9ZnVuY3Rpb24oaWQpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF0sXG4gICAgICAnRGlzcGF0Y2hlci51bnJlZ2lzdGVyKC4uLik6IGAlc2AgZG9lcyBub3QgbWFwIHRvIGEgcmVnaXN0ZXJlZCBjYWxsYmFjay4nLFxuICAgICAgaWRcbiAgICApO1xuICAgIGRlbGV0ZSB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF07XG4gIH07XG5cbiAgLyoqXG4gICAqIFdhaXRzIGZvciB0aGUgY2FsbGJhY2tzIHNwZWNpZmllZCB0byBiZSBpbnZva2VkIGJlZm9yZSBjb250aW51aW5nIGV4ZWN1dGlvblxuICAgKiBvZiB0aGUgY3VycmVudCBjYWxsYmFjay4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBhIGNhbGxiYWNrIGluXG4gICAqIHJlc3BvbnNlIHRvIGEgZGlzcGF0Y2hlZCBwYXlsb2FkLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGlkc1xuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUud2FpdEZvcj1mdW5jdGlvbihpZHMpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcsXG4gICAgICAnRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IE11c3QgYmUgaW52b2tlZCB3aGlsZSBkaXNwYXRjaGluZy4nXG4gICAgKTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaWRzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGlkID0gaWRzW2lpXTtcbiAgICAgIGlmICh0aGlzLiREaXNwYXRjaGVyX2lzUGVuZGluZ1tpZF0pIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIHRoaXMuJERpc3BhdGNoZXJfaXNIYW5kbGVkW2lkXSxcbiAgICAgICAgICAnRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IENpcmN1bGFyIGRlcGVuZGVuY3kgZGV0ZWN0ZWQgd2hpbGUgJyArXG4gICAgICAgICAgJ3dhaXRpbmcgZm9yIGAlc2AuJyxcbiAgICAgICAgICBpZFxuICAgICAgICApO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3NbaWRdLFxuICAgICAgICAnRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IGAlc2AgZG9lcyBub3QgbWFwIHRvIGEgcmVnaXN0ZXJlZCBjYWxsYmFjay4nLFxuICAgICAgICBpZFxuICAgICAgKTtcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfaW52b2tlQ2FsbGJhY2soaWQpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhIHBheWxvYWQgdG8gYWxsIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGF5bG9hZFxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuZGlzcGF0Y2g9ZnVuY3Rpb24ocGF5bG9hZCkge1xuICAgIGludmFyaWFudChcbiAgICAgICF0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcsXG4gICAgICAnRGlzcGF0Y2guZGlzcGF0Y2goLi4uKTogQ2Fubm90IGRpc3BhdGNoIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC4nXG4gICAgKTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX3N0YXJ0RGlzcGF0Y2hpbmcocGF5bG9hZCk7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIGlkIGluIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzKSB7XG4gICAgICAgIGlmICh0aGlzLiREaXNwYXRjaGVyX2lzUGVuZGluZ1tpZF0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiREaXNwYXRjaGVyX2ludm9rZUNhbGxiYWNrKGlkKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9zdG9wRGlzcGF0Y2hpbmcoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIElzIHRoaXMgRGlzcGF0Y2hlciBjdXJyZW50bHkgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5pc0Rpc3BhdGNoaW5nPWZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIGNhbGxiYWNrIHN0b3JlZCB3aXRoIHRoZSBnaXZlbiBpZC4gQWxzbyBkbyBzb21lIGludGVybmFsXG4gICAqIGJvb2trZWVwaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS4kRGlzcGF0Y2hlcl9pbnZva2VDYWxsYmFjaz1mdW5jdGlvbihpZCkge1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nW2lkXSA9IHRydWU7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3NbaWRdKHRoaXMuJERpc3BhdGNoZXJfcGVuZGluZ1BheWxvYWQpO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNIYW5kbGVkW2lkXSA9IHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB1cCBib29ra2VlcGluZyBuZWVkZWQgd2hlbiBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBheWxvYWRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS4kRGlzcGF0Y2hlcl9zdGFydERpc3BhdGNoaW5nPWZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICBmb3IgKHZhciBpZCBpbiB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrcykge1xuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pc1BlbmRpbmdbaWRdID0gZmFsc2U7XG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2lzSGFuZGxlZFtpZF0gPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9wZW5kaW5nUGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogQ2xlYXIgYm9va2tlZXBpbmcgdXNlZCBmb3IgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuJERpc3BhdGNoZXJfc3RvcERpc3BhdGNoaW5nPWZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJERpc3BhdGNoZXJfcGVuZGluZ1BheWxvYWQgPSBudWxsO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICB9O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gRGlzcGF0Y2hlcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGludmFyaWFudFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKGZhbHNlKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFyaWFudCBWaW9sYXRpb246ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4nKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIHZhciBtO1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gMDtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbihlbWl0dGVyLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IDE7XG4gIGVsc2VcbiAgICByZXQgPSBlbWl0dGVyLl9ldmVudHNbdHlwZV0ubGVuZ3RoO1xuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBUb09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIGtleXM7XG5cdHZhciB0byA9IFRvT2JqZWN0KHRhcmdldCk7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gYXJndW1lbnRzW3NdO1xuXHRcdGtleXMgPSBPYmplY3Qua2V5cyhPYmplY3QoZnJvbSkpO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0b1trZXlzW2ldXSA9IGZyb21ba2V5c1tpXV07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==